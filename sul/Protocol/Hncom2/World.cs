/*
 * This file was automatically generated by sel-utils and
 * released under the MIT License.
 * 
 * License: https://github.com/sel-project/sel-utils/blob/master/LICENSE
 * Repository: https://github.com/sel-project/sel-utils
 * Generated from https://github.com/sel-project/sel-utils/blob/master/xml/protocol/hncom2.xml
 */
using System.Text;

using sul.Utils;
using sul.Protocol.Hncom2.Types;

namespace sul.Protocol.Hncom2.World
{

    public class Add : sul.Utils.Packet
    {

        public const byte Id = 31;

        public const bool Clientbound = false;
        public const bool Serverbound = true;

        // dimension
        public const byte OVERWORLD = 0;
        public const byte NETHER = 1;
        public const byte END = 2;

        // generator
        public const byte DEFAULT = 0;
        public const byte FLAT = 1;

        // difficulty
        public const byte PEACEFUL = 0;
        public const byte EASY = 1;
        public const byte NORMAL = 2;
        public const byte HARD = 3;
        public const byte HARDCORE = 4;

        // gamemode
        public const byte SURVIVAL = 0;
        public const byte CREATIVE = 1;
        public const byte ADVENTURE = 2;
        public const byte SPECTATOR = 3;

        public uint worldId;
        public string name;
        public byte dimension;
        public byte generator;
        public byte difficulty;
        public byte gamemode;
        public System.Tuple<int, int> spawnPoint;
        public short time;
        public int seed;
        public int parent;

        public Add() : this(0, "", 0, 0, 0, 0, null, 0, 0, -1) {}

        public Add(uint worldId, string name, byte dimension, byte generator, byte difficulty, byte gamemode, System.Tuple<int, int> spawnPoint, short time, int seed, int parent)
        {
            this.worldId = worldId;
            this.name = name;
            this.dimension = dimension;
            this.generator = generator;
            this.difficulty = difficulty;
            this.gamemode = gamemode;
            this.spawnPoint = spawnPoint;
            this.time = time;
            this.seed = seed;
            this.parent = parent;
        }

        public override int GetId()
        {
            return (int)Id;
        }

        public override void EncodeId(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteUbyte(Id);
        }

        public override void DecodeId(sul.Utils.Buffer _buffer)
        {
            //_buffer.ReadUbyte();
        }

        protected override void EncodeImpl(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteVaruint(worldId);
            _buffer.WriteVaruint(Encoding.UTF8.GetByteCount(name)); _buffer.WriteString(name);
            _buffer.WriteUbyte(dimension);
            _buffer.WriteUbyte(generator);
            _buffer.WriteUbyte(difficulty);
            _buffer.WriteUbyte(gamemode);
            _buffer.WriteVarint(spawnPoint.Item1); _buffer.WriteVarint(spawnPoint.Item2);
            _buffer.WriteBigEndianShort(time);
            _buffer.WriteVarint(seed);
            _buffer.WriteVarint(parent);
        }

        protected override void DecodeImpl(sul.Utils.Buffer _buffer)
        {
            //_buffer.ReadVaruint()
            //_buffer.ReadString()
            //_buffer.ReadUbyte()
            //_buffer.ReadUbyte()
            //_buffer.ReadUbyte()
            //_buffer.ReadUbyte()
            //_buffer.ReadVarint() _buffer.ReadVarint()
            //_buffer.ReadBigEndianShort()
            //_buffer.ReadVarint()
            //_buffer.ReadVarint()
        }

        public static Add FromBuffer(byte[] buffer)
        {
            var ret = new Add();
            ret.Decode(buffer);
            return ret;
        }

    }

    public class Remove : sul.Utils.Packet
    {

        public const byte Id = 32;

        public const bool Clientbound = false;
        public const bool Serverbound = true;

        public uint worldId;

        public Remove() : this(0) {}

        public Remove(uint worldId)
        {
            this.worldId = worldId;
        }

        public override int GetId()
        {
            return (int)Id;
        }

        public override void EncodeId(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteUbyte(Id);
        }

        public override void DecodeId(sul.Utils.Buffer _buffer)
        {
            //_buffer.ReadUbyte();
        }

        protected override void EncodeImpl(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteVaruint(worldId);
        }

        protected override void DecodeImpl(sul.Utils.Buffer _buffer)
        {
            //_buffer.ReadVaruint()
        }

        public static Remove FromBuffer(byte[] buffer)
        {
            var ret = new Remove();
            ret.Decode(buffer);
            return ret;
        }

    }

    public class UpdateDifficulty : sul.Utils.Packet
    {

        public const byte Id = 33;

        public const bool Clientbound = false;
        public const bool Serverbound = true;

        public uint worldId;
        public byte difficulty;

        public UpdateDifficulty() : this(0, 0) {}

        public UpdateDifficulty(uint worldId, byte difficulty)
        {
            this.worldId = worldId;
            this.difficulty = difficulty;
        }

        public override int GetId()
        {
            return (int)Id;
        }

        public override void EncodeId(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteUbyte(Id);
        }

        public override void DecodeId(sul.Utils.Buffer _buffer)
        {
            //_buffer.ReadUbyte();
        }

        protected override void EncodeImpl(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteVaruint(worldId);
            _buffer.WriteUbyte(difficulty);
        }

        protected override void DecodeImpl(sul.Utils.Buffer _buffer)
        {
            //_buffer.ReadVaruint()
            //_buffer.ReadUbyte()
        }

        public static UpdateDifficulty FromBuffer(byte[] buffer)
        {
            var ret = new UpdateDifficulty();
            ret.Decode(buffer);
            return ret;
        }

    }

    public class UpdateGamemode : sul.Utils.Packet
    {

        public const byte Id = 34;

        public const bool Clientbound = false;
        public const bool Serverbound = true;

        public uint worldId;
        public byte gamemode;

        public UpdateGamemode() : this(0, 0) {}

        public UpdateGamemode(uint worldId, byte gamemode)
        {
            this.worldId = worldId;
            this.gamemode = gamemode;
        }

        public override int GetId()
        {
            return (int)Id;
        }

        public override void EncodeId(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteUbyte(Id);
        }

        public override void DecodeId(sul.Utils.Buffer _buffer)
        {
            //_buffer.ReadUbyte();
        }

        protected override void EncodeImpl(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteVaruint(worldId);
            _buffer.WriteUbyte(gamemode);
        }

        protected override void DecodeImpl(sul.Utils.Buffer _buffer)
        {
            //_buffer.ReadVaruint()
            //_buffer.ReadUbyte()
        }

        public static UpdateGamemode FromBuffer(byte[] buffer)
        {
            var ret = new UpdateGamemode();
            ret.Decode(buffer);
            return ret;
        }

    }

    public class RequestCreation : sul.Utils.Packet
    {

        public const byte Id = 35;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        public string name;
        public byte dimension;
        public byte generator;
        public byte difficulty;
        public byte gamemode;
        public int seed;
        public int parent;

        public RequestCreation() : this("", 0, 0, 0, 0, 0, -1) {}

        public RequestCreation(string name, byte dimension, byte generator, byte difficulty, byte gamemode, int seed, int parent)
        {
            this.name = name;
            this.dimension = dimension;
            this.generator = generator;
            this.difficulty = difficulty;
            this.gamemode = gamemode;
            this.seed = seed;
            this.parent = parent;
        }

        public override int GetId()
        {
            return (int)Id;
        }

        public override void EncodeId(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteUbyte(Id);
        }

        public override void DecodeId(sul.Utils.Buffer _buffer)
        {
            //_buffer.ReadUbyte();
        }

        protected override void EncodeImpl(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteVaruint(Encoding.UTF8.GetByteCount(name)); _buffer.WriteString(name);
            _buffer.WriteUbyte(dimension);
            _buffer.WriteUbyte(generator);
            _buffer.WriteUbyte(difficulty);
            _buffer.WriteUbyte(gamemode);
            _buffer.WriteVarint(seed);
            _buffer.WriteVarint(parent);
        }

        protected override void DecodeImpl(sul.Utils.Buffer _buffer)
        {
            //_buffer.ReadString()
            //_buffer.ReadUbyte()
            //_buffer.ReadUbyte()
            //_buffer.ReadUbyte()
            //_buffer.ReadUbyte()
            //_buffer.ReadVarint()
            //_buffer.ReadVarint()
        }

        public static RequestCreation FromBuffer(byte[] buffer)
        {
            var ret = new RequestCreation();
            ret.Decode(buffer);
            return ret;
        }

    }

}
