/*
 * This file was automatically generated by sel-utils and
 * released under the MIT License.
 * 
 * License: https://github.com/sel-project/sel-utils/blob/master/LICENSE
 * Repository: https://github.com/sel-project/sel-utils
 * Generated from https://github.com/sel-project/sel-utils/blob/master/xml/protocol/externalconsole1.xml
 */
using System.Text;

using sul.Utils;
using sul.Protocol.Externalconsole1.Types;

namespace sul.Protocol.Externalconsole1.Status
{

    public class KeepAlive : sul.Utils.Packet
    {

        public const byte Id = 0;

        public const bool Clientbound = true;
        public const bool Serverbound = true;

        public uint count;

        public KeepAlive() : this(0) {}

        public KeepAlive(uint count)
        {
            this.count = count;
        }

        public override int GetId()
        {
            return (int)Id;
        }

        public override void EncodeId(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteUbyte(Id);
        }

        public override void DecodeId(sul.Utils.Buffer _buffer)
        {
            //_buffer.ReadUbyte();
        }

        protected override void EncodeImpl(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteBigEndianUint(count);
        }

        protected override void DecodeImpl(sul.Utils.Buffer _buffer)
        {
            //count = _buffer.ReadBigEndianUint();
        }

        public static KeepAlive FromBuffer(byte[] buffer)
        {
            var ret = new KeepAlive();
            ret.Decode(buffer);
            return ret;
        }

    }

    public class UpdateNodes : sul.Utils.Packet
    {

        public const byte Id = 1;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        // action
        public const byte ADD = 0;
        public const byte REMOVE = 1;

        public byte action;
        public string node;

        public UpdateNodes() : this(0, "") {}

        public UpdateNodes(byte action, string node)
        {
            this.action = action;
            this.node = node;
        }

        public override int GetId()
        {
            return (int)Id;
        }

        public override void EncodeId(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteUbyte(Id);
        }

        public override void DecodeId(sul.Utils.Buffer _buffer)
        {
            //_buffer.ReadUbyte();
        }

        protected override void EncodeImpl(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteUbyte(action);
            _buffer.WriteBigEndianUshort(Encoding.UTF8.GetByteCount(node)); _buffer.WriteString(node);
        }

        protected override void DecodeImpl(sul.Utils.Buffer _buffer)
        {
            //action = _buffer.ReadUbyte();
            //node = _buffer.ReadString();
        }

        public static UpdateNodes FromBuffer(byte[] buffer)
        {
            var ret = new UpdateNodes();
            ret.Decode(buffer);
            return ret;
        }

    }

    public class RequestStats : sul.Utils.Packet
    {

        public const byte Id = 2;

        public const bool Clientbound = false;
        public const bool Serverbound = true;



        public RequestStats()
        {

        }

        public override int GetId()
        {
            return (int)Id;
        }

        public override void EncodeId(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteUbyte(Id);
        }

        public override void DecodeId(sul.Utils.Buffer _buffer)
        {
            //_buffer.ReadUbyte();
        }

        protected override void EncodeImpl(sul.Utils.Buffer _buffer)
        {

        }

        protected override void DecodeImpl(sul.Utils.Buffer _buffer)
        {

        }

        public static RequestStats FromBuffer(byte[] buffer)
        {
            var ret = new RequestStats();
            ret.Decode(buffer);
            return ret;
        }

    }

    public class UpdateStats : sul.Utils.Packet
    {

        public const byte Id = 3;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        public uint onlinePlayers;
        public uint maxPlayers;
        public uint uptime;
        public uint upload;
        public uint download;
        public NodeStats[] nodes;

        public UpdateStats() : this(0, 0, 0, 0, 0, new NodeStats[]{}) {}

        public UpdateStats(uint onlinePlayers, uint maxPlayers, uint uptime, uint upload, uint download, NodeStats[] nodes)
        {
            this.onlinePlayers = onlinePlayers;
            this.maxPlayers = maxPlayers;
            this.uptime = uptime;
            this.upload = upload;
            this.download = download;
            this.nodes = nodes;
        }

        public override int GetId()
        {
            return (int)Id;
        }

        public override void EncodeId(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteUbyte(Id);
        }

        public override void DecodeId(sul.Utils.Buffer _buffer)
        {
            //_buffer.ReadUbyte();
        }

        protected override void EncodeImpl(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteBigEndianUint(onlinePlayers);
            _buffer.WriteBigEndianUint(maxPlayers);
            _buffer.WriteBigEndianUint(uptime);
            _buffer.WriteBigEndianUint(upload);
            _buffer.WriteBigEndianUint(download);
            _buffer.WriteBigEndianUshort(nodes.Length); foreach (NodeStats nodesChild in nodes){ nodesChild.EncodeBody(_buffer); }
        }

        protected override void DecodeImpl(sul.Utils.Buffer _buffer)
        {
            //onlinePlayers = _buffer.ReadBigEndianUint();
            //maxPlayers = _buffer.ReadBigEndianUint();
            //uptime = _buffer.ReadBigEndianUint();
            //upload = _buffer.ReadBigEndianUint();
            //download = _buffer.ReadBigEndianUint();
            //nodes.DecodeBody(_buffer);
        }

        public static UpdateStats FromBuffer(byte[] buffer)
        {
            var ret = new UpdateStats();
            ret.Decode(buffer);
            return ret;
        }

    }

}
