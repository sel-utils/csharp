/*
 * This file was automatically generated by sel-utils and
 * released under the MIT License.
 * 
 * License: https://github.com/sel-project/sel-utils/blob/master/LICENSE
 * Repository: https://github.com/sel-project/sel-utils
 * Generated from https://github.com/sel-project/sel-utils/blob/master/xml/protocol/externalconsole1.xml
 */
using Types = sul.Externalconsole1.Types;

using Utils.Buffer;
using Utils.Packet;

namespace sul.Externalconsole1
{

    public class ConsoleMessage : Packet
    {

        public const byte Id = 4;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        public string node;
        public ulong timestamp;
        public string logger;
        public string message;

        public ConsoleMessage() {}

        public ConsoleMessage(string node, ulong timestamp, string logger, string message)
        {
            this.node = node;
            this.timestamp = timestamp;
            this.logger = logger;
            this.message = message;
        }

        public override int GetId()
        {
            return Id;
        }

        protected override void EncodeId(Buffer _buffer)
        {
            _buffer.WriteUbyte(Id);
        }

        protected override void DecodeId(Buffer _buffer)
        {
            _buffer.ReadUbyte();
        }

        protected override void EncodeImpl(Buffer _buffer)
        {
            _buffer.WriteUshort(Encoding.UTF8.GetByteCount(node)); _buffer.WriteString(node);
            _buffer.WriteBigEndianUlong(timestamp);
            _buffer.WriteUshort(Encoding.UTF8.GetByteCount(logger)); _buffer.WriteString(logger);
            _buffer.WriteUshort(Encoding.UTF8.GetByteCount(message)); _buffer.WriteString(message);
        }

        protected override void DecodeImpl(Buffer _buffer)
        {




        }

        public static ConsoleMessage FromBuffer(byte[] buffer)
        {
            var ret = new ConsoleMessage();
            ret.decode(buffer);
            return ret;
        }

    }

    public class Command : Packet
    {

        public const byte Id = 5;

        public const bool Clientbound = false;
        public const bool Serverbound = true;

        public string command;

        public Command() {}

        public Command(string command)
        {
            this.command = command;
        }

        public override int GetId()
        {
            return Id;
        }

        protected override void EncodeId(Buffer _buffer)
        {
            _buffer.WriteUbyte(Id);
        }

        protected override void DecodeId(Buffer _buffer)
        {
            _buffer.ReadUbyte();
        }

        protected override void EncodeImpl(Buffer _buffer)
        {
            _buffer.WriteUshort(Encoding.UTF8.GetByteCount(command)); _buffer.WriteString(command);
        }

        protected override void DecodeImpl(Buffer _buffer)
        {

        }

        public static Command FromBuffer(byte[] buffer)
        {
            var ret = new Command();
            ret.decode(buffer);
            return ret;
        }

    }

    public class PermissionDenied : Packet
    {

        public const byte Id = 6;

        public const bool Clientbound = true;
        public const bool Serverbound = false;



        public PermissionDenied() {}

        public override int GetId()
        {
            return Id;
        }

        protected override void EncodeId(Buffer _buffer)
        {
            _buffer.WriteUbyte(Id);
        }

        protected override void DecodeId(Buffer _buffer)
        {
            _buffer.ReadUbyte();
        }

        protected override void EncodeImpl(Buffer _buffer)
        {

        }

        protected override void DecodeImpl(Buffer _buffer)
        {

        }

        public static PermissionDenied FromBuffer(byte[] buffer)
        {
            var ret = new PermissionDenied();
            ret.decode(buffer);
            return ret;
        }

    }

}
