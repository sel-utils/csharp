/*
 * This file was automatically generated by sel-utils and
 * released under the MIT License.
 * 
 * License: https://github.com/sel-project/sel-utils/blob/master/LICENSE
 * Repository: https://github.com/sel-project/sel-utils
 * Generated from https://github.com/sel-project/sel-utils/blob/master/xml/protocol/externalconsole1.xml
 */
using System.Text;

namespace sul.Protocol.Externalconsole1.Types
{

    public class Game : sul.Utils.Stream
    {

        // type
        public const byte POCKET = 1;
        public const byte MINECRAFT = 2;

        public byte type;
        public uint[] protocols;

        public Game() : this(0, new uint[]{}) {}

        public Game(byte type, uint[] protocols)
        {
            this.type = type;
            this.protocols = protocols;
        }

        protected override void EncodeImpl(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteUbyte(type);
            _buffer.WriteBigEndianUshort(protocols.Length); foreach (uint protocolsChild in protocols){ _buffer.WriteBigEndianUint(protocolsChild); }
        }

        protected override void DecodeImpl(sul.Utils.Buffer _buffer)
        {
            //type = _buffer.ReadUbyte();
            //protocols.DecodeBody(_buffer);
        }

    }

    public class NodeStats : sul.Utils.Stream
    {

        public string name;
        public float tps;
        public ulong ram;
        public float cpu;

        public NodeStats() : this("", 0, 0, 0) {}

        public NodeStats(string name, float tps, ulong ram, float cpu)
        {
            this.name = name;
            this.tps = tps;
            this.ram = ram;
            this.cpu = cpu;
        }

        protected override void EncodeImpl(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteBigEndianUshort(Encoding.UTF8.GetByteCount(name)); _buffer.WriteString(name);
            _buffer.WriteBigEndianFloat(tps);
            _buffer.WriteBigEndianUlong(ram);
            _buffer.WriteBigEndianFloat(cpu);
        }

        protected override void DecodeImpl(sul.Utils.Buffer _buffer)
        {
            //name = _buffer.ReadString();
            //tps = _buffer.ReadBigEndianFloat();
            //ram = _buffer.ReadBigEndianUlong();
            //cpu = _buffer.ReadBigEndianFloat();
        }

    }

}
