/*
 * This file was automatically generated by sel-utils and
 * released under the MIT License.
 * 
 * License: https://github.com/sel-project/sel-utils/blob/master/LICENSE
 * Repository: https://github.com/sel-project/sel-utils
 * Generated from https://github.com/sel-project/sel-utils/blob/master/xml/protocol/pocket101.xml
 */
using System.Text;

using sul.Utils;
using sul.Pocket101.Types;

namespace sul.Pocket101.Play
{

    public class Login : sul.Utils.Packet
    {

        public const byte Id = 1;

        public const bool Clientbound = false;
        public const bool Serverbound = true;

        // edition
        public const byte CLASSIC = 0;
        public const byte EDUCATION = 1;

        public uint protocol;
        public byte edition;
        public byte[] body;

        public Login() : this(0, 0, new byte[]{}) {}

        public Login(uint protocol, byte edition, byte[] body)
        {
            this.protocol = protocol;
            this.edition = edition;
            this.body = body;
        }

        public override int GetId()
        {
            return (int)Id;
        }

        protected override void EncodeId(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteUbyte(Id);
        }

        protected override void DecodeId(sul.Utils.Buffer _buffer)
        {
            //_buffer.ReadUbyte();
        }

        protected override void EncodeImpl(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteBigEndianUint(protocol);
            _buffer.WriteUbyte(edition);
            _buffer.WriteVaruint(body.Length); _buffer.WriteBytes(body);
        }

        protected override void DecodeImpl(sul.Utils.Buffer _buffer)
        {
            //protocol = _buffer.ReadBigEndianUint();
            //edition = _buffer.ReadUbyte();
            //body.DecodeBody(_buffer);
        }

        public static Login FromBuffer(byte[] buffer)
        {
            var ret = new Login();
            ret.Decode(buffer);
            return ret;
        }

    }

    public class PlayStatus : sul.Utils.Packet
    {

        public const byte Id = 2;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        // status
        public const uint OK = 0;
        public const uint OUTDATED_CLIENT = 1;
        public const uint OUTDATED_SERVER = 2;
        public const uint SPAWNED = 3;
        public const uint INVALID_TENANT = 4;
        public const uint EDITION_MISMATCH = 5;

        public uint status;

        public PlayStatus() : this(0) {}

        public PlayStatus(uint status)
        {
            this.status = status;
        }

        public override int GetId()
        {
            return (int)Id;
        }

        protected override void EncodeId(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteUbyte(Id);
        }

        protected override void DecodeId(sul.Utils.Buffer _buffer)
        {
            //_buffer.ReadUbyte();
        }

        protected override void EncodeImpl(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteBigEndianUint(status);
        }

        protected override void DecodeImpl(sul.Utils.Buffer _buffer)
        {
            //status = _buffer.ReadBigEndianUint();
        }

        public static PlayStatus FromBuffer(byte[] buffer)
        {
            var ret = new PlayStatus();
            ret.Decode(buffer);
            return ret;
        }

    }

    public class ServerToClientHandshake : sul.Utils.Packet
    {

        public const byte Id = 3;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        public string serverPublicKey;
        public byte[] token;

        public ServerToClientHandshake() : this("", new byte[]{}) {}

        public ServerToClientHandshake(string serverPublicKey, byte[] token)
        {
            this.serverPublicKey = serverPublicKey;
            this.token = token;
        }

        public override int GetId()
        {
            return (int)Id;
        }

        protected override void EncodeId(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteUbyte(Id);
        }

        protected override void DecodeId(sul.Utils.Buffer _buffer)
        {
            //_buffer.ReadUbyte();
        }

        protected override void EncodeImpl(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteVaruint(Encoding.UTF8.GetByteCount(serverPublicKey)); _buffer.WriteString(serverPublicKey);
            _buffer.WriteVaruint(token.Length); _buffer.WriteBytes(token);
        }

        protected override void DecodeImpl(sul.Utils.Buffer _buffer)
        {
            //serverPublicKey = _buffer.ReadString();
            //token.DecodeBody(_buffer);
        }

        public static ServerToClientHandshake FromBuffer(byte[] buffer)
        {
            var ret = new ServerToClientHandshake();
            ret.Decode(buffer);
            return ret;
        }

    }

    public class ClientToServerHandshake : sul.Utils.Packet
    {

        public const byte Id = 4;

        public const bool Clientbound = false;
        public const bool Serverbound = true;



        public ClientToServerHandshake()
        {

        }

        public override int GetId()
        {
            return (int)Id;
        }

        protected override void EncodeId(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteUbyte(Id);
        }

        protected override void DecodeId(sul.Utils.Buffer _buffer)
        {
            //_buffer.ReadUbyte();
        }

        protected override void EncodeImpl(sul.Utils.Buffer _buffer)
        {

        }

        protected override void DecodeImpl(sul.Utils.Buffer _buffer)
        {

        }

        public static ClientToServerHandshake FromBuffer(byte[] buffer)
        {
            var ret = new ClientToServerHandshake();
            ret.Decode(buffer);
            return ret;
        }

    }

    public class Disconnect : sul.Utils.Packet
    {

        public const byte Id = 5;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        public bool hideDisconnectionScreen;
        public string message;

        public Disconnect() : this(false, "") {}

        public Disconnect(bool hideDisconnectionScreen, string message)
        {
            this.hideDisconnectionScreen = hideDisconnectionScreen;
            this.message = message;
        }

        public override int GetId()
        {
            return (int)Id;
        }

        protected override void EncodeId(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteUbyte(Id);
        }

        protected override void DecodeId(sul.Utils.Buffer _buffer)
        {
            //_buffer.ReadUbyte();
        }

        protected override void EncodeImpl(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteBool(hideDisconnectionScreen);
            if(hideDisconnectionScreen==false){ _buffer.WriteVaruint(Encoding.UTF8.GetByteCount(message)); _buffer.WriteString(message); }
        }

        protected override void DecodeImpl(sul.Utils.Buffer _buffer)
        {
            //hideDisconnectionScreen = _buffer.ReadBool();
            //if(hideDisconnectionScreen==false){ message = _buffer.ReadString(); }
        }

        public static Disconnect FromBuffer(byte[] buffer)
        {
            var ret = new Disconnect();
            ret.Decode(buffer);
            return ret;
        }

    }

    public class Batch : sul.Utils.Packet
    {

        public const byte Id = 6;

        public const bool Clientbound = true;
        public const bool Serverbound = true;

        public byte[] data;

        public Batch() : this(new byte[]{}) {}

        public Batch(byte[] data)
        {
            this.data = data;
        }

        public override int GetId()
        {
            return (int)Id;
        }

        protected override void EncodeId(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteUbyte(Id);
        }

        protected override void DecodeId(sul.Utils.Buffer _buffer)
        {
            //_buffer.ReadUbyte();
        }

        protected override void EncodeImpl(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteVaruint(data.Length); _buffer.WriteBytes(data);
        }

        protected override void DecodeImpl(sul.Utils.Buffer _buffer)
        {
            //data.DecodeBody(_buffer);
        }

        public static Batch FromBuffer(byte[] buffer)
        {
            var ret = new Batch();
            ret.Decode(buffer);
            return ret;
        }

    }

    public class ResourcePacksInfo : sul.Utils.Packet
    {

        public const byte Id = 7;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        public bool mustAccept;
        public PackWithSize[] behaviourPacks;
        public PackWithSize[] resourcePacks;

        public ResourcePacksInfo() : this(false, new PackWithSize[]{}, new PackWithSize[]{}) {}

        public ResourcePacksInfo(bool mustAccept, PackWithSize[] behaviourPacks, PackWithSize[] resourcePacks)
        {
            this.mustAccept = mustAccept;
            this.behaviourPacks = behaviourPacks;
            this.resourcePacks = resourcePacks;
        }

        public override int GetId()
        {
            return (int)Id;
        }

        protected override void EncodeId(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteUbyte(Id);
        }

        protected override void DecodeId(sul.Utils.Buffer _buffer)
        {
            //_buffer.ReadUbyte();
        }

        protected override void EncodeImpl(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteBool(mustAccept);
            _buffer.WriteBigEndianUshort(behaviourPacks.Length); foreach (PackWithSize behaviourPacksChild in behaviourPacks){ behaviourPacksChild.EncodeBody(_buffer); }
            _buffer.WriteBigEndianUshort(resourcePacks.Length); foreach (PackWithSize resourcePacksChild in resourcePacks){ resourcePacksChild.EncodeBody(_buffer); }
        }

        protected override void DecodeImpl(sul.Utils.Buffer _buffer)
        {
            //mustAccept = _buffer.ReadBool();
            //behaviourPacks.DecodeBody(_buffer);
            //resourcePacks.DecodeBody(_buffer);
        }

        public static ResourcePacksInfo FromBuffer(byte[] buffer)
        {
            var ret = new ResourcePacksInfo();
            ret.Decode(buffer);
            return ret;
        }

    }

    public class ResourcePacksStackPacket : sul.Utils.Packet
    {

        public const byte Id = 8;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        public bool mustAccept;
        public Pack[] behaviourPacks;
        public Pack[] resourcePacks;

        public ResourcePacksStackPacket() : this(false, new Pack[]{}, new Pack[]{}) {}

        public ResourcePacksStackPacket(bool mustAccept, Pack[] behaviourPacks, Pack[] resourcePacks)
        {
            this.mustAccept = mustAccept;
            this.behaviourPacks = behaviourPacks;
            this.resourcePacks = resourcePacks;
        }

        public override int GetId()
        {
            return (int)Id;
        }

        protected override void EncodeId(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteUbyte(Id);
        }

        protected override void DecodeId(sul.Utils.Buffer _buffer)
        {
            //_buffer.ReadUbyte();
        }

        protected override void EncodeImpl(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteBool(mustAccept);
            _buffer.WriteBigEndianUshort(behaviourPacks.Length); foreach (Pack behaviourPacksChild in behaviourPacks){ behaviourPacksChild.EncodeBody(_buffer); }
            _buffer.WriteBigEndianUshort(resourcePacks.Length); foreach (Pack resourcePacksChild in resourcePacks){ resourcePacksChild.EncodeBody(_buffer); }
        }

        protected override void DecodeImpl(sul.Utils.Buffer _buffer)
        {
            //mustAccept = _buffer.ReadBool();
            //behaviourPacks.DecodeBody(_buffer);
            //resourcePacks.DecodeBody(_buffer);
        }

        public static ResourcePacksStackPacket FromBuffer(byte[] buffer)
        {
            var ret = new ResourcePacksStackPacket();
            ret.Decode(buffer);
            return ret;
        }

    }

    public class ResourcePackClientResponse : sul.Utils.Packet
    {

        public const byte Id = 9;

        public const bool Clientbound = false;
        public const bool Serverbound = true;

        // status
        public const byte REFUSED = 1;
        public const byte SEND_PACKS = 2;
        public const byte HAVE_ALL_PACKS = 3;
        public const byte COMPLETED = 4;

        public byte status;
        public string[] packIds;

        public ResourcePackClientResponse() : this(0, new string[]{}) {}

        public ResourcePackClientResponse(byte status, string[] packIds)
        {
            this.status = status;
            this.packIds = packIds;
        }

        public override int GetId()
        {
            return (int)Id;
        }

        protected override void EncodeId(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteUbyte(Id);
        }

        protected override void DecodeId(sul.Utils.Buffer _buffer)
        {
            //_buffer.ReadUbyte();
        }

        protected override void EncodeImpl(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteUbyte(status);
            _buffer.WriteBigEndianUshort(packIds.Length); foreach (string packIdsChild in packIds){ _buffer.WriteVaruint(Encoding.UTF8.GetByteCount(packIdsChild)); _buffer.WriteString(packIdsChild); }
        }

        protected override void DecodeImpl(sul.Utils.Buffer _buffer)
        {
            //status = _buffer.ReadUbyte();
            //packIds.DecodeBody(_buffer);
        }

        public static ResourcePackClientResponse FromBuffer(byte[] buffer)
        {
            var ret = new ResourcePackClientResponse();
            ret.Decode(buffer);
            return ret;
        }

    }

    public class Text : sul.Utils.Packet
    {

        public const byte Id = 10;

        public const bool Clientbound = true;
        public const bool Serverbound = true;

        public byte type;

        public Text() : this(0) {}

        public Text(byte type)
        {
            this.type = type;
        }

        public override int GetId()
        {
            return (int)Id;
        }

        protected override void EncodeId(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteUbyte(Id);
        }

        protected override void DecodeId(sul.Utils.Buffer _buffer)
        {
            //_buffer.ReadUbyte();
        }

        protected override void EncodeImpl(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteUbyte(type);
        }

        protected override void DecodeImpl(sul.Utils.Buffer _buffer)
        {
            //type = _buffer.ReadUbyte();
        }

        public static Text FromBuffer(byte[] buffer)
        {
            var ret = new Text();
            ret.Decode(buffer);
            return ret;
        }

    }

    public class SetTime : sul.Utils.Packet
    {

        public const byte Id = 11;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        public int time;
        public bool daylightCycle;

        public SetTime() : this(0, false) {}

        public SetTime(int time, bool daylightCycle)
        {
            this.time = time;
            this.daylightCycle = daylightCycle;
        }

        public override int GetId()
        {
            return (int)Id;
        }

        protected override void EncodeId(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteUbyte(Id);
        }

        protected override void DecodeId(sul.Utils.Buffer _buffer)
        {
            //_buffer.ReadUbyte();
        }

        protected override void EncodeImpl(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteVarint(time);
            _buffer.WriteBool(daylightCycle);
        }

        protected override void DecodeImpl(sul.Utils.Buffer _buffer)
        {
            //time = _buffer.ReadVarint();
            //daylightCycle = _buffer.ReadBool();
        }

        public static SetTime FromBuffer(byte[] buffer)
        {
            var ret = new SetTime();
            ret.Decode(buffer);
            return ret;
        }

    }

    public class StartGame : sul.Utils.Packet
    {

        public const byte Id = 12;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        // dimension
        public const int OVERWORLD = 0;
        public const int NETHER = 1;
        public const int END = 2;

        // generator
        public const int OLD = 0;
        public const int INFINITE = 1;
        public const int FLAT = 2;

        // world gamemode
        public const int SURVIVAL = 0;
        public const int CREATIVE = 1;

        // difficulty
        public const int PEACEFUL = 0;
        public const int EASY = 1;
        public const int NORMAL = 2;
        public const int HARD = 3;

        // edition
        public const byte CLASSIC = 0;
        public const byte EDUCATION = 1;

        public long entityId;
        public long runtimeId;
        public System.Tuple<float, float, float> position;
        public float yaw;
        public float pitch;
        public int seed;
        public int dimension;
        public int generator;
        public int worldGamemode;
        public int difficulty;
        public System.Tuple<int, int, int> spawnPosition;
        public bool loadedInCreative;
        public int time;
        public byte edition;
        public float rainLevel;
        public float lightingLevel;
        public bool commandsEnabled;
        public bool textureRequired;
        public string levelId;
        public string worldName;

        public StartGame() : this(0, 0, null, 0, 0, 0, 0, 1, 0, 0, null, false, 0, 0, 0, 0, false, false, "", "") {}

        public StartGame(long entityId, long runtimeId, System.Tuple<float, float, float> position, float yaw, float pitch, int seed, int dimension, int generator, int worldGamemode, int difficulty, System.Tuple<int, int, int> spawnPosition, bool loadedInCreative, int time, byte edition, float rainLevel, float lightingLevel, bool commandsEnabled, bool textureRequired, string levelId, string worldName)
        {
            this.entityId = entityId;
            this.runtimeId = runtimeId;
            this.position = position;
            this.yaw = yaw;
            this.pitch = pitch;
            this.seed = seed;
            this.dimension = dimension;
            this.generator = generator;
            this.worldGamemode = worldGamemode;
            this.difficulty = difficulty;
            this.spawnPosition = spawnPosition;
            this.loadedInCreative = loadedInCreative;
            this.time = time;
            this.edition = edition;
            this.rainLevel = rainLevel;
            this.lightingLevel = lightingLevel;
            this.commandsEnabled = commandsEnabled;
            this.textureRequired = textureRequired;
            this.levelId = levelId;
            this.worldName = worldName;
        }

        public override int GetId()
        {
            return (int)Id;
        }

        protected override void EncodeId(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteUbyte(Id);
        }

        protected override void DecodeId(sul.Utils.Buffer _buffer)
        {
            //_buffer.ReadUbyte();
        }

        protected override void EncodeImpl(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteVarlong(entityId);
            _buffer.WriteVarlong(runtimeId);
            _buffer.WriteLittleEndianFloat(position.Item1); _buffer.WriteLittleEndianFloat(position.Item2); _buffer.WriteLittleEndianFloat(position.Item3);
            _buffer.WriteLittleEndianFloat(yaw);
            _buffer.WriteLittleEndianFloat(pitch);
            _buffer.WriteVarint(seed);
            _buffer.WriteVarint(dimension);
            _buffer.WriteVarint(generator);
            _buffer.WriteVarint(worldGamemode);
            _buffer.WriteVarint(difficulty);
            _buffer.WriteVarint(spawnPosition.Item1); _buffer.WriteVarint(spawnPosition.Item2); _buffer.WriteVarint(spawnPosition.Item3);
            _buffer.WriteBool(loadedInCreative);
            _buffer.WriteVarint(time);
            _buffer.WriteUbyte(edition);
            _buffer.WriteLittleEndianFloat(rainLevel);
            _buffer.WriteLittleEndianFloat(lightingLevel);
            _buffer.WriteBool(commandsEnabled);
            _buffer.WriteBool(textureRequired);
            _buffer.WriteVaruint(Encoding.UTF8.GetByteCount(levelId)); _buffer.WriteString(levelId);
            _buffer.WriteVaruint(Encoding.UTF8.GetByteCount(worldName)); _buffer.WriteString(worldName);
        }

        protected override void DecodeImpl(sul.Utils.Buffer _buffer)
        {
            //entityId = _buffer.ReadVarlong();
            //runtimeId = _buffer.ReadVarlong();
            //position.Item1 = _buffer.ReadLittleEndianFloat(); position.Item2 = _buffer.ReadLittleEndianFloat(); position.Item3 = _buffer.ReadLittleEndianFloat();
            //yaw = _buffer.ReadLittleEndianFloat();
            //pitch = _buffer.ReadLittleEndianFloat();
            //seed = _buffer.ReadVarint();
            //dimension = _buffer.ReadVarint();
            //generator = _buffer.ReadVarint();
            //worldGamemode = _buffer.ReadVarint();
            //difficulty = _buffer.ReadVarint();
            //spawnPosition.Item1 = _buffer.ReadVarint(); spawnPosition.Item2 = _buffer.ReadVarint(); spawnPosition.Item3 = _buffer.ReadVarint();
            //loadedInCreative = _buffer.ReadBool();
            //time = _buffer.ReadVarint();
            //edition = _buffer.ReadUbyte();
            //rainLevel = _buffer.ReadLittleEndianFloat();
            //lightingLevel = _buffer.ReadLittleEndianFloat();
            //commandsEnabled = _buffer.ReadBool();
            //textureRequired = _buffer.ReadBool();
            //levelId = _buffer.ReadString();
            //worldName = _buffer.ReadString();
        }

        public static StartGame FromBuffer(byte[] buffer)
        {
            var ret = new StartGame();
            ret.Decode(buffer);
            return ret;
        }

    }

    public class AddPlayer : sul.Utils.Packet
    {

        public const byte Id = 13;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        public System.Guid uuid;
        public string username;
        public long entityId;
        public long runtimeId;
        public System.Tuple<float, float, float> position;
        public System.Tuple<float, float, float> motion;
        public float pitch;
        public float headYaw;
        public float yaw;
        public Slot heldItem;
        public Metadata metadata;

        public AddPlayer() : this(System.Guid.Empty, "", 0, 0, null, null, 0, 0, 0, new Slot(), new Metadata()) {}

        public AddPlayer(System.Guid uuid, string username, long entityId, long runtimeId, System.Tuple<float, float, float> position, System.Tuple<float, float, float> motion, float pitch, float headYaw, float yaw, Slot heldItem, Metadata metadata)
        {
            this.uuid = uuid;
            this.username = username;
            this.entityId = entityId;
            this.runtimeId = runtimeId;
            this.position = position;
            this.motion = motion;
            this.pitch = pitch;
            this.headYaw = headYaw;
            this.yaw = yaw;
            this.heldItem = heldItem;
            this.metadata = metadata;
        }

        public override int GetId()
        {
            return (int)Id;
        }

        protected override void EncodeId(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteUbyte(Id);
        }

        protected override void DecodeId(sul.Utils.Buffer _buffer)
        {
            //_buffer.ReadUbyte();
        }

        protected override void EncodeImpl(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteUuid(uuid);
            _buffer.WriteVaruint(Encoding.UTF8.GetByteCount(username)); _buffer.WriteString(username);
            _buffer.WriteVarlong(entityId);
            _buffer.WriteVarlong(runtimeId);
            _buffer.WriteLittleEndianFloat(position.Item1); _buffer.WriteLittleEndianFloat(position.Item2); _buffer.WriteLittleEndianFloat(position.Item3);
            _buffer.WriteLittleEndianFloat(motion.Item1); _buffer.WriteLittleEndianFloat(motion.Item2); _buffer.WriteLittleEndianFloat(motion.Item3);
            _buffer.WriteLittleEndianFloat(pitch);
            _buffer.WriteLittleEndianFloat(headYaw);
            _buffer.WriteLittleEndianFloat(yaw);
            heldItem.EncodeBody(_buffer);
            metadata.EncodeBody(_buffer);
        }

        protected override void DecodeImpl(sul.Utils.Buffer _buffer)
        {
            //uuid = _buffer.ReadUuid();
            //username = _buffer.ReadString();
            //entityId = _buffer.ReadVarlong();
            //runtimeId = _buffer.ReadVarlong();
            //position.Item1 = _buffer.ReadLittleEndianFloat(); position.Item2 = _buffer.ReadLittleEndianFloat(); position.Item3 = _buffer.ReadLittleEndianFloat();
            //motion.Item1 = _buffer.ReadLittleEndianFloat(); motion.Item2 = _buffer.ReadLittleEndianFloat(); motion.Item3 = _buffer.ReadLittleEndianFloat();
            //pitch = _buffer.ReadLittleEndianFloat();
            //headYaw = _buffer.ReadLittleEndianFloat();
            //yaw = _buffer.ReadLittleEndianFloat();
            //heldItem.DecodeBody(_buffer);
            //metadata.DecodeBody(_buffer);
        }

        public static AddPlayer FromBuffer(byte[] buffer)
        {
            var ret = new AddPlayer();
            ret.Decode(buffer);
            return ret;
        }

    }

    public class AddEntity : sul.Utils.Packet
    {

        public const byte Id = 14;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        public long entityId;
        public long runtimeId;
        public uint type;
        public System.Tuple<float, float, float> position;
        public System.Tuple<float, float, float> motion;
        public float pitch;
        public float yaw;
        public Attribute[] attributes;
        public Metadata metadata;
        public Link[] links;

        public AddEntity() : this(0, 0, 0, null, null, 0, 0, new Attribute[]{}, new Metadata(), new Link[]{}) {}

        public AddEntity(long entityId, long runtimeId, uint type, System.Tuple<float, float, float> position, System.Tuple<float, float, float> motion, float pitch, float yaw, Attribute[] attributes, Metadata metadata, Link[] links)
        {
            this.entityId = entityId;
            this.runtimeId = runtimeId;
            this.type = type;
            this.position = position;
            this.motion = motion;
            this.pitch = pitch;
            this.yaw = yaw;
            this.attributes = attributes;
            this.metadata = metadata;
            this.links = links;
        }

        public override int GetId()
        {
            return (int)Id;
        }

        protected override void EncodeId(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteUbyte(Id);
        }

        protected override void DecodeId(sul.Utils.Buffer _buffer)
        {
            //_buffer.ReadUbyte();
        }

        protected override void EncodeImpl(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteVarlong(entityId);
            _buffer.WriteVarlong(runtimeId);
            _buffer.WriteVaruint(type);
            _buffer.WriteLittleEndianFloat(position.Item1); _buffer.WriteLittleEndianFloat(position.Item2); _buffer.WriteLittleEndianFloat(position.Item3);
            _buffer.WriteLittleEndianFloat(motion.Item1); _buffer.WriteLittleEndianFloat(motion.Item2); _buffer.WriteLittleEndianFloat(motion.Item3);
            _buffer.WriteLittleEndianFloat(pitch);
            _buffer.WriteLittleEndianFloat(yaw);
            _buffer.WriteVaruint(attributes.Length); foreach (Attribute attributesChild in attributes){ attributesChild.EncodeBody(_buffer); }
            metadata.EncodeBody(_buffer);
            _buffer.WriteVaruint(links.Length); foreach (Link linksChild in links){ linksChild.EncodeBody(_buffer); }
        }

        protected override void DecodeImpl(sul.Utils.Buffer _buffer)
        {
            //entityId = _buffer.ReadVarlong();
            //runtimeId = _buffer.ReadVarlong();
            //type = _buffer.ReadVaruint();
            //position.Item1 = _buffer.ReadLittleEndianFloat(); position.Item2 = _buffer.ReadLittleEndianFloat(); position.Item3 = _buffer.ReadLittleEndianFloat();
            //motion.Item1 = _buffer.ReadLittleEndianFloat(); motion.Item2 = _buffer.ReadLittleEndianFloat(); motion.Item3 = _buffer.ReadLittleEndianFloat();
            //pitch = _buffer.ReadLittleEndianFloat();
            //yaw = _buffer.ReadLittleEndianFloat();
            //attributes.DecodeBody(_buffer);
            //metadata.DecodeBody(_buffer);
            //links.DecodeBody(_buffer);
        }

        public static AddEntity FromBuffer(byte[] buffer)
        {
            var ret = new AddEntity();
            ret.Decode(buffer);
            return ret;
        }

    }

    public class RemoveEntity : sul.Utils.Packet
    {

        public const byte Id = 15;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        public long entityId;

        public RemoveEntity() : this(0) {}

        public RemoveEntity(long entityId)
        {
            this.entityId = entityId;
        }

        public override int GetId()
        {
            return (int)Id;
        }

        protected override void EncodeId(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteUbyte(Id);
        }

        protected override void DecodeId(sul.Utils.Buffer _buffer)
        {
            //_buffer.ReadUbyte();
        }

        protected override void EncodeImpl(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteVarlong(entityId);
        }

        protected override void DecodeImpl(sul.Utils.Buffer _buffer)
        {
            //entityId = _buffer.ReadVarlong();
        }

        public static RemoveEntity FromBuffer(byte[] buffer)
        {
            var ret = new RemoveEntity();
            ret.Decode(buffer);
            return ret;
        }

    }

    public class AddItemEntity : sul.Utils.Packet
    {

        public const byte Id = 16;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        public long entityId;
        public long runtimeId;
        public Slot item;
        public System.Tuple<float, float, float> position;
        public System.Tuple<float, float, float> motion;

        public AddItemEntity() : this(0, 0, new Slot(), null, null) {}

        public AddItemEntity(long entityId, long runtimeId, Slot item, System.Tuple<float, float, float> position, System.Tuple<float, float, float> motion)
        {
            this.entityId = entityId;
            this.runtimeId = runtimeId;
            this.item = item;
            this.position = position;
            this.motion = motion;
        }

        public override int GetId()
        {
            return (int)Id;
        }

        protected override void EncodeId(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteUbyte(Id);
        }

        protected override void DecodeId(sul.Utils.Buffer _buffer)
        {
            //_buffer.ReadUbyte();
        }

        protected override void EncodeImpl(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteVarlong(entityId);
            _buffer.WriteVarlong(runtimeId);
            item.EncodeBody(_buffer);
            _buffer.WriteLittleEndianFloat(position.Item1); _buffer.WriteLittleEndianFloat(position.Item2); _buffer.WriteLittleEndianFloat(position.Item3);
            _buffer.WriteLittleEndianFloat(motion.Item1); _buffer.WriteLittleEndianFloat(motion.Item2); _buffer.WriteLittleEndianFloat(motion.Item3);
        }

        protected override void DecodeImpl(sul.Utils.Buffer _buffer)
        {
            //entityId = _buffer.ReadVarlong();
            //runtimeId = _buffer.ReadVarlong();
            //item.DecodeBody(_buffer);
            //position.Item1 = _buffer.ReadLittleEndianFloat(); position.Item2 = _buffer.ReadLittleEndianFloat(); position.Item3 = _buffer.ReadLittleEndianFloat();
            //motion.Item1 = _buffer.ReadLittleEndianFloat(); motion.Item2 = _buffer.ReadLittleEndianFloat(); motion.Item3 = _buffer.ReadLittleEndianFloat();
        }

        public static AddItemEntity FromBuffer(byte[] buffer)
        {
            var ret = new AddItemEntity();
            ret.Decode(buffer);
            return ret;
        }

    }

    public class AddHangingEntity : sul.Utils.Packet
    {

        public const byte Id = 17;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        public long entityId;
        public long runtimeId;
        public BlockPosition position;
        public int unknown3;

        public AddHangingEntity() : this(0, 0, new BlockPosition(), 0) {}

        public AddHangingEntity(long entityId, long runtimeId, BlockPosition position, int unknown3)
        {
            this.entityId = entityId;
            this.runtimeId = runtimeId;
            this.position = position;
            this.unknown3 = unknown3;
        }

        public override int GetId()
        {
            return (int)Id;
        }

        protected override void EncodeId(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteUbyte(Id);
        }

        protected override void DecodeId(sul.Utils.Buffer _buffer)
        {
            //_buffer.ReadUbyte();
        }

        protected override void EncodeImpl(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteVarlong(entityId);
            _buffer.WriteVarlong(runtimeId);
            position.EncodeBody(_buffer);
            _buffer.WriteVarint(unknown3);
        }

        protected override void DecodeImpl(sul.Utils.Buffer _buffer)
        {
            //entityId = _buffer.ReadVarlong();
            //runtimeId = _buffer.ReadVarlong();
            //position.DecodeBody(_buffer);
            //unknown3 = _buffer.ReadVarint();
        }

        public static AddHangingEntity FromBuffer(byte[] buffer)
        {
            var ret = new AddHangingEntity();
            ret.Decode(buffer);
            return ret;
        }

    }

    public class TakeItemEntity : sul.Utils.Packet
    {

        public const byte Id = 18;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        public long collected;
        public long collector;

        public TakeItemEntity() : this(0, 0) {}

        public TakeItemEntity(long collected, long collector)
        {
            this.collected = collected;
            this.collector = collector;
        }

        public override int GetId()
        {
            return (int)Id;
        }

        protected override void EncodeId(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteUbyte(Id);
        }

        protected override void DecodeId(sul.Utils.Buffer _buffer)
        {
            //_buffer.ReadUbyte();
        }

        protected override void EncodeImpl(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteVarlong(collected);
            _buffer.WriteVarlong(collector);
        }

        protected override void DecodeImpl(sul.Utils.Buffer _buffer)
        {
            //collected = _buffer.ReadVarlong();
            //collector = _buffer.ReadVarlong();
        }

        public static TakeItemEntity FromBuffer(byte[] buffer)
        {
            var ret = new TakeItemEntity();
            ret.Decode(buffer);
            return ret;
        }

    }

    public class MoveEntity : sul.Utils.Packet
    {

        public const byte Id = 19;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        public long entityId;
        public System.Tuple<float, float, float> position;
        public byte pitch;
        public byte headYaw;
        public byte yaw;

        public MoveEntity() : this(0, null, 0, 0, 0) {}

        public MoveEntity(long entityId, System.Tuple<float, float, float> position, byte pitch, byte headYaw, byte yaw)
        {
            this.entityId = entityId;
            this.position = position;
            this.pitch = pitch;
            this.headYaw = headYaw;
            this.yaw = yaw;
        }

        public override int GetId()
        {
            return (int)Id;
        }

        protected override void EncodeId(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteUbyte(Id);
        }

        protected override void DecodeId(sul.Utils.Buffer _buffer)
        {
            //_buffer.ReadUbyte();
        }

        protected override void EncodeImpl(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteVarlong(entityId);
            _buffer.WriteLittleEndianFloat(position.Item1); _buffer.WriteLittleEndianFloat(position.Item2); _buffer.WriteLittleEndianFloat(position.Item3);
            _buffer.WriteUbyte(pitch);
            _buffer.WriteUbyte(headYaw);
            _buffer.WriteUbyte(yaw);
        }

        protected override void DecodeImpl(sul.Utils.Buffer _buffer)
        {
            //entityId = _buffer.ReadVarlong();
            //position.Item1 = _buffer.ReadLittleEndianFloat(); position.Item2 = _buffer.ReadLittleEndianFloat(); position.Item3 = _buffer.ReadLittleEndianFloat();
            //pitch = _buffer.ReadUbyte();
            //headYaw = _buffer.ReadUbyte();
            //yaw = _buffer.ReadUbyte();
        }

        public static MoveEntity FromBuffer(byte[] buffer)
        {
            var ret = new MoveEntity();
            ret.Decode(buffer);
            return ret;
        }

    }

    public class MovePlayer : sul.Utils.Packet
    {

        public const byte Id = 20;

        public const bool Clientbound = true;
        public const bool Serverbound = true;

        // animation
        public const byte FULL = 0;
        public const byte NONE = 1;
        public const byte ROTATION = 2;

        public long entityId;
        public System.Tuple<float, float, float> position;
        public float pitch;
        public float headYaw;
        public float yaw;
        public byte animation;
        public bool onGround;

        public MovePlayer() : this(0, null, 0, 0, 0, 0, false) {}

        public MovePlayer(long entityId, System.Tuple<float, float, float> position, float pitch, float headYaw, float yaw, byte animation, bool onGround)
        {
            this.entityId = entityId;
            this.position = position;
            this.pitch = pitch;
            this.headYaw = headYaw;
            this.yaw = yaw;
            this.animation = animation;
            this.onGround = onGround;
        }

        public override int GetId()
        {
            return (int)Id;
        }

        protected override void EncodeId(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteUbyte(Id);
        }

        protected override void DecodeId(sul.Utils.Buffer _buffer)
        {
            //_buffer.ReadUbyte();
        }

        protected override void EncodeImpl(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteVarlong(entityId);
            _buffer.WriteLittleEndianFloat(position.Item1); _buffer.WriteLittleEndianFloat(position.Item2); _buffer.WriteLittleEndianFloat(position.Item3);
            _buffer.WriteLittleEndianFloat(pitch);
            _buffer.WriteLittleEndianFloat(headYaw);
            _buffer.WriteLittleEndianFloat(yaw);
            _buffer.WriteUbyte(animation);
            _buffer.WriteBool(onGround);
        }

        protected override void DecodeImpl(sul.Utils.Buffer _buffer)
        {
            //entityId = _buffer.ReadVarlong();
            //position.Item1 = _buffer.ReadLittleEndianFloat(); position.Item2 = _buffer.ReadLittleEndianFloat(); position.Item3 = _buffer.ReadLittleEndianFloat();
            //pitch = _buffer.ReadLittleEndianFloat();
            //headYaw = _buffer.ReadLittleEndianFloat();
            //yaw = _buffer.ReadLittleEndianFloat();
            //animation = _buffer.ReadUbyte();
            //onGround = _buffer.ReadBool();
        }

        public static MovePlayer FromBuffer(byte[] buffer)
        {
            var ret = new MovePlayer();
            ret.Decode(buffer);
            return ret;
        }

    }

    public class RiderJump : sul.Utils.Packet
    {

        public const byte Id = 21;

        public const bool Clientbound = true;
        public const bool Serverbound = true;

        public long rider;

        public RiderJump() : this(0) {}

        public RiderJump(long rider)
        {
            this.rider = rider;
        }

        public override int GetId()
        {
            return (int)Id;
        }

        protected override void EncodeId(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteUbyte(Id);
        }

        protected override void DecodeId(sul.Utils.Buffer _buffer)
        {
            //_buffer.ReadUbyte();
        }

        protected override void EncodeImpl(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteVarlong(rider);
        }

        protected override void DecodeImpl(sul.Utils.Buffer _buffer)
        {
            //rider = _buffer.ReadVarlong();
        }

        public static RiderJump FromBuffer(byte[] buffer)
        {
            var ret = new RiderJump();
            ret.Decode(buffer);
            return ret;
        }

    }

    public class RemoveBlock : sul.Utils.Packet
    {

        public const byte Id = 22;

        public const bool Clientbound = false;
        public const bool Serverbound = true;

        public BlockPosition position;

        public RemoveBlock() : this(new BlockPosition()) {}

        public RemoveBlock(BlockPosition position)
        {
            this.position = position;
        }

        public override int GetId()
        {
            return (int)Id;
        }

        protected override void EncodeId(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteUbyte(Id);
        }

        protected override void DecodeId(sul.Utils.Buffer _buffer)
        {
            //_buffer.ReadUbyte();
        }

        protected override void EncodeImpl(sul.Utils.Buffer _buffer)
        {
            position.EncodeBody(_buffer);
        }

        protected override void DecodeImpl(sul.Utils.Buffer _buffer)
        {
            //position.DecodeBody(_buffer);
        }

        public static RemoveBlock FromBuffer(byte[] buffer)
        {
            var ret = new RemoveBlock();
            ret.Decode(buffer);
            return ret;
        }

    }

    public class UpdateBlock : sul.Utils.Packet
    {

        public const byte Id = 23;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        // flags and meta
        public const uint NEIGHBORS = 1;
        public const uint NETWORK = 2;
        public const uint NO_GRAPHIC = 4;
        public const uint PRIORITY = 8;

        public BlockPosition position;
        public uint block;
        public uint flagsAndMeta;

        public UpdateBlock() : this(new BlockPosition(), 0, 0) {}

        public UpdateBlock(BlockPosition position, uint block, uint flagsAndMeta)
        {
            this.position = position;
            this.block = block;
            this.flagsAndMeta = flagsAndMeta;
        }

        public override int GetId()
        {
            return (int)Id;
        }

        protected override void EncodeId(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteUbyte(Id);
        }

        protected override void DecodeId(sul.Utils.Buffer _buffer)
        {
            //_buffer.ReadUbyte();
        }

        protected override void EncodeImpl(sul.Utils.Buffer _buffer)
        {
            position.EncodeBody(_buffer);
            _buffer.WriteVaruint(block);
            _buffer.WriteVaruint(flagsAndMeta);
        }

        protected override void DecodeImpl(sul.Utils.Buffer _buffer)
        {
            //position.DecodeBody(_buffer);
            //block = _buffer.ReadVaruint();
            //flagsAndMeta = _buffer.ReadVaruint();
        }

        public static UpdateBlock FromBuffer(byte[] buffer)
        {
            var ret = new UpdateBlock();
            ret.Decode(buffer);
            return ret;
        }

    }

    public class AddPainting : sul.Utils.Packet
    {

        public const byte Id = 24;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        public long entityId;
        public long runtimeId;
        public BlockPosition position;
        public int direction;
        public string title;

        public AddPainting() : this(0, 0, new BlockPosition(), 0, "") {}

        public AddPainting(long entityId, long runtimeId, BlockPosition position, int direction, string title)
        {
            this.entityId = entityId;
            this.runtimeId = runtimeId;
            this.position = position;
            this.direction = direction;
            this.title = title;
        }

        public override int GetId()
        {
            return (int)Id;
        }

        protected override void EncodeId(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteUbyte(Id);
        }

        protected override void DecodeId(sul.Utils.Buffer _buffer)
        {
            //_buffer.ReadUbyte();
        }

        protected override void EncodeImpl(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteVarlong(entityId);
            _buffer.WriteVarlong(runtimeId);
            position.EncodeBody(_buffer);
            _buffer.WriteVarint(direction);
            _buffer.WriteVaruint(Encoding.UTF8.GetByteCount(title)); _buffer.WriteString(title);
        }

        protected override void DecodeImpl(sul.Utils.Buffer _buffer)
        {
            //entityId = _buffer.ReadVarlong();
            //runtimeId = _buffer.ReadVarlong();
            //position.DecodeBody(_buffer);
            //direction = _buffer.ReadVarint();
            //title = _buffer.ReadString();
        }

        public static AddPainting FromBuffer(byte[] buffer)
        {
            var ret = new AddPainting();
            ret.Decode(buffer);
            return ret;
        }

    }

    public class Explode : sul.Utils.Packet
    {

        public const byte Id = 25;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        public System.Tuple<float, float, float> position;
        public float radius;
        public BlockPosition[] destroyedBlocks;

        public Explode() : this(null, 0, new BlockPosition[]{}) {}

        public Explode(System.Tuple<float, float, float> position, float radius, BlockPosition[] destroyedBlocks)
        {
            this.position = position;
            this.radius = radius;
            this.destroyedBlocks = destroyedBlocks;
        }

        public override int GetId()
        {
            return (int)Id;
        }

        protected override void EncodeId(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteUbyte(Id);
        }

        protected override void DecodeId(sul.Utils.Buffer _buffer)
        {
            //_buffer.ReadUbyte();
        }

        protected override void EncodeImpl(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteLittleEndianFloat(position.Item1); _buffer.WriteLittleEndianFloat(position.Item2); _buffer.WriteLittleEndianFloat(position.Item3);
            _buffer.WriteLittleEndianFloat(radius);
            _buffer.WriteVaruint(destroyedBlocks.Length); foreach (BlockPosition destroyedBlocksChild in destroyedBlocks){ destroyedBlocksChild.EncodeBody(_buffer); }
        }

        protected override void DecodeImpl(sul.Utils.Buffer _buffer)
        {
            //position.Item1 = _buffer.ReadLittleEndianFloat(); position.Item2 = _buffer.ReadLittleEndianFloat(); position.Item3 = _buffer.ReadLittleEndianFloat();
            //radius = _buffer.ReadLittleEndianFloat();
            //destroyedBlocks.DecodeBody(_buffer);
        }

        public static Explode FromBuffer(byte[] buffer)
        {
            var ret = new Explode();
            ret.Decode(buffer);
            return ret;
        }

    }

    public class LevelSoundEvent : sul.Utils.Packet
    {

        public const byte Id = 26;

        public const bool Clientbound = true;
        public const bool Serverbound = true;

        // sound
        public const byte ITEM_USE_ON = 0;
        public const byte HIT = 1;
        public const byte STEP = 2;
        public const byte JUMP = 3;
        public const byte BREAK = 4;
        public const byte PLACE = 5;
        public const byte HEAVY_STEP = 6;
        public const byte GALLOP = 7;
        public const byte FALL = 8;
        public const byte AMBIENT = 9;
        public const byte AMBIENT_BABY = 10;
        public const byte AMBIENT_IN_WATER = 11;
        public const byte BREATHE = 12;
        public const byte DEATH = 13;
        public const byte DEATH_IN_WATER = 14;
        public const byte DEATH_TO_ZOMBIE = 15;
        public const byte HURT = 16;
        public const byte HURT_IN_WATER = 17;
        public const byte MAD = 18;
        public const byte BOOST = 19;
        public const byte BOW = 20;
        public const byte SQUISH_BIG = 21;
        public const byte SQUISH_SMALL = 22;
        public const byte FALL_BIG = 23;
        public const byte FALL_SMALL = 24;
        public const byte SPLASH = 25;
        public const byte FIZZ = 26;
        public const byte FLAP = 27;
        public const byte SWIM = 28;
        public const byte DRINK = 29;
        public const byte EAT = 30;
        public const byte TAKEOFF = 31;
        public const byte SHAKE = 32;
        public const byte PLOP = 33;
        public const byte LAND = 34;
        public const byte SADDLE = 35;
        public const byte ARMOR = 36;
        public const byte ADD_CHEST = 37;
        public const byte THROW = 38;
        public const byte ATTACK = 39;
        public const byte ATTACK_NODAMAGE = 40;
        public const byte WARN = 41;
        public const byte SHEAR = 42;
        public const byte MILK = 43;
        public const byte THUNDER = 44;
        public const byte EXPLODE = 45;
        public const byte FIRE = 46;
        public const byte IGNITE = 47;
        public const byte FUSE = 48;
        public const byte STARE = 49;
        public const byte SPAWN = 50;
        public const byte SHOOT = 51;
        public const byte BREAK_BLOCK = 52;
        public const byte REMEDY = 53;
        public const byte UNFECT = 54;
        public const byte LEVELUP = 55;
        public const byte BOW_HIT = 56;
        public const byte BULLET_HIT = 57;
        public const byte EXTINGUISH_FIRE = 58;
        public const byte ITEM_FIZZ = 59;
        public const byte CHEST_OPEN = 60;
        public const byte CHEST_CLOSED = 61;
        public const byte POWER_ON = 62;
        public const byte POWER_OFF = 63;
        public const byte ATTACH = 64;
        public const byte DETACH = 65;
        public const byte DENY = 66;
        public const byte TRIPOD = 67;
        public const byte POP = 68;
        public const byte DROP_SLOT = 69;
        public const byte NOTE = 70;
        public const byte THORNS = 71;
        public const byte PISTON_IN = 72;
        public const byte PISTON_OUT = 73;
        public const byte PORTAL = 74;
        public const byte WATER = 75;
        public const byte LAVA_POP = 76;
        public const byte LAVA = 77;
        public const byte BURP = 78;
        public const byte BUCKET_FILL_WATER = 79;
        public const byte BUCKET_FILL_LAVA = 80;
        public const byte BUCKET_EMPTY_WATER = 81;
        public const byte BUCKET_EMPTY_LAVA = 82;
        public const byte GUARDIAN_FLOP = 83;
        public const byte ELDERGUARDIAN_CURSE = 84;
        public const byte MOB_WARNING = 85;
        public const byte MOB_WARNING_BABY = 86;
        public const byte TELEPORT = 87;
        public const byte SHULKER_OPEN = 88;
        public const byte SHULKER_CLOSE = 89;
        public const byte DEFAULT = 90;
        public const byte UNDEFINED = 91;

        public byte sound;
        public System.Tuple<float, float, float> position;
        public uint volume;
        public int pitch;
        public bool unknown4;

        public LevelSoundEvent() : this(0, null, 0, 0, false) {}

        public LevelSoundEvent(byte sound, System.Tuple<float, float, float> position, uint volume, int pitch, bool unknown4)
        {
            this.sound = sound;
            this.position = position;
            this.volume = volume;
            this.pitch = pitch;
            this.unknown4 = unknown4;
        }

        public override int GetId()
        {
            return (int)Id;
        }

        protected override void EncodeId(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteUbyte(Id);
        }

        protected override void DecodeId(sul.Utils.Buffer _buffer)
        {
            //_buffer.ReadUbyte();
        }

        protected override void EncodeImpl(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteUbyte(sound);
            _buffer.WriteLittleEndianFloat(position.Item1); _buffer.WriteLittleEndianFloat(position.Item2); _buffer.WriteLittleEndianFloat(position.Item3);
            _buffer.WriteVaruint(volume);
            _buffer.WriteVarint(pitch);
            _buffer.WriteBool(unknown4);
        }

        protected override void DecodeImpl(sul.Utils.Buffer _buffer)
        {
            //sound = _buffer.ReadUbyte();
            //position.Item1 = _buffer.ReadLittleEndianFloat(); position.Item2 = _buffer.ReadLittleEndianFloat(); position.Item3 = _buffer.ReadLittleEndianFloat();
            //volume = _buffer.ReadVaruint();
            //pitch = _buffer.ReadVarint();
            //unknown4 = _buffer.ReadBool();
        }

        public static LevelSoundEvent FromBuffer(byte[] buffer)
        {
            var ret = new LevelSoundEvent();
            ret.Decode(buffer);
            return ret;
        }

    }

    public class LevelEvent : sul.Utils.Packet
    {

        public const byte Id = 27;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        // event id
        public const int START_RAIN = 3001;
        public const int START_THUNDER = 3002;
        public const int STOP_RAIN = 3003;
        public const int STOP_THUNDER = 3004;
        public const int SET_DATA = 4000;
        public const int PLAYERS_SLEEPING = 9800;
        public const int BUBBLE = 16385;
        public const int CRITICAL = 16386;
        public const int BLOCK_FORCE_FIELD = 16387;
        public const int SMOKE = 16388;
        public const int EXPLODE = 16389;
        public const int EVAPORATION = 16390;
        public const int FLAME = 16391;
        public const int LAVA = 16392;
        public const int LARGE_SMOKE = 16393;
        public const int REDSTONE = 16394;
        public const int RISING_RED_DUST = 16395;
        public const int ITEM_BREAK = 16396;
        public const int SNOWBALL_POOF = 16397;
        public const int HUGE_EXPLODE = 16398;
        public const int HUGE_EXPLODE_SEED = 16399;
        public const int MOB_FLAME = 16400;
        public const int HEART = 16401;
        public const int TERRAIN = 16402;
        public const int TOWN_AURA = 16403;
        public const int PORTAL = 16404;
        public const int WATER_SPLASH = 16405;
        public const int WATER_WAKE = 16406;
        public const int DRIP_WATER = 16407;
        public const int DRIP_LAVA = 16408;
        public const int FALLING_DUST = 16409;
        public const int MOB_SPELL = 16410;
        public const int MOB_SPELL_AMBIENT = 16411;
        public const int MOB_SPELL_INSTANTANEOUS = 16412;
        public const int INK = 16413;
        public const int SLIME = 16414;
        public const int RAIN_SPLASH = 16415;
        public const int VILLAGER_ANGRY = 16416;
        public const int VILLAGER_HAPPY = 16417;
        public const int ENCHANTMENT_TABLE = 16418;
        public const int TRACKING_EMITTER = 16419;
        public const int NOTE = 16420;
        public const int WITCH_SPELL = 16421;
        public const int CARROT = 16422;
        public const int END_ROD = 16424;
        public const int DRAGON_BREATH = 16425;
        public const int SHOOT = 2000;
        public const int DESTROY = 2001;

        public int eventId;
        public System.Tuple<float, float, float> position;
        public int data;

        public LevelEvent() : this(0, null, 0) {}

        public LevelEvent(int eventId, System.Tuple<float, float, float> position, int data)
        {
            this.eventId = eventId;
            this.position = position;
            this.data = data;
        }

        public override int GetId()
        {
            return (int)Id;
        }

        protected override void EncodeId(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteUbyte(Id);
        }

        protected override void DecodeId(sul.Utils.Buffer _buffer)
        {
            //_buffer.ReadUbyte();
        }

        protected override void EncodeImpl(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteVarint(eventId);
            _buffer.WriteLittleEndianFloat(position.Item1); _buffer.WriteLittleEndianFloat(position.Item2); _buffer.WriteLittleEndianFloat(position.Item3);
            _buffer.WriteVarint(data);
        }

        protected override void DecodeImpl(sul.Utils.Buffer _buffer)
        {
            //eventId = _buffer.ReadVarint();
            //position.Item1 = _buffer.ReadLittleEndianFloat(); position.Item2 = _buffer.ReadLittleEndianFloat(); position.Item3 = _buffer.ReadLittleEndianFloat();
            //data = _buffer.ReadVarint();
        }

        public static LevelEvent FromBuffer(byte[] buffer)
        {
            var ret = new LevelEvent();
            ret.Decode(buffer);
            return ret;
        }

    }

    public class BlockEvent : sul.Utils.Packet
    {

        public const byte Id = 28;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        public BlockPosition position;
        public int[] data;

        public BlockEvent() : this(new BlockPosition(), new int[2]) {}

        public BlockEvent(BlockPosition position, int[] data)
        {
            this.position = position;
            this.data = data;
        }

        public override int GetId()
        {
            return (int)Id;
        }

        protected override void EncodeId(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteUbyte(Id);
        }

        protected override void DecodeId(sul.Utils.Buffer _buffer)
        {
            //_buffer.ReadUbyte();
        }

        protected override void EncodeImpl(sul.Utils.Buffer _buffer)
        {
            position.EncodeBody(_buffer);
            foreach (int dataChild in data){ _buffer.WriteVarint(dataChild); }
        }

        protected override void DecodeImpl(sul.Utils.Buffer _buffer)
        {
            //position.DecodeBody(_buffer);
            //data.DecodeBody(_buffer);
        }

        public static BlockEvent FromBuffer(byte[] buffer)
        {
            var ret = new BlockEvent();
            ret.Decode(buffer);
            return ret;
        }

    }

    public class EntityEvent : sul.Utils.Packet
    {

        public const byte Id = 29;

        public const bool Clientbound = true;
        public const bool Serverbound = true;

        // event id
        public const byte HURT_ANIMATION = 2;
        public const byte DEATH_ANIMATION = 3;
        public const byte TAME_FAIL = 6;
        public const byte TAME_SUCCESS = 7;
        public const byte SHAKE_WET = 8;
        public const byte USE_ITEM = 9;
        public const byte EAT_GRASS_ANIMATION = 10;
        public const byte FISH_HOOK_BUBBLES = 11;
        public const byte FISH_HOOK_POSITION = 12;
        public const byte FISH_HOOK_HOOK = 13;
        public const byte FISH_HOOK_TEASE = 14;
        public const byte SQUID_INK_CLOUD = 15;
        public const byte AMBIENT_SOUND = 16;
        public const byte RESPAWN = 17;

        public long entityId;
        public byte eventId;
        public int unknown2;

        public EntityEvent() : this(0, 0, 0) {}

        public EntityEvent(long entityId, byte eventId, int unknown2)
        {
            this.entityId = entityId;
            this.eventId = eventId;
            this.unknown2 = unknown2;
        }

        public override int GetId()
        {
            return (int)Id;
        }

        protected override void EncodeId(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteUbyte(Id);
        }

        protected override void DecodeId(sul.Utils.Buffer _buffer)
        {
            //_buffer.ReadUbyte();
        }

        protected override void EncodeImpl(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteVarlong(entityId);
            _buffer.WriteUbyte(eventId);
            _buffer.WriteVarint(unknown2);
        }

        protected override void DecodeImpl(sul.Utils.Buffer _buffer)
        {
            //entityId = _buffer.ReadVarlong();
            //eventId = _buffer.ReadUbyte();
            //unknown2 = _buffer.ReadVarint();
        }

        public static EntityEvent FromBuffer(byte[] buffer)
        {
            var ret = new EntityEvent();
            ret.Decode(buffer);
            return ret;
        }

    }

    public class MobEffect : sul.Utils.Packet
    {

        public const byte Id = 30;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        // event id
        public const byte ADD = 1;
        public const byte MODIFY = 2;
        public const byte REMOVE = 3;

        public long entityId;
        public byte eventId;
        public int effect;
        public int amplifier;
        public bool particles;
        public int duration;

        public MobEffect() : this(0, 0, 0, 0, false, 0) {}

        public MobEffect(long entityId, byte eventId, int effect, int amplifier, bool particles, int duration)
        {
            this.entityId = entityId;
            this.eventId = eventId;
            this.effect = effect;
            this.amplifier = amplifier;
            this.particles = particles;
            this.duration = duration;
        }

        public override int GetId()
        {
            return (int)Id;
        }

        protected override void EncodeId(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteUbyte(Id);
        }

        protected override void DecodeId(sul.Utils.Buffer _buffer)
        {
            //_buffer.ReadUbyte();
        }

        protected override void EncodeImpl(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteVarlong(entityId);
            _buffer.WriteUbyte(eventId);
            _buffer.WriteVarint(effect);
            _buffer.WriteVarint(amplifier);
            _buffer.WriteBool(particles);
            _buffer.WriteVarint(duration);
        }

        protected override void DecodeImpl(sul.Utils.Buffer _buffer)
        {
            //entityId = _buffer.ReadVarlong();
            //eventId = _buffer.ReadUbyte();
            //effect = _buffer.ReadVarint();
            //amplifier = _buffer.ReadVarint();
            //particles = _buffer.ReadBool();
            //duration = _buffer.ReadVarint();
        }

        public static MobEffect FromBuffer(byte[] buffer)
        {
            var ret = new MobEffect();
            ret.Decode(buffer);
            return ret;
        }

    }

    public class UpdateAttributes : sul.Utils.Packet
    {

        public const byte Id = 31;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        public long entityId;
        public Attribute[] attributes;

        public UpdateAttributes() : this(0, new Attribute[]{}) {}

        public UpdateAttributes(long entityId, Attribute[] attributes)
        {
            this.entityId = entityId;
            this.attributes = attributes;
        }

        public override int GetId()
        {
            return (int)Id;
        }

        protected override void EncodeId(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteUbyte(Id);
        }

        protected override void DecodeId(sul.Utils.Buffer _buffer)
        {
            //_buffer.ReadUbyte();
        }

        protected override void EncodeImpl(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteVarlong(entityId);
            _buffer.WriteVaruint(attributes.Length); foreach (Attribute attributesChild in attributes){ attributesChild.EncodeBody(_buffer); }
        }

        protected override void DecodeImpl(sul.Utils.Buffer _buffer)
        {
            //entityId = _buffer.ReadVarlong();
            //attributes.DecodeBody(_buffer);
        }

        public static UpdateAttributes FromBuffer(byte[] buffer)
        {
            var ret = new UpdateAttributes();
            ret.Decode(buffer);
            return ret;
        }

    }

    public class MobEquipment : sul.Utils.Packet
    {

        public const byte Id = 32;

        public const bool Clientbound = true;
        public const bool Serverbound = true;

        public long entityId;
        public Slot item;
        public byte inventorySlot;
        public byte hotbarSlot;
        public byte unknown4;

        public MobEquipment() : this(0, new Slot(), 0, 0, 0) {}

        public MobEquipment(long entityId, Slot item, byte inventorySlot, byte hotbarSlot, byte unknown4)
        {
            this.entityId = entityId;
            this.item = item;
            this.inventorySlot = inventorySlot;
            this.hotbarSlot = hotbarSlot;
            this.unknown4 = unknown4;
        }

        public override int GetId()
        {
            return (int)Id;
        }

        protected override void EncodeId(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteUbyte(Id);
        }

        protected override void DecodeId(sul.Utils.Buffer _buffer)
        {
            //_buffer.ReadUbyte();
        }

        protected override void EncodeImpl(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteVarlong(entityId);
            item.EncodeBody(_buffer);
            _buffer.WriteUbyte(inventorySlot);
            _buffer.WriteUbyte(hotbarSlot);
            _buffer.WriteUbyte(unknown4);
        }

        protected override void DecodeImpl(sul.Utils.Buffer _buffer)
        {
            //entityId = _buffer.ReadVarlong();
            //item.DecodeBody(_buffer);
            //inventorySlot = _buffer.ReadUbyte();
            //hotbarSlot = _buffer.ReadUbyte();
            //unknown4 = _buffer.ReadUbyte();
        }

        public static MobEquipment FromBuffer(byte[] buffer)
        {
            var ret = new MobEquipment();
            ret.Decode(buffer);
            return ret;
        }

    }

    public class MobArmorEquipment : sul.Utils.Packet
    {

        public const byte Id = 33;

        public const bool Clientbound = true;
        public const bool Serverbound = true;

        public long entityId;
        public Slot[] armor;

        public MobArmorEquipment() : this(0, new Slot[4]) {}

        public MobArmorEquipment(long entityId, Slot[] armor)
        {
            this.entityId = entityId;
            this.armor = armor;
        }

        public override int GetId()
        {
            return (int)Id;
        }

        protected override void EncodeId(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteUbyte(Id);
        }

        protected override void DecodeId(sul.Utils.Buffer _buffer)
        {
            //_buffer.ReadUbyte();
        }

        protected override void EncodeImpl(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteVarlong(entityId);
            foreach (Slot armorChild in armor){ armorChild.EncodeBody(_buffer); }
        }

        protected override void DecodeImpl(sul.Utils.Buffer _buffer)
        {
            //entityId = _buffer.ReadVarlong();
            //armor.DecodeBody(_buffer);
        }

        public static MobArmorEquipment FromBuffer(byte[] buffer)
        {
            var ret = new MobArmorEquipment();
            ret.Decode(buffer);
            return ret;
        }

    }

    public class Interact : sul.Utils.Packet
    {

        public const byte Id = 34;

        public const bool Clientbound = false;
        public const bool Serverbound = true;

        // action
        public const byte ATTACK = 1;
        public const byte INTERACT = 2;
        public const byte LEAVE_VEHICLE = 3;
        public const byte HOVER = 4;

        public byte action;
        public long target;

        public Interact() : this(0, 0) {}

        public Interact(byte action, long target)
        {
            this.action = action;
            this.target = target;
        }

        public override int GetId()
        {
            return (int)Id;
        }

        protected override void EncodeId(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteUbyte(Id);
        }

        protected override void DecodeId(sul.Utils.Buffer _buffer)
        {
            //_buffer.ReadUbyte();
        }

        protected override void EncodeImpl(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteUbyte(action);
            _buffer.WriteVarlong(target);
        }

        protected override void DecodeImpl(sul.Utils.Buffer _buffer)
        {
            //action = _buffer.ReadUbyte();
            //target = _buffer.ReadVarlong();
        }

        public static Interact FromBuffer(byte[] buffer)
        {
            var ret = new Interact();
            ret.Decode(buffer);
            return ret;
        }

    }

    public class UseItem : sul.Utils.Packet
    {

        public const byte Id = 35;

        public const bool Clientbound = false;
        public const bool Serverbound = true;

        public BlockPosition blockPosition;
        public uint hotbarSlot;
        public int face;
        public System.Tuple<float, float, float> facePosition;
        public System.Tuple<float, float, float> position;
        public int slot;
        public Slot item;

        public UseItem() : this(new BlockPosition(), 0, 0, null, null, 0, new Slot()) {}

        public UseItem(BlockPosition blockPosition, uint hotbarSlot, int face, System.Tuple<float, float, float> facePosition, System.Tuple<float, float, float> position, int slot, Slot item)
        {
            this.blockPosition = blockPosition;
            this.hotbarSlot = hotbarSlot;
            this.face = face;
            this.facePosition = facePosition;
            this.position = position;
            this.slot = slot;
            this.item = item;
        }

        public override int GetId()
        {
            return (int)Id;
        }

        protected override void EncodeId(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteUbyte(Id);
        }

        protected override void DecodeId(sul.Utils.Buffer _buffer)
        {
            //_buffer.ReadUbyte();
        }

        protected override void EncodeImpl(sul.Utils.Buffer _buffer)
        {
            blockPosition.EncodeBody(_buffer);
            _buffer.WriteVaruint(hotbarSlot);
            _buffer.WriteVarint(face);
            _buffer.WriteLittleEndianFloat(facePosition.Item1); _buffer.WriteLittleEndianFloat(facePosition.Item2); _buffer.WriteLittleEndianFloat(facePosition.Item3);
            _buffer.WriteLittleEndianFloat(position.Item1); _buffer.WriteLittleEndianFloat(position.Item2); _buffer.WriteLittleEndianFloat(position.Item3);
            _buffer.WriteVarint(slot);
            item.EncodeBody(_buffer);
        }

        protected override void DecodeImpl(sul.Utils.Buffer _buffer)
        {
            //blockPosition.DecodeBody(_buffer);
            //hotbarSlot = _buffer.ReadVaruint();
            //face = _buffer.ReadVarint();
            //facePosition.Item1 = _buffer.ReadLittleEndianFloat(); facePosition.Item2 = _buffer.ReadLittleEndianFloat(); facePosition.Item3 = _buffer.ReadLittleEndianFloat();
            //position.Item1 = _buffer.ReadLittleEndianFloat(); position.Item2 = _buffer.ReadLittleEndianFloat(); position.Item3 = _buffer.ReadLittleEndianFloat();
            //slot = _buffer.ReadVarint();
            //item.DecodeBody(_buffer);
        }

        public static UseItem FromBuffer(byte[] buffer)
        {
            var ret = new UseItem();
            ret.Decode(buffer);
            return ret;
        }

    }

    public class PlayerAction : sul.Utils.Packet
    {

        public const byte Id = 36;

        public const bool Clientbound = false;
        public const bool Serverbound = true;

        // action
        public const int START_BREAK = 0;
        public const int ABORT_BREAK = 1;
        public const int STOP_BREAK = 2;
        public const int RELEASE_ITEM = 5;
        public const int STOP_SLEEPING = 6;
        public const int RESPAWN = 7;
        public const int JUMP = 8;
        public const int START_SPRINT = 9;
        public const int STOP_SPRINT = 10;
        public const int START_SNEAK = 11;
        public const int STOP_SNEAK = 12;
        public const int START_GLIDING = 15;
        public const int STOP_GLIDING = 16;

        public long entityId;
        public int action;
        public BlockPosition position;
        public int face;

        public PlayerAction() : this(0, 0, new BlockPosition(), 0) {}

        public PlayerAction(long entityId, int action, BlockPosition position, int face)
        {
            this.entityId = entityId;
            this.action = action;
            this.position = position;
            this.face = face;
        }

        public override int GetId()
        {
            return (int)Id;
        }

        protected override void EncodeId(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteUbyte(Id);
        }

        protected override void DecodeId(sul.Utils.Buffer _buffer)
        {
            //_buffer.ReadUbyte();
        }

        protected override void EncodeImpl(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteVarlong(entityId);
            _buffer.WriteVarint(action);
            position.EncodeBody(_buffer);
            _buffer.WriteVarint(face);
        }

        protected override void DecodeImpl(sul.Utils.Buffer _buffer)
        {
            //entityId = _buffer.ReadVarlong();
            //action = _buffer.ReadVarint();
            //position.DecodeBody(_buffer);
            //face = _buffer.ReadVarint();
        }

        public static PlayerAction FromBuffer(byte[] buffer)
        {
            var ret = new PlayerAction();
            ret.Decode(buffer);
            return ret;
        }

    }

    public class PlayerFall : sul.Utils.Packet
    {

        public const byte Id = 37;

        public const bool Clientbound = false;
        public const bool Serverbound = true;

        public float distance;

        public PlayerFall() : this(0) {}

        public PlayerFall(float distance)
        {
            this.distance = distance;
        }

        public override int GetId()
        {
            return (int)Id;
        }

        protected override void EncodeId(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteUbyte(Id);
        }

        protected override void DecodeId(sul.Utils.Buffer _buffer)
        {
            //_buffer.ReadUbyte();
        }

        protected override void EncodeImpl(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteLittleEndianFloat(distance);
        }

        protected override void DecodeImpl(sul.Utils.Buffer _buffer)
        {
            //distance = _buffer.ReadLittleEndianFloat();
        }

        public static PlayerFall FromBuffer(byte[] buffer)
        {
            var ret = new PlayerFall();
            ret.Decode(buffer);
            return ret;
        }

    }

    public class HurtArmor : sul.Utils.Packet
    {

        public const byte Id = 38;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        public int unknown0;

        public HurtArmor() : this(0) {}

        public HurtArmor(int unknown0)
        {
            this.unknown0 = unknown0;
        }

        public override int GetId()
        {
            return (int)Id;
        }

        protected override void EncodeId(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteUbyte(Id);
        }

        protected override void DecodeId(sul.Utils.Buffer _buffer)
        {
            //_buffer.ReadUbyte();
        }

        protected override void EncodeImpl(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteVarint(unknown0);
        }

        protected override void DecodeImpl(sul.Utils.Buffer _buffer)
        {
            //unknown0 = _buffer.ReadVarint();
        }

        public static HurtArmor FromBuffer(byte[] buffer)
        {
            var ret = new HurtArmor();
            ret.Decode(buffer);
            return ret;
        }

    }

    public class SetEntityData : sul.Utils.Packet
    {

        public const byte Id = 39;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        public long entityId;
        public Metadata metadata;

        public SetEntityData() : this(0, new Metadata()) {}

        public SetEntityData(long entityId, Metadata metadata)
        {
            this.entityId = entityId;
            this.metadata = metadata;
        }

        public override int GetId()
        {
            return (int)Id;
        }

        protected override void EncodeId(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteUbyte(Id);
        }

        protected override void DecodeId(sul.Utils.Buffer _buffer)
        {
            //_buffer.ReadUbyte();
        }

        protected override void EncodeImpl(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteVarlong(entityId);
            metadata.EncodeBody(_buffer);
        }

        protected override void DecodeImpl(sul.Utils.Buffer _buffer)
        {
            //entityId = _buffer.ReadVarlong();
            //metadata.DecodeBody(_buffer);
        }

        public static SetEntityData FromBuffer(byte[] buffer)
        {
            var ret = new SetEntityData();
            ret.Decode(buffer);
            return ret;
        }

    }

    public class SetEntityMotion : sul.Utils.Packet
    {

        public const byte Id = 40;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        public long entityId;
        public System.Tuple<float, float, float> motion;

        public SetEntityMotion() : this(0, null) {}

        public SetEntityMotion(long entityId, System.Tuple<float, float, float> motion)
        {
            this.entityId = entityId;
            this.motion = motion;
        }

        public override int GetId()
        {
            return (int)Id;
        }

        protected override void EncodeId(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteUbyte(Id);
        }

        protected override void DecodeId(sul.Utils.Buffer _buffer)
        {
            //_buffer.ReadUbyte();
        }

        protected override void EncodeImpl(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteVarlong(entityId);
            _buffer.WriteLittleEndianFloat(motion.Item1); _buffer.WriteLittleEndianFloat(motion.Item2); _buffer.WriteLittleEndianFloat(motion.Item3);
        }

        protected override void DecodeImpl(sul.Utils.Buffer _buffer)
        {
            //entityId = _buffer.ReadVarlong();
            //motion.Item1 = _buffer.ReadLittleEndianFloat(); motion.Item2 = _buffer.ReadLittleEndianFloat(); motion.Item3 = _buffer.ReadLittleEndianFloat();
        }

        public static SetEntityMotion FromBuffer(byte[] buffer)
        {
            var ret = new SetEntityMotion();
            ret.Decode(buffer);
            return ret;
        }

    }

    public class SetEntityLink : sul.Utils.Packet
    {

        public const byte Id = 41;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        // action
        public const byte ADD = 0;
        public const byte RIDE = 1;
        public const byte REMOVE = 2;

        public long from;
        public long to;
        public byte action;

        public SetEntityLink() : this(0, 0, 0) {}

        public SetEntityLink(long from, long to, byte action)
        {
            this.from = from;
            this.to = to;
            this.action = action;
        }

        public override int GetId()
        {
            return (int)Id;
        }

        protected override void EncodeId(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteUbyte(Id);
        }

        protected override void DecodeId(sul.Utils.Buffer _buffer)
        {
            //_buffer.ReadUbyte();
        }

        protected override void EncodeImpl(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteVarlong(from);
            _buffer.WriteVarlong(to);
            _buffer.WriteUbyte(action);
        }

        protected override void DecodeImpl(sul.Utils.Buffer _buffer)
        {
            //from = _buffer.ReadVarlong();
            //to = _buffer.ReadVarlong();
            //action = _buffer.ReadUbyte();
        }

        public static SetEntityLink FromBuffer(byte[] buffer)
        {
            var ret = new SetEntityLink();
            ret.Decode(buffer);
            return ret;
        }

    }

    public class SetHealth : sul.Utils.Packet
    {

        public const byte Id = 42;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        public int health;

        public SetHealth() : this(0) {}

        public SetHealth(int health)
        {
            this.health = health;
        }

        public override int GetId()
        {
            return (int)Id;
        }

        protected override void EncodeId(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteUbyte(Id);
        }

        protected override void DecodeId(sul.Utils.Buffer _buffer)
        {
            //_buffer.ReadUbyte();
        }

        protected override void EncodeImpl(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteVarint(health);
        }

        protected override void DecodeImpl(sul.Utils.Buffer _buffer)
        {
            //health = _buffer.ReadVarint();
        }

        public static SetHealth FromBuffer(byte[] buffer)
        {
            var ret = new SetHealth();
            ret.Decode(buffer);
            return ret;
        }

    }

    public class SetSpawnPosition : sul.Utils.Packet
    {

        public const byte Id = 43;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        public int unknown0;
        public BlockPosition position;
        public bool unknown2;

        public SetSpawnPosition() : this(0, new BlockPosition(), false) {}

        public SetSpawnPosition(int unknown0, BlockPosition position, bool unknown2)
        {
            this.unknown0 = unknown0;
            this.position = position;
            this.unknown2 = unknown2;
        }

        public override int GetId()
        {
            return (int)Id;
        }

        protected override void EncodeId(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteUbyte(Id);
        }

        protected override void DecodeId(sul.Utils.Buffer _buffer)
        {
            //_buffer.ReadUbyte();
        }

        protected override void EncodeImpl(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteVarint(unknown0);
            position.EncodeBody(_buffer);
            _buffer.WriteBool(unknown2);
        }

        protected override void DecodeImpl(sul.Utils.Buffer _buffer)
        {
            //unknown0 = _buffer.ReadVarint();
            //position.DecodeBody(_buffer);
            //unknown2 = _buffer.ReadBool();
        }

        public static SetSpawnPosition FromBuffer(byte[] buffer)
        {
            var ret = new SetSpawnPosition();
            ret.Decode(buffer);
            return ret;
        }

    }

    public class Animate : sul.Utils.Packet
    {

        public const byte Id = 44;

        public const bool Clientbound = true;
        public const bool Serverbound = true;

        // action
        public const int BREAKING = 1;
        public const int WAKE_UP = 3;

        public int action;
        public long entityId;

        public Animate() : this(0, 0) {}

        public Animate(int action, long entityId)
        {
            this.action = action;
            this.entityId = entityId;
        }

        public override int GetId()
        {
            return (int)Id;
        }

        protected override void EncodeId(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteUbyte(Id);
        }

        protected override void DecodeId(sul.Utils.Buffer _buffer)
        {
            //_buffer.ReadUbyte();
        }

        protected override void EncodeImpl(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteVarint(action);
            _buffer.WriteVarlong(entityId);
        }

        protected override void DecodeImpl(sul.Utils.Buffer _buffer)
        {
            //action = _buffer.ReadVarint();
            //entityId = _buffer.ReadVarlong();
        }

        public static Animate FromBuffer(byte[] buffer)
        {
            var ret = new Animate();
            ret.Decode(buffer);
            return ret;
        }

    }

    public class Respawn : sul.Utils.Packet
    {

        public const byte Id = 45;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        public System.Tuple<float, float, float> position;

        public Respawn() : this(null) {}

        public Respawn(System.Tuple<float, float, float> position)
        {
            this.position = position;
        }

        public override int GetId()
        {
            return (int)Id;
        }

        protected override void EncodeId(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteUbyte(Id);
        }

        protected override void DecodeId(sul.Utils.Buffer _buffer)
        {
            //_buffer.ReadUbyte();
        }

        protected override void EncodeImpl(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteLittleEndianFloat(position.Item1); _buffer.WriteLittleEndianFloat(position.Item2); _buffer.WriteLittleEndianFloat(position.Item3);
        }

        protected override void DecodeImpl(sul.Utils.Buffer _buffer)
        {
            //position.Item1 = _buffer.ReadLittleEndianFloat(); position.Item2 = _buffer.ReadLittleEndianFloat(); position.Item3 = _buffer.ReadLittleEndianFloat();
        }

        public static Respawn FromBuffer(byte[] buffer)
        {
            var ret = new Respawn();
            ret.Decode(buffer);
            return ret;
        }

    }

    public class DropItem : sul.Utils.Packet
    {

        public const byte Id = 46;

        public const bool Clientbound = false;
        public const bool Serverbound = true;

        // action
        public const byte DROP = 0;

        public byte action;
        public Slot item;

        public DropItem() : this(0, new Slot()) {}

        public DropItem(byte action, Slot item)
        {
            this.action = action;
            this.item = item;
        }

        public override int GetId()
        {
            return (int)Id;
        }

        protected override void EncodeId(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteUbyte(Id);
        }

        protected override void DecodeId(sul.Utils.Buffer _buffer)
        {
            //_buffer.ReadUbyte();
        }

        protected override void EncodeImpl(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteUbyte(action);
            item.EncodeBody(_buffer);
        }

        protected override void DecodeImpl(sul.Utils.Buffer _buffer)
        {
            //action = _buffer.ReadUbyte();
            //item.DecodeBody(_buffer);
        }

        public static DropItem FromBuffer(byte[] buffer)
        {
            var ret = new DropItem();
            ret.Decode(buffer);
            return ret;
        }

    }

    public class InventoryAction : sul.Utils.Packet
    {

        public const byte Id = 47;

        public const bool Clientbound = false;
        public const bool Serverbound = true;

        public int action;
        public Slot item;

        public InventoryAction() : this(0, new Slot()) {}

        public InventoryAction(int action, Slot item)
        {
            this.action = action;
            this.item = item;
        }

        public override int GetId()
        {
            return (int)Id;
        }

        protected override void EncodeId(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteUbyte(Id);
        }

        protected override void DecodeId(sul.Utils.Buffer _buffer)
        {
            //_buffer.ReadUbyte();
        }

        protected override void EncodeImpl(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteVarint(action);
            item.EncodeBody(_buffer);
        }

        protected override void DecodeImpl(sul.Utils.Buffer _buffer)
        {
            //action = _buffer.ReadVarint();
            //item.DecodeBody(_buffer);
        }

        public static InventoryAction FromBuffer(byte[] buffer)
        {
            var ret = new InventoryAction();
            ret.Decode(buffer);
            return ret;
        }

    }

    public class ContainerOpen : sul.Utils.Packet
    {

        public const byte Id = 48;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        public byte window;
        public byte type;
        public int slotCount;
        public BlockPosition position;
        public long entityId;

        public ContainerOpen() : this(0, 0, 0, new BlockPosition(), 0) {}

        public ContainerOpen(byte window, byte type, int slotCount, BlockPosition position, long entityId)
        {
            this.window = window;
            this.type = type;
            this.slotCount = slotCount;
            this.position = position;
            this.entityId = entityId;
        }

        public override int GetId()
        {
            return (int)Id;
        }

        protected override void EncodeId(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteUbyte(Id);
        }

        protected override void DecodeId(sul.Utils.Buffer _buffer)
        {
            //_buffer.ReadUbyte();
        }

        protected override void EncodeImpl(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteUbyte(window);
            _buffer.WriteUbyte(type);
            _buffer.WriteVarint(slotCount);
            position.EncodeBody(_buffer);
            _buffer.WriteVarlong(entityId);
        }

        protected override void DecodeImpl(sul.Utils.Buffer _buffer)
        {
            //window = _buffer.ReadUbyte();
            //type = _buffer.ReadUbyte();
            //slotCount = _buffer.ReadVarint();
            //position.DecodeBody(_buffer);
            //entityId = _buffer.ReadVarlong();
        }

        public static ContainerOpen FromBuffer(byte[] buffer)
        {
            var ret = new ContainerOpen();
            ret.Decode(buffer);
            return ret;
        }

    }

    public class ContainerClose : sul.Utils.Packet
    {

        public const byte Id = 49;

        public const bool Clientbound = true;
        public const bool Serverbound = true;

        public byte window;

        public ContainerClose() : this(0) {}

        public ContainerClose(byte window)
        {
            this.window = window;
        }

        public override int GetId()
        {
            return (int)Id;
        }

        protected override void EncodeId(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteUbyte(Id);
        }

        protected override void DecodeId(sul.Utils.Buffer _buffer)
        {
            //_buffer.ReadUbyte();
        }

        protected override void EncodeImpl(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteUbyte(window);
        }

        protected override void DecodeImpl(sul.Utils.Buffer _buffer)
        {
            //window = _buffer.ReadUbyte();
        }

        public static ContainerClose FromBuffer(byte[] buffer)
        {
            var ret = new ContainerClose();
            ret.Decode(buffer);
            return ret;
        }

    }

    public class ContainerSetSlot : sul.Utils.Packet
    {

        public const byte Id = 50;

        public const bool Clientbound = true;
        public const bool Serverbound = true;

        public byte window;
        public int slot;
        public int hotbarSlot;
        public Slot item;
        public byte unknown4;

        public ContainerSetSlot() : this(0, 0, 0, new Slot(), 0) {}

        public ContainerSetSlot(byte window, int slot, int hotbarSlot, Slot item, byte unknown4)
        {
            this.window = window;
            this.slot = slot;
            this.hotbarSlot = hotbarSlot;
            this.item = item;
            this.unknown4 = unknown4;
        }

        public override int GetId()
        {
            return (int)Id;
        }

        protected override void EncodeId(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteUbyte(Id);
        }

        protected override void DecodeId(sul.Utils.Buffer _buffer)
        {
            //_buffer.ReadUbyte();
        }

        protected override void EncodeImpl(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteUbyte(window);
            _buffer.WriteVarint(slot);
            _buffer.WriteVarint(hotbarSlot);
            item.EncodeBody(_buffer);
            _buffer.WriteUbyte(unknown4);
        }

        protected override void DecodeImpl(sul.Utils.Buffer _buffer)
        {
            //window = _buffer.ReadUbyte();
            //slot = _buffer.ReadVarint();
            //hotbarSlot = _buffer.ReadVarint();
            //item.DecodeBody(_buffer);
            //unknown4 = _buffer.ReadUbyte();
        }

        public static ContainerSetSlot FromBuffer(byte[] buffer)
        {
            var ret = new ContainerSetSlot();
            ret.Decode(buffer);
            return ret;
        }

    }

    public class ContainerSetData : sul.Utils.Packet
    {

        public const byte Id = 51;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        public byte window;
        public int property;
        public int @value;

        public ContainerSetData() : this(0, 0, 0) {}

        public ContainerSetData(byte window, int property, int @value)
        {
            this.window = window;
            this.property = property;
            this.@value = @value;
        }

        public override int GetId()
        {
            return (int)Id;
        }

        protected override void EncodeId(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteUbyte(Id);
        }

        protected override void DecodeId(sul.Utils.Buffer _buffer)
        {
            //_buffer.ReadUbyte();
        }

        protected override void EncodeImpl(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteUbyte(window);
            _buffer.WriteVarint(property);
            _buffer.WriteVarint(@value);
        }

        protected override void DecodeImpl(sul.Utils.Buffer _buffer)
        {
            //window = _buffer.ReadUbyte();
            //property = _buffer.ReadVarint();
            //@value = _buffer.ReadVarint();
        }

        public static ContainerSetData FromBuffer(byte[] buffer)
        {
            var ret = new ContainerSetData();
            ret.Decode(buffer);
            return ret;
        }

    }

    public class ContainerSetContent : sul.Utils.Packet
    {

        public const byte Id = 52;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        public byte window;
        public Slot[] slots;
        public int[] hotbar;

        public ContainerSetContent() : this(0, new Slot[]{}, new int[]{}) {}

        public ContainerSetContent(byte window, Slot[] slots, int[] hotbar)
        {
            this.window = window;
            this.slots = slots;
            this.hotbar = hotbar;
        }

        public override int GetId()
        {
            return (int)Id;
        }

        protected override void EncodeId(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteUbyte(Id);
        }

        protected override void DecodeId(sul.Utils.Buffer _buffer)
        {
            //_buffer.ReadUbyte();
        }

        protected override void EncodeImpl(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteUbyte(window);
            _buffer.WriteVaruint(slots.Length); foreach (Slot slotsChild in slots){ slotsChild.EncodeBody(_buffer); }
            _buffer.WriteVaruint(hotbar.Length); foreach (int hotbarChild in hotbar){ _buffer.WriteVarint(hotbarChild); }
        }

        protected override void DecodeImpl(sul.Utils.Buffer _buffer)
        {
            //window = _buffer.ReadUbyte();
            //slots.DecodeBody(_buffer);
            //hotbar.DecodeBody(_buffer);
        }

        public static ContainerSetContent FromBuffer(byte[] buffer)
        {
            var ret = new ContainerSetContent();
            ret.Decode(buffer);
            return ret;
        }

    }

    public class CraftingData : sul.Utils.Packet
    {

        public const byte Id = 53;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        public Recipe[] recipes;

        public CraftingData() : this(new Recipe[]{}) {}

        public CraftingData(Recipe[] recipes)
        {
            this.recipes = recipes;
        }

        public override int GetId()
        {
            return (int)Id;
        }

        protected override void EncodeId(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteUbyte(Id);
        }

        protected override void DecodeId(sul.Utils.Buffer _buffer)
        {
            //_buffer.ReadUbyte();
        }

        protected override void EncodeImpl(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteVaruint(recipes.Length); foreach (Recipe recipesChild in recipes){ recipesChild.EncodeBody(_buffer); }
        }

        protected override void DecodeImpl(sul.Utils.Buffer _buffer)
        {
            //recipes.DecodeBody(_buffer);
        }

        public static CraftingData FromBuffer(byte[] buffer)
        {
            var ret = new CraftingData();
            ret.Decode(buffer);
            return ret;
        }

    }

    public class CraftingEvent : sul.Utils.Packet
    {

        public const byte Id = 54;

        public const bool Clientbound = false;
        public const bool Serverbound = true;

        public byte window;
        public int type;
        public System.Guid uuid;
        public Slot[] input;
        public Slot[] output;

        public CraftingEvent() : this(0, 0, System.Guid.Empty, new Slot[]{}, new Slot[]{}) {}

        public CraftingEvent(byte window, int type, System.Guid uuid, Slot[] input, Slot[] output)
        {
            this.window = window;
            this.type = type;
            this.uuid = uuid;
            this.input = input;
            this.output = output;
        }

        public override int GetId()
        {
            return (int)Id;
        }

        protected override void EncodeId(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteUbyte(Id);
        }

        protected override void DecodeId(sul.Utils.Buffer _buffer)
        {
            //_buffer.ReadUbyte();
        }

        protected override void EncodeImpl(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteUbyte(window);
            _buffer.WriteVarint(type);
            _buffer.WriteUuid(uuid);
            _buffer.WriteVaruint(input.Length); foreach (Slot inputChild in input){ inputChild.EncodeBody(_buffer); }
            _buffer.WriteVaruint(output.Length); foreach (Slot outputChild in output){ outputChild.EncodeBody(_buffer); }
        }

        protected override void DecodeImpl(sul.Utils.Buffer _buffer)
        {
            //window = _buffer.ReadUbyte();
            //type = _buffer.ReadVarint();
            //uuid = _buffer.ReadUuid();
            //input.DecodeBody(_buffer);
            //output.DecodeBody(_buffer);
        }

        public static CraftingEvent FromBuffer(byte[] buffer)
        {
            var ret = new CraftingEvent();
            ret.Decode(buffer);
            return ret;
        }

    }

    public class AdventureSettings : sul.Utils.Packet
    {

        public const byte Id = 55;

        public const bool Clientbound = true;
        public const bool Serverbound = true;

        // flags
        public const uint IMMUTABLE_WORLD = 1;
        public const uint PVP_DISABLED = 2;
        public const uint PVM_DISABLED = 4;
        public const uint MVP_DISBALED = 8;
        public const uint EVP_DISABLED = 16;
        public const uint AUTO_JUMP = 32;
        public const uint ALLOW_FLIGHT = 64;
        public const uint NO_CLIP = 128;
        public const uint FLYING = 512;

        // permissions
        public const uint USER = 0;
        public const uint OPERATOR = 1;
        public const uint HOST = 2;
        public const uint AUTOMATION = 3;
        public const uint ADMIN = 4;

        public uint flags;
        public uint permissions;

        public AdventureSettings() : this(0, 0) {}

        public AdventureSettings(uint flags, uint permissions)
        {
            this.flags = flags;
            this.permissions = permissions;
        }

        public override int GetId()
        {
            return (int)Id;
        }

        protected override void EncodeId(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteUbyte(Id);
        }

        protected override void DecodeId(sul.Utils.Buffer _buffer)
        {
            //_buffer.ReadUbyte();
        }

        protected override void EncodeImpl(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteVaruint(flags);
            _buffer.WriteVaruint(permissions);
        }

        protected override void DecodeImpl(sul.Utils.Buffer _buffer)
        {
            //flags = _buffer.ReadVaruint();
            //permissions = _buffer.ReadVaruint();
        }

        public static AdventureSettings FromBuffer(byte[] buffer)
        {
            var ret = new AdventureSettings();
            ret.Decode(buffer);
            return ret;
        }

    }

    public class BlockEntityData : sul.Utils.Packet
    {

        public const byte Id = 56;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        public BlockPosition position;
        public byte[] nbt;

        public BlockEntityData() : this(new BlockPosition(), new byte[]{}) {}

        public BlockEntityData(BlockPosition position, byte[] nbt)
        {
            this.position = position;
            this.nbt = nbt;
        }

        public override int GetId()
        {
            return (int)Id;
        }

        protected override void EncodeId(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteUbyte(Id);
        }

        protected override void DecodeId(sul.Utils.Buffer _buffer)
        {
            //_buffer.ReadUbyte();
        }

        protected override void EncodeImpl(sul.Utils.Buffer _buffer)
        {
            position.EncodeBody(_buffer);
            _buffer.WriteBytes(nbt);
        }

        protected override void DecodeImpl(sul.Utils.Buffer _buffer)
        {
            //position.DecodeBody(_buffer);
            //nbt = _buffer.ReadBytes();
        }

        public static BlockEntityData FromBuffer(byte[] buffer)
        {
            var ret = new BlockEntityData();
            ret.Decode(buffer);
            return ret;
        }

    }

    public class PlayerInput : sul.Utils.Packet
    {

        public const byte Id = 57;

        public const bool Clientbound = false;
        public const bool Serverbound = true;

        public System.Tuple<float, float, float> motion;
        public byte flags;
        public bool unknown2;

        public PlayerInput() : this(null, 0, false) {}

        public PlayerInput(System.Tuple<float, float, float> motion, byte flags, bool unknown2)
        {
            this.motion = motion;
            this.flags = flags;
            this.unknown2 = unknown2;
        }

        public override int GetId()
        {
            return (int)Id;
        }

        protected override void EncodeId(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteUbyte(Id);
        }

        protected override void DecodeId(sul.Utils.Buffer _buffer)
        {
            //_buffer.ReadUbyte();
        }

        protected override void EncodeImpl(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteLittleEndianFloat(motion.Item1); _buffer.WriteLittleEndianFloat(motion.Item2); _buffer.WriteLittleEndianFloat(motion.Item3);
            _buffer.WriteUbyte(flags);
            _buffer.WriteBool(unknown2);
        }

        protected override void DecodeImpl(sul.Utils.Buffer _buffer)
        {
            //motion.Item1 = _buffer.ReadLittleEndianFloat(); motion.Item2 = _buffer.ReadLittleEndianFloat(); motion.Item3 = _buffer.ReadLittleEndianFloat();
            //flags = _buffer.ReadUbyte();
            //unknown2 = _buffer.ReadBool();
        }

        public static PlayerInput FromBuffer(byte[] buffer)
        {
            var ret = new PlayerInput();
            ret.Decode(buffer);
            return ret;
        }

    }

    public class FullChunkData : sul.Utils.Packet
    {

        public const byte Id = 58;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        public System.Tuple<int, int> position;
        public ChunkData data;

        public FullChunkData() : this(null, new ChunkData()) {}

        public FullChunkData(System.Tuple<int, int> position, ChunkData data)
        {
            this.position = position;
            this.data = data;
        }

        public override int GetId()
        {
            return (int)Id;
        }

        protected override void EncodeId(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteUbyte(Id);
        }

        protected override void DecodeId(sul.Utils.Buffer _buffer)
        {
            //_buffer.ReadUbyte();
        }

        protected override void EncodeImpl(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteVarint(position.Item1); _buffer.WriteVarint(position.Item2);
            data.EncodeBody(_buffer);
        }

        protected override void DecodeImpl(sul.Utils.Buffer _buffer)
        {
            //position.Item1 = _buffer.ReadVarint(); position.Item2 = _buffer.ReadVarint();
            //data.DecodeBody(_buffer);
        }

        public static FullChunkData FromBuffer(byte[] buffer)
        {
            var ret = new FullChunkData();
            ret.Decode(buffer);
            return ret;
        }

    }

    public class SetCommandsEnabled : sul.Utils.Packet
    {

        public const byte Id = 59;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        public bool enabled;

        public SetCommandsEnabled() : this(false) {}

        public SetCommandsEnabled(bool enabled)
        {
            this.enabled = enabled;
        }

        public override int GetId()
        {
            return (int)Id;
        }

        protected override void EncodeId(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteUbyte(Id);
        }

        protected override void DecodeId(sul.Utils.Buffer _buffer)
        {
            //_buffer.ReadUbyte();
        }

        protected override void EncodeImpl(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteBool(enabled);
        }

        protected override void DecodeImpl(sul.Utils.Buffer _buffer)
        {
            //enabled = _buffer.ReadBool();
        }

        public static SetCommandsEnabled FromBuffer(byte[] buffer)
        {
            var ret = new SetCommandsEnabled();
            ret.Decode(buffer);
            return ret;
        }

    }

    public class SetDifficulty : sul.Utils.Packet
    {

        public const byte Id = 60;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        // difficulty
        public const uint PEACEFUL = 0;
        public const uint EASY = 1;
        public const uint NORMAL = 2;
        public const uint HARD = 3;

        public uint difficulty;

        public SetDifficulty() : this(0) {}

        public SetDifficulty(uint difficulty)
        {
            this.difficulty = difficulty;
        }

        public override int GetId()
        {
            return (int)Id;
        }

        protected override void EncodeId(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteUbyte(Id);
        }

        protected override void DecodeId(sul.Utils.Buffer _buffer)
        {
            //_buffer.ReadUbyte();
        }

        protected override void EncodeImpl(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteVaruint(difficulty);
        }

        protected override void DecodeImpl(sul.Utils.Buffer _buffer)
        {
            //difficulty = _buffer.ReadVaruint();
        }

        public static SetDifficulty FromBuffer(byte[] buffer)
        {
            var ret = new SetDifficulty();
            ret.Decode(buffer);
            return ret;
        }

    }

    public class ChangeDimension : sul.Utils.Packet
    {

        public const byte Id = 61;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        // dimension
        public const int OVERWORLD = 0;
        public const int NETHER = 1;
        public const int END = 2;

        public int dimension;
        public System.Tuple<float, float, float> position;
        public bool unknown2;

        public ChangeDimension() : this(0, null, false) {}

        public ChangeDimension(int dimension, System.Tuple<float, float, float> position, bool unknown2)
        {
            this.dimension = dimension;
            this.position = position;
            this.unknown2 = unknown2;
        }

        public override int GetId()
        {
            return (int)Id;
        }

        protected override void EncodeId(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteUbyte(Id);
        }

        protected override void DecodeId(sul.Utils.Buffer _buffer)
        {
            //_buffer.ReadUbyte();
        }

        protected override void EncodeImpl(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteVarint(dimension);
            _buffer.WriteLittleEndianFloat(position.Item1); _buffer.WriteLittleEndianFloat(position.Item2); _buffer.WriteLittleEndianFloat(position.Item3);
            _buffer.WriteBool(unknown2);
        }

        protected override void DecodeImpl(sul.Utils.Buffer _buffer)
        {
            //dimension = _buffer.ReadVarint();
            //position.Item1 = _buffer.ReadLittleEndianFloat(); position.Item2 = _buffer.ReadLittleEndianFloat(); position.Item3 = _buffer.ReadLittleEndianFloat();
            //unknown2 = _buffer.ReadBool();
        }

        public static ChangeDimension FromBuffer(byte[] buffer)
        {
            var ret = new ChangeDimension();
            ret.Decode(buffer);
            return ret;
        }

    }

    public class SetPlayerGameType : sul.Utils.Packet
    {

        public const byte Id = 62;

        public const bool Clientbound = true;
        public const bool Serverbound = true;

        // gamemode
        public const int SURVIVAL = 0;
        public const int CREATIVE = 1;

        public int gamemode;

        public SetPlayerGameType() : this(0) {}

        public SetPlayerGameType(int gamemode)
        {
            this.gamemode = gamemode;
        }

        public override int GetId()
        {
            return (int)Id;
        }

        protected override void EncodeId(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteUbyte(Id);
        }

        protected override void DecodeId(sul.Utils.Buffer _buffer)
        {
            //_buffer.ReadUbyte();
        }

        protected override void EncodeImpl(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteVarint(gamemode);
        }

        protected override void DecodeImpl(sul.Utils.Buffer _buffer)
        {
            //gamemode = _buffer.ReadVarint();
        }

        public static SetPlayerGameType FromBuffer(byte[] buffer)
        {
            var ret = new SetPlayerGameType();
            ret.Decode(buffer);
            return ret;
        }

    }

    public class PlayerList : sul.Utils.Packet
    {

        public const byte Id = 63;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        public byte action;

        public PlayerList() : this(0) {}

        public PlayerList(byte action)
        {
            this.action = action;
        }

        public override int GetId()
        {
            return (int)Id;
        }

        protected override void EncodeId(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteUbyte(Id);
        }

        protected override void DecodeId(sul.Utils.Buffer _buffer)
        {
            //_buffer.ReadUbyte();
        }

        protected override void EncodeImpl(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteUbyte(action);
        }

        protected override void DecodeImpl(sul.Utils.Buffer _buffer)
        {
            //action = _buffer.ReadUbyte();
        }

        public static PlayerList FromBuffer(byte[] buffer)
        {
            var ret = new PlayerList();
            ret.Decode(buffer);
            return ret;
        }

    }

    public class TelemetryEvent : sul.Utils.Packet
    {

        public const byte Id = 64;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        public long entityId;
        public int eventId;

        public TelemetryEvent() : this(0, 0) {}

        public TelemetryEvent(long entityId, int eventId)
        {
            this.entityId = entityId;
            this.eventId = eventId;
        }

        public override int GetId()
        {
            return (int)Id;
        }

        protected override void EncodeId(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteUbyte(Id);
        }

        protected override void DecodeId(sul.Utils.Buffer _buffer)
        {
            //_buffer.ReadUbyte();
        }

        protected override void EncodeImpl(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteVarlong(entityId);
            _buffer.WriteVarint(eventId);
        }

        protected override void DecodeImpl(sul.Utils.Buffer _buffer)
        {
            //entityId = _buffer.ReadVarlong();
            //eventId = _buffer.ReadVarint();
        }

        public static TelemetryEvent FromBuffer(byte[] buffer)
        {
            var ret = new TelemetryEvent();
            ret.Decode(buffer);
            return ret;
        }

    }

    public class SpawnExperienceOrb : sul.Utils.Packet
    {

        public const byte Id = 65;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        public System.Tuple<float, float, float> position;
        public int count;

        public SpawnExperienceOrb() : this(null, 0) {}

        public SpawnExperienceOrb(System.Tuple<float, float, float> position, int count)
        {
            this.position = position;
            this.count = count;
        }

        public override int GetId()
        {
            return (int)Id;
        }

        protected override void EncodeId(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteUbyte(Id);
        }

        protected override void DecodeId(sul.Utils.Buffer _buffer)
        {
            //_buffer.ReadUbyte();
        }

        protected override void EncodeImpl(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteLittleEndianFloat(position.Item1); _buffer.WriteLittleEndianFloat(position.Item2); _buffer.WriteLittleEndianFloat(position.Item3);
            _buffer.WriteVarint(count);
        }

        protected override void DecodeImpl(sul.Utils.Buffer _buffer)
        {
            //position.Item1 = _buffer.ReadLittleEndianFloat(); position.Item2 = _buffer.ReadLittleEndianFloat(); position.Item3 = _buffer.ReadLittleEndianFloat();
            //count = _buffer.ReadVarint();
        }

        public static SpawnExperienceOrb FromBuffer(byte[] buffer)
        {
            var ret = new SpawnExperienceOrb();
            ret.Decode(buffer);
            return ret;
        }

    }

    public class ClientboundMapItemData : sul.Utils.Packet
    {

        public const byte Id = 66;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        // update
        public const uint TEXTURE = 2;
        public const uint DECORATIONS = 4;
        public const uint ENTITIES = 8;

        public long mapId;
        public uint update;
        public byte scale;
        public System.Tuple<int, int> size;
        public System.Tuple<int, int> offset;
        public byte[] data;
        public Decoration[] decorations;

        public ClientboundMapItemData() : this(0, 0, 0, null, null, new byte[]{}, new Decoration[]{}) {}

        public ClientboundMapItemData(long mapId, uint update, byte scale, System.Tuple<int, int> size, System.Tuple<int, int> offset, byte[] data, Decoration[] decorations)
        {
            this.mapId = mapId;
            this.update = update;
            this.scale = scale;
            this.size = size;
            this.offset = offset;
            this.data = data;
            this.decorations = decorations;
        }

        public override int GetId()
        {
            return (int)Id;
        }

        protected override void EncodeId(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteUbyte(Id);
        }

        protected override void DecodeId(sul.Utils.Buffer _buffer)
        {
            //_buffer.ReadUbyte();
        }

        protected override void EncodeImpl(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteVarlong(mapId);
            _buffer.WriteVaruint(update);
            if(update==2||update==4){ _buffer.WriteUbyte(scale); }
            if(update==2){ _buffer.WriteVarint(size.Item1); _buffer.WriteVarint(size.Item2); }
            if(update==2){ _buffer.WriteVarint(offset.Item1); _buffer.WriteVarint(offset.Item2); }
            if(update==2){ _buffer.WriteBytes(data); }
            if(update==4){ _buffer.WriteVaruint(decorations.Length); foreach (Decoration decorationsChild in decorations){ decorationsChild.EncodeBody(_buffer); } }
        }

        protected override void DecodeImpl(sul.Utils.Buffer _buffer)
        {
            //mapId = _buffer.ReadVarlong();
            //update = _buffer.ReadVaruint();
            //if(update==2||update==4){ scale = _buffer.ReadUbyte(); }
            //if(update==2){ size.Item1 = _buffer.ReadVarint(); size.Item2 = _buffer.ReadVarint(); }
            //if(update==2){ offset.Item1 = _buffer.ReadVarint(); offset.Item2 = _buffer.ReadVarint(); }
            //if(update==2){ data = _buffer.ReadBytes(); }
            //if(update==4){ decorations.DecodeBody(_buffer); }
        }

        public static ClientboundMapItemData FromBuffer(byte[] buffer)
        {
            var ret = new ClientboundMapItemData();
            ret.Decode(buffer);
            return ret;
        }

    }

    public class MapInfoRequest : sul.Utils.Packet
    {

        public const byte Id = 67;

        public const bool Clientbound = false;
        public const bool Serverbound = true;

        public long mapId;

        public MapInfoRequest() : this(0) {}

        public MapInfoRequest(long mapId)
        {
            this.mapId = mapId;
        }

        public override int GetId()
        {
            return (int)Id;
        }

        protected override void EncodeId(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteUbyte(Id);
        }

        protected override void DecodeId(sul.Utils.Buffer _buffer)
        {
            //_buffer.ReadUbyte();
        }

        protected override void EncodeImpl(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteVarlong(mapId);
        }

        protected override void DecodeImpl(sul.Utils.Buffer _buffer)
        {
            //mapId = _buffer.ReadVarlong();
        }

        public static MapInfoRequest FromBuffer(byte[] buffer)
        {
            var ret = new MapInfoRequest();
            ret.Decode(buffer);
            return ret;
        }

    }

    public class RequestChunkRadius : sul.Utils.Packet
    {

        public const byte Id = 68;

        public const bool Clientbound = false;
        public const bool Serverbound = true;

        public int radius;

        public RequestChunkRadius() : this(0) {}

        public RequestChunkRadius(int radius)
        {
            this.radius = radius;
        }

        public override int GetId()
        {
            return (int)Id;
        }

        protected override void EncodeId(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteUbyte(Id);
        }

        protected override void DecodeId(sul.Utils.Buffer _buffer)
        {
            //_buffer.ReadUbyte();
        }

        protected override void EncodeImpl(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteVarint(radius);
        }

        protected override void DecodeImpl(sul.Utils.Buffer _buffer)
        {
            //radius = _buffer.ReadVarint();
        }

        public static RequestChunkRadius FromBuffer(byte[] buffer)
        {
            var ret = new RequestChunkRadius();
            ret.Decode(buffer);
            return ret;
        }

    }

    public class ChunkRadiusUpdated : sul.Utils.Packet
    {

        public const byte Id = 69;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        public int radius;

        public ChunkRadiusUpdated() : this(0) {}

        public ChunkRadiusUpdated(int radius)
        {
            this.radius = radius;
        }

        public override int GetId()
        {
            return (int)Id;
        }

        protected override void EncodeId(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteUbyte(Id);
        }

        protected override void DecodeId(sul.Utils.Buffer _buffer)
        {
            //_buffer.ReadUbyte();
        }

        protected override void EncodeImpl(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteVarint(radius);
        }

        protected override void DecodeImpl(sul.Utils.Buffer _buffer)
        {
            //radius = _buffer.ReadVarint();
        }

        public static ChunkRadiusUpdated FromBuffer(byte[] buffer)
        {
            var ret = new ChunkRadiusUpdated();
            ret.Decode(buffer);
            return ret;
        }

    }

    public class ItemFrameDropItem : sul.Utils.Packet
    {

        public const byte Id = 70;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        public BlockPosition position;
        public Slot item;

        public ItemFrameDropItem() : this(new BlockPosition(), new Slot()) {}

        public ItemFrameDropItem(BlockPosition position, Slot item)
        {
            this.position = position;
            this.item = item;
        }

        public override int GetId()
        {
            return (int)Id;
        }

        protected override void EncodeId(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteUbyte(Id);
        }

        protected override void DecodeId(sul.Utils.Buffer _buffer)
        {
            //_buffer.ReadUbyte();
        }

        protected override void EncodeImpl(sul.Utils.Buffer _buffer)
        {
            position.EncodeBody(_buffer);
            item.EncodeBody(_buffer);
        }

        protected override void DecodeImpl(sul.Utils.Buffer _buffer)
        {
            //position.DecodeBody(_buffer);
            //item.DecodeBody(_buffer);
        }

        public static ItemFrameDropItem FromBuffer(byte[] buffer)
        {
            var ret = new ItemFrameDropItem();
            ret.Decode(buffer);
            return ret;
        }

    }

    public class ReplaceSelectedItem : sul.Utils.Packet
    {

        public const byte Id = 71;

        public const bool Clientbound = false;
        public const bool Serverbound = true;

        public Slot item;

        public ReplaceSelectedItem() : this(new Slot()) {}

        public ReplaceSelectedItem(Slot item)
        {
            this.item = item;
        }

        public override int GetId()
        {
            return (int)Id;
        }

        protected override void EncodeId(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteUbyte(Id);
        }

        protected override void DecodeId(sul.Utils.Buffer _buffer)
        {
            //_buffer.ReadUbyte();
        }

        protected override void EncodeImpl(sul.Utils.Buffer _buffer)
        {
            item.EncodeBody(_buffer);
        }

        protected override void DecodeImpl(sul.Utils.Buffer _buffer)
        {
            //item.DecodeBody(_buffer);
        }

        public static ReplaceSelectedItem FromBuffer(byte[] buffer)
        {
            var ret = new ReplaceSelectedItem();
            ret.Decode(buffer);
            return ret;
        }

    }

    public class GameRulesChanged : sul.Utils.Packet
    {

        public const byte Id = 72;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        public Rule[] rules;

        public GameRulesChanged() : this(new Rule[]{}) {}

        public GameRulesChanged(Rule[] rules)
        {
            this.rules = rules;
        }

        public override int GetId()
        {
            return (int)Id;
        }

        protected override void EncodeId(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteUbyte(Id);
        }

        protected override void DecodeId(sul.Utils.Buffer _buffer)
        {
            //_buffer.ReadUbyte();
        }

        protected override void EncodeImpl(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteBigEndianUint(rules.Length); foreach (Rule rulesChild in rules){ rulesChild.EncodeBody(_buffer); }
        }

        protected override void DecodeImpl(sul.Utils.Buffer _buffer)
        {
            //rules.DecodeBody(_buffer);
        }

        public static GameRulesChanged FromBuffer(byte[] buffer)
        {
            var ret = new GameRulesChanged();
            ret.Decode(buffer);
            return ret;
        }

    }

    public class Camera : sul.Utils.Packet
    {

        public const byte Id = 73;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        public long unknown0;
        public long unknown1;

        public Camera() : this(0, 0) {}

        public Camera(long unknown0, long unknown1)
        {
            this.unknown0 = unknown0;
            this.unknown1 = unknown1;
        }

        public override int GetId()
        {
            return (int)Id;
        }

        protected override void EncodeId(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteUbyte(Id);
        }

        protected override void DecodeId(sul.Utils.Buffer _buffer)
        {
            //_buffer.ReadUbyte();
        }

        protected override void EncodeImpl(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteVarlong(unknown0);
            _buffer.WriteVarlong(unknown1);
        }

        protected override void DecodeImpl(sul.Utils.Buffer _buffer)
        {
            //unknown0 = _buffer.ReadVarlong();
            //unknown1 = _buffer.ReadVarlong();
        }

        public static Camera FromBuffer(byte[] buffer)
        {
            var ret = new Camera();
            ret.Decode(buffer);
            return ret;
        }

    }

    public class AddItem : sul.Utils.Packet
    {

        public const byte Id = 74;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        public Slot item;

        public AddItem() : this(new Slot()) {}

        public AddItem(Slot item)
        {
            this.item = item;
        }

        public override int GetId()
        {
            return (int)Id;
        }

        protected override void EncodeId(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteUbyte(Id);
        }

        protected override void DecodeId(sul.Utils.Buffer _buffer)
        {
            //_buffer.ReadUbyte();
        }

        protected override void EncodeImpl(sul.Utils.Buffer _buffer)
        {
            item.EncodeBody(_buffer);
        }

        protected override void DecodeImpl(sul.Utils.Buffer _buffer)
        {
            //item.DecodeBody(_buffer);
        }

        public static AddItem FromBuffer(byte[] buffer)
        {
            var ret = new AddItem();
            ret.Decode(buffer);
            return ret;
        }

    }

    public class BossEvent : sul.Utils.Packet
    {

        public const byte Id = 75;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        // event id
        public const uint ADD = 0;
        public const uint UPDATE = 1;
        public const uint REMOVE = 2;

        public long entityId;
        public uint eventId;

        public BossEvent() : this(0, 0) {}

        public BossEvent(long entityId, uint eventId)
        {
            this.entityId = entityId;
            this.eventId = eventId;
        }

        public override int GetId()
        {
            return (int)Id;
        }

        protected override void EncodeId(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteUbyte(Id);
        }

        protected override void DecodeId(sul.Utils.Buffer _buffer)
        {
            //_buffer.ReadUbyte();
        }

        protected override void EncodeImpl(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteVarlong(entityId);
            _buffer.WriteVaruint(eventId);
        }

        protected override void DecodeImpl(sul.Utils.Buffer _buffer)
        {
            //entityId = _buffer.ReadVarlong();
            //eventId = _buffer.ReadVaruint();
        }

        public static BossEvent FromBuffer(byte[] buffer)
        {
            var ret = new BossEvent();
            ret.Decode(buffer);
            return ret;
        }

    }

    public class ShowCredits : sul.Utils.Packet
    {

        public const byte Id = 76;

        public const bool Clientbound = true;
        public const bool Serverbound = true;

        // status
        public const int START = 0;
        public const int END = 1;

        public long entityId;
        public int status;

        public ShowCredits() : this(0, 0) {}

        public ShowCredits(long entityId, int status)
        {
            this.entityId = entityId;
            this.status = status;
        }

        public override int GetId()
        {
            return (int)Id;
        }

        protected override void EncodeId(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteUbyte(Id);
        }

        protected override void DecodeId(sul.Utils.Buffer _buffer)
        {
            //_buffer.ReadUbyte();
        }

        protected override void EncodeImpl(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteVarlong(entityId);
            _buffer.WriteVarint(status);
        }

        protected override void DecodeImpl(sul.Utils.Buffer _buffer)
        {
            //entityId = _buffer.ReadVarlong();
            //status = _buffer.ReadVarint();
        }

        public static ShowCredits FromBuffer(byte[] buffer)
        {
            var ret = new ShowCredits();
            ret.Decode(buffer);
            return ret;
        }

    }

    public class AvailableCommands : sul.Utils.Packet
    {

        public const byte Id = 77;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        public string commands;
        public string unknown1;

        public AvailableCommands() : this("", "") {}

        public AvailableCommands(string commands, string unknown1)
        {
            this.commands = commands;
            this.unknown1 = unknown1;
        }

        public override int GetId()
        {
            return (int)Id;
        }

        protected override void EncodeId(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteUbyte(Id);
        }

        protected override void DecodeId(sul.Utils.Buffer _buffer)
        {
            //_buffer.ReadUbyte();
        }

        protected override void EncodeImpl(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteVaruint(Encoding.UTF8.GetByteCount(commands)); _buffer.WriteString(commands);
            _buffer.WriteVaruint(Encoding.UTF8.GetByteCount(unknown1)); _buffer.WriteString(unknown1);
        }

        protected override void DecodeImpl(sul.Utils.Buffer _buffer)
        {
            //commands = _buffer.ReadString();
            //unknown1 = _buffer.ReadString();
        }

        public static AvailableCommands FromBuffer(byte[] buffer)
        {
            var ret = new AvailableCommands();
            ret.Decode(buffer);
            return ret;
        }

    }

    public class CommandStep : sul.Utils.Packet
    {

        public const byte Id = 78;

        public const bool Clientbound = false;
        public const bool Serverbound = true;

        public string command;
        public string overload;
        public uint unknown2;
        public uint currentStep;
        public bool done;
        public ulong clientId;
        public string input;
        public string output;

        public CommandStep() : this("", "", 0, 0, false, 0, "", "") {}

        public CommandStep(string command, string overload, uint unknown2, uint currentStep, bool done, ulong clientId, string input, string output)
        {
            this.command = command;
            this.overload = overload;
            this.unknown2 = unknown2;
            this.currentStep = currentStep;
            this.done = done;
            this.clientId = clientId;
            this.input = input;
            this.output = output;
        }

        public override int GetId()
        {
            return (int)Id;
        }

        protected override void EncodeId(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteUbyte(Id);
        }

        protected override void DecodeId(sul.Utils.Buffer _buffer)
        {
            //_buffer.ReadUbyte();
        }

        protected override void EncodeImpl(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteVaruint(Encoding.UTF8.GetByteCount(command)); _buffer.WriteString(command);
            _buffer.WriteVaruint(Encoding.UTF8.GetByteCount(overload)); _buffer.WriteString(overload);
            _buffer.WriteVaruint(unknown2);
            _buffer.WriteVaruint(currentStep);
            _buffer.WriteBool(done);
            _buffer.WriteVarulong(clientId);
            _buffer.WriteVaruint(Encoding.UTF8.GetByteCount(input)); _buffer.WriteString(input);
            _buffer.WriteVaruint(Encoding.UTF8.GetByteCount(output)); _buffer.WriteString(output);
        }

        protected override void DecodeImpl(sul.Utils.Buffer _buffer)
        {
            //command = _buffer.ReadString();
            //overload = _buffer.ReadString();
            //unknown2 = _buffer.ReadVaruint();
            //currentStep = _buffer.ReadVaruint();
            //done = _buffer.ReadBool();
            //clientId = _buffer.ReadVarulong();
            //input = _buffer.ReadString();
            //output = _buffer.ReadString();
        }

        public static CommandStep FromBuffer(byte[] buffer)
        {
            var ret = new CommandStep();
            ret.Decode(buffer);
            return ret;
        }

    }

    public class ResourcePackDataInfo : sul.Utils.Packet
    {

        public const byte Id = 79;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        public string id;
        public uint maxChunkSize;
        public uint chunkCount;
        public ulong compressedPackSize;
        public string sha256;

        public ResourcePackDataInfo() : this("", 0, 0, 0, "") {}

        public ResourcePackDataInfo(string id, uint maxChunkSize, uint chunkCount, ulong compressedPackSize, string sha256)
        {
            this.id = id;
            this.maxChunkSize = maxChunkSize;
            this.chunkCount = chunkCount;
            this.compressedPackSize = compressedPackSize;
            this.sha256 = sha256;
        }

        public override int GetId()
        {
            return (int)Id;
        }

        protected override void EncodeId(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteUbyte(Id);
        }

        protected override void DecodeId(sul.Utils.Buffer _buffer)
        {
            //_buffer.ReadUbyte();
        }

        protected override void EncodeImpl(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteVaruint(Encoding.UTF8.GetByteCount(id)); _buffer.WriteString(id);
            _buffer.WriteLittleEndianUint(maxChunkSize);
            _buffer.WriteLittleEndianUint(chunkCount);
            _buffer.WriteLittleEndianUlong(compressedPackSize);
            _buffer.WriteVaruint(Encoding.UTF8.GetByteCount(sha256)); _buffer.WriteString(sha256);
        }

        protected override void DecodeImpl(sul.Utils.Buffer _buffer)
        {
            //id = _buffer.ReadString();
            //maxChunkSize = _buffer.ReadLittleEndianUint();
            //chunkCount = _buffer.ReadLittleEndianUint();
            //compressedPackSize = _buffer.ReadLittleEndianUlong();
            //sha256 = _buffer.ReadString();
        }

        public static ResourcePackDataInfo FromBuffer(byte[] buffer)
        {
            var ret = new ResourcePackDataInfo();
            ret.Decode(buffer);
            return ret;
        }

    }

    public class ResourcePackChunkData : sul.Utils.Packet
    {

        public const byte Id = 80;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        public string id;
        public uint chunkIndex;
        public ulong progress;
        public byte[] data;

        public ResourcePackChunkData() : this("", 0, 0, new byte[]{}) {}

        public ResourcePackChunkData(string id, uint chunkIndex, ulong progress, byte[] data)
        {
            this.id = id;
            this.chunkIndex = chunkIndex;
            this.progress = progress;
            this.data = data;
        }

        public override int GetId()
        {
            return (int)Id;
        }

        protected override void EncodeId(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteUbyte(Id);
        }

        protected override void DecodeId(sul.Utils.Buffer _buffer)
        {
            //_buffer.ReadUbyte();
        }

        protected override void EncodeImpl(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteVaruint(Encoding.UTF8.GetByteCount(id)); _buffer.WriteString(id);
            _buffer.WriteLittleEndianUint(chunkIndex);
            _buffer.WriteLittleEndianUlong(progress);
            _buffer.WriteVaruint(data.Length); _buffer.WriteBytes(data);
        }

        protected override void DecodeImpl(sul.Utils.Buffer _buffer)
        {
            //id = _buffer.ReadString();
            //chunkIndex = _buffer.ReadLittleEndianUint();
            //progress = _buffer.ReadLittleEndianUlong();
            //data.DecodeBody(_buffer);
        }

        public static ResourcePackChunkData FromBuffer(byte[] buffer)
        {
            var ret = new ResourcePackChunkData();
            ret.Decode(buffer);
            return ret;
        }

    }

    public class ResourcePackChunkRequest : sul.Utils.Packet
    {

        public const byte Id = 81;

        public const bool Clientbound = false;
        public const bool Serverbound = true;

        public string id;
        public uint chunkIndex;

        public ResourcePackChunkRequest() : this("", 0) {}

        public ResourcePackChunkRequest(string id, uint chunkIndex)
        {
            this.id = id;
            this.chunkIndex = chunkIndex;
        }

        public override int GetId()
        {
            return (int)Id;
        }

        protected override void EncodeId(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteUbyte(Id);
        }

        protected override void DecodeId(sul.Utils.Buffer _buffer)
        {
            //_buffer.ReadUbyte();
        }

        protected override void EncodeImpl(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteVaruint(Encoding.UTF8.GetByteCount(id)); _buffer.WriteString(id);
            _buffer.WriteLittleEndianUint(chunkIndex);
        }

        protected override void DecodeImpl(sul.Utils.Buffer _buffer)
        {
            //id = _buffer.ReadString();
            //chunkIndex = _buffer.ReadLittleEndianUint();
        }

        public static ResourcePackChunkRequest FromBuffer(byte[] buffer)
        {
            var ret = new ResourcePackChunkRequest();
            ret.Decode(buffer);
            return ret;
        }

    }

    public class Transfer : sul.Utils.Packet
    {

        public const byte Id = 82;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        public string ip;
        public ushort port;

        public Transfer() : this("", 19132) {}

        public Transfer(string ip, ushort port)
        {
            this.ip = ip;
            this.port = port;
        }

        public override int GetId()
        {
            return (int)Id;
        }

        protected override void EncodeId(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteUbyte(Id);
        }

        protected override void DecodeId(sul.Utils.Buffer _buffer)
        {
            //_buffer.ReadUbyte();
        }

        protected override void EncodeImpl(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteVaruint(Encoding.UTF8.GetByteCount(ip)); _buffer.WriteString(ip);
            _buffer.WriteLittleEndianUshort(port);
        }

        protected override void DecodeImpl(sul.Utils.Buffer _buffer)
        {
            //ip = _buffer.ReadString();
            //port = _buffer.ReadLittleEndianUshort();
        }

        public static Transfer FromBuffer(byte[] buffer)
        {
            var ret = new Transfer();
            ret.Decode(buffer);
            return ret;
        }

    }

}
