/*
 * This file was automatically generated by sel-utils and
 * released under the MIT License.
 * 
 * License: https://github.com/sel-project/sel-utils/blob/master/LICENSE
 * Repository: https://github.com/sel-project/sel-utils
 * Generated from https://github.com/sel-project/sel-utils/blob/master/xml/protocol/minecraft108.xml
 */
using Types = sul.Minecraft108.Types;

using Utils.Buffer;
using Utils.Packet;

namespace sul.Minecraft108.Clientbound
{

    public class SpawnObject : Packet
    {

        public const uint Id = 0;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        public uint entityId;
        public Guid uuid;
        public byte type;
        public Tuple<double, double, double> position;
        public byte pitch;
        public byte yaw;
        public int data;
        public Tuple<short, short, short> velocity;

        public SpawnObject() {}

        public SpawnObject(uint entityId, Guid uuid, byte type, Tuple<double, double, double> position, byte pitch, byte yaw, int data, Tuple<short, short, short> velocity)
        {
            this.entityId = entityId;
            this.uuid = uuid;
            this.type = type;
            this.position = position;
            this.pitch = pitch;
            this.yaw = yaw;
            this.data = data;
            this.velocity = velocity;
        }

        public override int GetId()
        {
            return Id;
        }

        protected override void EncodeId(Buffer _buffer)
        {
            _buffer.WriteVaruint(Id);
        }

        protected override void DecodeId(Buffer _buffer)
        {
            _buffer.ReadVaruint();
        }

        protected override void EncodeImpl(Buffer _buffer)
        {
            _buffer.WriteVaruint(entityId);
            _buffer.WriteUuid(uuid);
            _buffer.WriteUbyte(type);
            _buffer.WriteBigEndianDouble(position[0]); _buffer.WriteBigEndianDouble(position[1]); _buffer.WriteBigEndianDouble(position[2]);
            _buffer.WriteUbyte(pitch);
            _buffer.WriteUbyte(yaw);
            _buffer.WriteBigEndianInt(data);
            _buffer.WriteBigEndianShort(velocity[0]); _buffer.WriteBigEndianShort(velocity[1]); _buffer.WriteBigEndianShort(velocity[2]);
        }

        protected override void DecodeImpl(Buffer _buffer)
        {








        }

        public static SpawnObject FromBuffer(byte[] buffer)
        {
            var ret = new SpawnObject();
            ret.decode(buffer);
            return ret;
        }

    }

    public class SpawnExperienceOrb : Packet
    {

        public const uint Id = 1;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        public uint entityId;
        public Tuple<double, double, double> position;
        public ushort count;

        public SpawnExperienceOrb() {}

        public SpawnExperienceOrb(uint entityId, Tuple<double, double, double> position, ushort count)
        {
            this.entityId = entityId;
            this.position = position;
            this.count = count;
        }

        public override int GetId()
        {
            return Id;
        }

        protected override void EncodeId(Buffer _buffer)
        {
            _buffer.WriteVaruint(Id);
        }

        protected override void DecodeId(Buffer _buffer)
        {
            _buffer.ReadVaruint();
        }

        protected override void EncodeImpl(Buffer _buffer)
        {
            _buffer.WriteVaruint(entityId);
            _buffer.WriteBigEndianDouble(position[0]); _buffer.WriteBigEndianDouble(position[1]); _buffer.WriteBigEndianDouble(position[2]);
            _buffer.WriteBigEndianUshort(count);
        }

        protected override void DecodeImpl(Buffer _buffer)
        {



        }

        public static SpawnExperienceOrb FromBuffer(byte[] buffer)
        {
            var ret = new SpawnExperienceOrb();
            ret.decode(buffer);
            return ret;
        }

    }

    public class SpawnGlobalEntity : Packet
    {

        public const uint Id = 2;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        // type
        public const byte Thunderbolt = 1;

        public uint entityId;
        public byte type;
        public Tuple<double, double, double> position;

        public SpawnGlobalEntity() {}

        public SpawnGlobalEntity(uint entityId, byte type, Tuple<double, double, double> position)
        {
            this.entityId = entityId;
            this.type = type;
            this.position = position;
        }

        public override int GetId()
        {
            return Id;
        }

        protected override void EncodeId(Buffer _buffer)
        {
            _buffer.WriteVaruint(Id);
        }

        protected override void DecodeId(Buffer _buffer)
        {
            _buffer.ReadVaruint();
        }

        protected override void EncodeImpl(Buffer _buffer)
        {
            _buffer.WriteVaruint(entityId);
            _buffer.WriteUbyte(type);
            _buffer.WriteBigEndianDouble(position[0]); _buffer.WriteBigEndianDouble(position[1]); _buffer.WriteBigEndianDouble(position[2]);
        }

        protected override void DecodeImpl(Buffer _buffer)
        {



        }

        public static SpawnGlobalEntity FromBuffer(byte[] buffer)
        {
            var ret = new SpawnGlobalEntity();
            ret.decode(buffer);
            return ret;
        }

    }

    public class SpawnMob : Packet
    {

        public const uint Id = 3;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        public uint entityId;
        public Guid uuid;
        public byte type;
        public Tuple<double, double, double> position;
        public byte yaw;
        public byte pitch;
        public byte headPitch;
        public Tuple<short, short, short> velocity;
        public sul.Metadata.Minecraft108.Metadata metadata;

        public SpawnMob() {}

        public SpawnMob(uint entityId, Guid uuid, byte type, Tuple<double, double, double> position, byte yaw, byte pitch, byte headPitch, Tuple<short, short, short> velocity, sul.Metadata.Minecraft108.Metadata metadata)
        {
            this.entityId = entityId;
            this.uuid = uuid;
            this.type = type;
            this.position = position;
            this.yaw = yaw;
            this.pitch = pitch;
            this.headPitch = headPitch;
            this.velocity = velocity;
            this.metadata = metadata;
        }

        public override int GetId()
        {
            return Id;
        }

        protected override void EncodeId(Buffer _buffer)
        {
            _buffer.WriteVaruint(Id);
        }

        protected override void DecodeId(Buffer _buffer)
        {
            _buffer.ReadVaruint();
        }

        protected override void EncodeImpl(Buffer _buffer)
        {
            _buffer.WriteVaruint(entityId);
            _buffer.WriteUuid(uuid);
            _buffer.WriteUbyte(type);
            _buffer.WriteBigEndianDouble(position[0]); _buffer.WriteBigEndianDouble(position[1]); _buffer.WriteBigEndianDouble(position[2]);
            _buffer.WriteUbyte(yaw);
            _buffer.WriteUbyte(pitch);
            _buffer.WriteUbyte(headPitch);
            _buffer.WriteBigEndianShort(velocity[0]); _buffer.WriteBigEndianShort(velocity[1]); _buffer.WriteBigEndianShort(velocity[2]);
            metadata.EncodeBody(_buffer);
        }

        protected override void DecodeImpl(Buffer _buffer)
        {









        }

        public static SpawnMob FromBuffer(byte[] buffer)
        {
            var ret = new SpawnMob();
            ret.decode(buffer);
            return ret;
        }

    }

    public class SpawnPainting : Packet
    {

        public const uint Id = 4;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        // direction
        public const byte North = 0;
        public const byte West = 1;
        public const byte South = 2;
        public const byte East = 3;

        public uint entityId;
        public Guid uuid;
        public string title;
        public ulong position;
        public byte direction;

        public SpawnPainting() {}

        public SpawnPainting(uint entityId, Guid uuid, string title, ulong position, byte direction)
        {
            this.entityId = entityId;
            this.uuid = uuid;
            this.title = title;
            this.position = position;
            this.direction = direction;
        }

        public override int GetId()
        {
            return Id;
        }

        protected override void EncodeId(Buffer _buffer)
        {
            _buffer.WriteVaruint(Id);
        }

        protected override void DecodeId(Buffer _buffer)
        {
            _buffer.ReadVaruint();
        }

        protected override void EncodeImpl(Buffer _buffer)
        {
            _buffer.WriteVaruint(entityId);
            _buffer.WriteUuid(uuid);
            _buffer.WriteVaruint(Encoding.UTF8.GetByteCount(title)); _buffer.WriteString(title);
            _buffer.WriteBigEndianUlong(position);
            _buffer.WriteUbyte(direction);
        }

        protected override void DecodeImpl(Buffer _buffer)
        {





        }

        public static SpawnPainting FromBuffer(byte[] buffer)
        {
            var ret = new SpawnPainting();
            ret.decode(buffer);
            return ret;
        }

    }

    public class SpawnPlayer : Packet
    {

        public const uint Id = 5;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        public uint entityId;
        public Guid uuid;
        public Tuple<double, double, double> position;
        public byte yaw;
        public byte pitch;
        public sul.Metadata.Minecraft108.Metadata metadata;

        public SpawnPlayer() {}

        public SpawnPlayer(uint entityId, Guid uuid, Tuple<double, double, double> position, byte yaw, byte pitch, sul.Metadata.Minecraft108.Metadata metadata)
        {
            this.entityId = entityId;
            this.uuid = uuid;
            this.position = position;
            this.yaw = yaw;
            this.pitch = pitch;
            this.metadata = metadata;
        }

        public override int GetId()
        {
            return Id;
        }

        protected override void EncodeId(Buffer _buffer)
        {
            _buffer.WriteVaruint(Id);
        }

        protected override void DecodeId(Buffer _buffer)
        {
            _buffer.ReadVaruint();
        }

        protected override void EncodeImpl(Buffer _buffer)
        {
            _buffer.WriteVaruint(entityId);
            _buffer.WriteUuid(uuid);
            _buffer.WriteBigEndianDouble(position[0]); _buffer.WriteBigEndianDouble(position[1]); _buffer.WriteBigEndianDouble(position[2]);
            _buffer.WriteUbyte(yaw);
            _buffer.WriteUbyte(pitch);
            metadata.EncodeBody(_buffer);
        }

        protected override void DecodeImpl(Buffer _buffer)
        {






        }

        public static SpawnPlayer FromBuffer(byte[] buffer)
        {
            var ret = new SpawnPlayer();
            ret.decode(buffer);
            return ret;
        }

    }

    public class Animation : Packet
    {

        public const uint Id = 6;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        // animation
        public const byte SwingArm = 0;
        public const byte TakeDamage = 1;
        public const byte LeaveBed = 2;
        public const byte EatFood = 3;
        public const byte CriticalEffect = 4;
        public const byte MagicalCriticalEffect = 5;

        public uint entityId;
        public byte animation;

        public Animation() {}

        public Animation(uint entityId, byte animation)
        {
            this.entityId = entityId;
            this.animation = animation;
        }

        public override int GetId()
        {
            return Id;
        }

        protected override void EncodeId(Buffer _buffer)
        {
            _buffer.WriteVaruint(Id);
        }

        protected override void DecodeId(Buffer _buffer)
        {
            _buffer.ReadVaruint();
        }

        protected override void EncodeImpl(Buffer _buffer)
        {
            _buffer.WriteVaruint(entityId);
            _buffer.WriteUbyte(animation);
        }

        protected override void DecodeImpl(Buffer _buffer)
        {


        }

        public static Animation FromBuffer(byte[] buffer)
        {
            var ret = new Animation();
            ret.decode(buffer);
            return ret;
        }

    }

    public class Statistics : Packet
    {

        public const uint Id = 7;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        public Types.Statistic[] statistics;

        public Statistics() {}

        public Statistics(Types.Statistic[] statistics)
        {
            this.statistics = statistics;
        }

        public override int GetId()
        {
            return Id;
        }

        protected override void EncodeId(Buffer _buffer)
        {
            _buffer.WriteVaruint(Id);
        }

        protected override void DecodeId(Buffer _buffer)
        {
            _buffer.ReadVaruint();
        }

        protected override void EncodeImpl(Buffer _buffer)
        {
            _buffer.WriteVaruint(statistics.Length); foreach(Types.Statistic statisticsChild in statistics){ statisticsChild.EncodeBody(_buffer); }
        }

        protected override void DecodeImpl(Buffer _buffer)
        {

        }

        public static Statistics FromBuffer(byte[] buffer)
        {
            var ret = new Statistics();
            ret.decode(buffer);
            return ret;
        }

    }

    public class BlockBreakAnimation : Packet
    {

        public const uint Id = 8;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        public uint entityId;
        public ulong position;
        public byte stage;

        public BlockBreakAnimation() {}

        public BlockBreakAnimation(uint entityId, ulong position, byte stage)
        {
            this.entityId = entityId;
            this.position = position;
            this.stage = stage;
        }

        public override int GetId()
        {
            return Id;
        }

        protected override void EncodeId(Buffer _buffer)
        {
            _buffer.WriteVaruint(Id);
        }

        protected override void DecodeId(Buffer _buffer)
        {
            _buffer.ReadVaruint();
        }

        protected override void EncodeImpl(Buffer _buffer)
        {
            _buffer.WriteVaruint(entityId);
            _buffer.WriteBigEndianUlong(position);
            _buffer.WriteUbyte(stage);
        }

        protected override void DecodeImpl(Buffer _buffer)
        {



        }

        public static BlockBreakAnimation FromBuffer(byte[] buffer)
        {
            var ret = new BlockBreakAnimation();
            ret.decode(buffer);
            return ret;
        }

    }

    public class UpdateBlockEntity : Packet
    {

        public const uint Id = 9;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        // action
        public const byte MobSpawnerData = 1;
        public const byte CommandBlockText = 2;
        public const byte BeaconPowers = 3;
        public const byte MobHeadData = 4;
        public const byte FlowerPotFlower = 5;
        public const byte BannerData = 6;

        public ulong position;
        public byte action;
        public byte[] nbt;

        public UpdateBlockEntity() {}

        public UpdateBlockEntity(ulong position, byte action, byte[] nbt)
        {
            this.position = position;
            this.action = action;
            this.nbt = nbt;
        }

        public override int GetId()
        {
            return Id;
        }

        protected override void EncodeId(Buffer _buffer)
        {
            _buffer.WriteVaruint(Id);
        }

        protected override void DecodeId(Buffer _buffer)
        {
            _buffer.ReadVaruint();
        }

        protected override void EncodeImpl(Buffer _buffer)
        {
            _buffer.WriteBigEndianUlong(position);
            _buffer.WriteUbyte(action);
            _buffer.WriteBytes(nbt);
        }

        protected override void DecodeImpl(Buffer _buffer)
        {



        }

        public static UpdateBlockEntity FromBuffer(byte[] buffer)
        {
            var ret = new UpdateBlockEntity();
            ret.decode(buffer);
            return ret;
        }

    }

    public class BlockAction : Packet
    {

        public const uint Id = 10;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        // action
        public const byte NoteBlockHarp = 0;
        public const byte NoteBlockBassDrum = 1;
        public const byte NoteBlockSnareDrum = 2;
        public const byte NoteBlockClicks = 3;
        public const byte NoteBlockSticks = 3;
        public const byte NoteBlockBassGuitar = 4;
        public const byte PistonExtend = 0;
        public const byte PistonRetract = 1;
        public const byte ChestWatchers = 1;
        public const byte BeaconRecalculate = 1;
        public const byte MobSpawnerResetDelay = 1;
        public const byte EndGatewayYellowBeam = 1;

        // parameter
        public const byte PistonDown = 0;
        public const byte PistonUp = 1;
        public const byte PistonSouth = 2;
        public const byte PistonWest = 3;
        public const byte PistonNorth = 4;
        public const byte PistonEast = 5;

        public ulong position;
        public byte action;
        public byte parameter;
        public uint blockType;

        public BlockAction() {}

        public BlockAction(ulong position, byte action, byte parameter, uint blockType)
        {
            this.position = position;
            this.action = action;
            this.parameter = parameter;
            this.blockType = blockType;
        }

        public override int GetId()
        {
            return Id;
        }

        protected override void EncodeId(Buffer _buffer)
        {
            _buffer.WriteVaruint(Id);
        }

        protected override void DecodeId(Buffer _buffer)
        {
            _buffer.ReadVaruint();
        }

        protected override void EncodeImpl(Buffer _buffer)
        {
            _buffer.WriteBigEndianUlong(position);
            _buffer.WriteUbyte(action);
            _buffer.WriteUbyte(parameter);
            _buffer.WriteVaruint(blockType);
        }

        protected override void DecodeImpl(Buffer _buffer)
        {




        }

        public static BlockAction FromBuffer(byte[] buffer)
        {
            var ret = new BlockAction();
            ret.decode(buffer);
            return ret;
        }

    }

    public class BlockChange : Packet
    {

        public const uint Id = 11;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        public ulong position;
        public uint block;

        public BlockChange() {}

        public BlockChange(ulong position, uint block)
        {
            this.position = position;
            this.block = block;
        }

        public override int GetId()
        {
            return Id;
        }

        protected override void EncodeId(Buffer _buffer)
        {
            _buffer.WriteVaruint(Id);
        }

        protected override void DecodeId(Buffer _buffer)
        {
            _buffer.ReadVaruint();
        }

        protected override void EncodeImpl(Buffer _buffer)
        {
            _buffer.WriteBigEndianUlong(position);
            _buffer.WriteVaruint(block);
        }

        protected override void DecodeImpl(Buffer _buffer)
        {


        }

        public static BlockChange FromBuffer(byte[] buffer)
        {
            var ret = new BlockChange();
            ret.decode(buffer);
            return ret;
        }

    }

    public class BossBar : Packet
    {

        public const uint Id = 12;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        public Guid uuid;
        public uint action;

        public BossBar() {}

        public BossBar(Guid uuid, uint action)
        {
            this.uuid = uuid;
            this.action = action;
        }

        public override int GetId()
        {
            return Id;
        }

        protected override void EncodeId(Buffer _buffer)
        {
            _buffer.WriteVaruint(Id);
        }

        protected override void DecodeId(Buffer _buffer)
        {
            _buffer.ReadVaruint();
        }

        protected override void EncodeImpl(Buffer _buffer)
        {
            _buffer.WriteUuid(uuid);
            _buffer.WriteVaruint(action);
        }

        protected override void DecodeImpl(Buffer _buffer)
        {


        }

        public static BossBar FromBuffer(byte[] buffer)
        {
            var ret = new BossBar();
            ret.decode(buffer);
            return ret;
        }

    }

    public class ServerDifficulty : Packet
    {

        public const uint Id = 13;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        // difficulty
        public const byte Peaceful = 0;
        public const byte Easy = 1;
        public const byte Normal = 2;
        public const byte Hard = 3;

        public byte difficulty;

        public ServerDifficulty() {}

        public ServerDifficulty(byte difficulty)
        {
            this.difficulty = difficulty;
        }

        public override int GetId()
        {
            return Id;
        }

        protected override void EncodeId(Buffer _buffer)
        {
            _buffer.WriteVaruint(Id);
        }

        protected override void DecodeId(Buffer _buffer)
        {
            _buffer.ReadVaruint();
        }

        protected override void EncodeImpl(Buffer _buffer)
        {
            _buffer.WriteUbyte(difficulty);
        }

        protected override void DecodeImpl(Buffer _buffer)
        {

        }

        public static ServerDifficulty FromBuffer(byte[] buffer)
        {
            var ret = new ServerDifficulty();
            ret.decode(buffer);
            return ret;
        }

    }

    public class TabComplete : Packet
    {

        public const uint Id = 14;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        public string[] matches;

        public TabComplete() {}

        public TabComplete(string[] matches)
        {
            this.matches = matches;
        }

        public override int GetId()
        {
            return Id;
        }

        protected override void EncodeId(Buffer _buffer)
        {
            _buffer.WriteVaruint(Id);
        }

        protected override void DecodeId(Buffer _buffer)
        {
            _buffer.ReadVaruint();
        }

        protected override void EncodeImpl(Buffer _buffer)
        {
            _buffer.WriteVaruint(matches.Length); foreach(string matchesChild in matches){ _buffer.WriteVaruint(Encoding.UTF8.GetByteCount(matchesChild)); _buffer.WriteString(matchesChild); }
        }

        protected override void DecodeImpl(Buffer _buffer)
        {

        }

        public static TabComplete FromBuffer(byte[] buffer)
        {
            var ret = new TabComplete();
            ret.decode(buffer);
            return ret;
        }

    }

    public class ChatMessage : Packet
    {

        public const uint Id = 15;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        // position
        public const byte Chat = 0;
        public const byte SystemMessage = 1;
        public const byte AboveHotbar = 2;

        public string message;
        public byte position;

        public ChatMessage() {}

        public ChatMessage(string message, byte position)
        {
            this.message = message;
            this.position = position;
        }

        public override int GetId()
        {
            return Id;
        }

        protected override void EncodeId(Buffer _buffer)
        {
            _buffer.WriteVaruint(Id);
        }

        protected override void DecodeId(Buffer _buffer)
        {
            _buffer.ReadVaruint();
        }

        protected override void EncodeImpl(Buffer _buffer)
        {
            _buffer.WriteVaruint(Encoding.UTF8.GetByteCount(message)); _buffer.WriteString(message);
            _buffer.WriteUbyte(position);
        }

        protected override void DecodeImpl(Buffer _buffer)
        {


        }

        public static ChatMessage FromBuffer(byte[] buffer)
        {
            var ret = new ChatMessage();
            ret.decode(buffer);
            return ret;
        }

    }

    public class MultiBlockChange : Packet
    {

        public const uint Id = 16;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        public Tuple<int, int> chunk;
        public Types.BlockChange[] changes;

        public MultiBlockChange() {}

        public MultiBlockChange(Tuple<int, int> chunk, Types.BlockChange[] changes)
        {
            this.chunk = chunk;
            this.changes = changes;
        }

        public override int GetId()
        {
            return Id;
        }

        protected override void EncodeId(Buffer _buffer)
        {
            _buffer.WriteVaruint(Id);
        }

        protected override void DecodeId(Buffer _buffer)
        {
            _buffer.ReadVaruint();
        }

        protected override void EncodeImpl(Buffer _buffer)
        {
            _buffer.WriteBigEndianInt(chunk[0]); _buffer.WriteBigEndianInt(chunk[1]);
            _buffer.WriteVaruint(changes.Length); foreach(Types.BlockChange changesChild in changes){ changesChild.EncodeBody(_buffer); }
        }

        protected override void DecodeImpl(Buffer _buffer)
        {


        }

        public static MultiBlockChange FromBuffer(byte[] buffer)
        {
            var ret = new MultiBlockChange();
            ret.decode(buffer);
            return ret;
        }

    }

    public class ConfirmTransaction : Packet
    {

        public const uint Id = 17;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        public byte window;
        public ushort action;
        public bool accepted;

        public ConfirmTransaction() {}

        public ConfirmTransaction(byte window, ushort action, bool accepted)
        {
            this.window = window;
            this.action = action;
            this.accepted = accepted;
        }

        public override int GetId()
        {
            return Id;
        }

        protected override void EncodeId(Buffer _buffer)
        {
            _buffer.WriteVaruint(Id);
        }

        protected override void DecodeId(Buffer _buffer)
        {
            _buffer.ReadVaruint();
        }

        protected override void EncodeImpl(Buffer _buffer)
        {
            _buffer.WriteUbyte(window);
            _buffer.WriteBigEndianUshort(action);
            _buffer.WriteBool(accepted);
        }

        protected override void DecodeImpl(Buffer _buffer)
        {



        }

        public static ConfirmTransaction FromBuffer(byte[] buffer)
        {
            var ret = new ConfirmTransaction();
            ret.decode(buffer);
            return ret;
        }

    }

    public class CloseWindow : Packet
    {

        public const uint Id = 18;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        public byte window;

        public CloseWindow() {}

        public CloseWindow(byte window)
        {
            this.window = window;
        }

        public override int GetId()
        {
            return Id;
        }

        protected override void EncodeId(Buffer _buffer)
        {
            _buffer.WriteVaruint(Id);
        }

        protected override void DecodeId(Buffer _buffer)
        {
            _buffer.ReadVaruint();
        }

        protected override void EncodeImpl(Buffer _buffer)
        {
            _buffer.WriteUbyte(window);
        }

        protected override void DecodeImpl(Buffer _buffer)
        {

        }

        public static CloseWindow FromBuffer(byte[] buffer)
        {
            var ret = new CloseWindow();
            ret.decode(buffer);
            return ret;
        }

    }

    public class OpenWindow : Packet
    {

        public const uint Id = 19;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        public byte window;
        public string type;
        public string title;
        public byte slots;

        public OpenWindow() {}

        public OpenWindow(byte window, string type, string title, byte slots)
        {
            this.window = window;
            this.type = type;
            this.title = title;
            this.slots = slots;
        }

        public override int GetId()
        {
            return Id;
        }

        protected override void EncodeId(Buffer _buffer)
        {
            _buffer.WriteVaruint(Id);
        }

        protected override void DecodeId(Buffer _buffer)
        {
            _buffer.ReadVaruint();
        }

        protected override void EncodeImpl(Buffer _buffer)
        {
            _buffer.WriteUbyte(window);
            _buffer.WriteVaruint(Encoding.UTF8.GetByteCount(type)); _buffer.WriteString(type);
            _buffer.WriteVaruint(Encoding.UTF8.GetByteCount(title)); _buffer.WriteString(title);
            _buffer.WriteUbyte(slots);
        }

        protected override void DecodeImpl(Buffer _buffer)
        {




        }

        public static OpenWindow FromBuffer(byte[] buffer)
        {
            var ret = new OpenWindow();
            ret.decode(buffer);
            return ret;
        }

    }

    public class WindowItems : Packet
    {

        public const uint Id = 20;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        public byte window;
        public Types.Slot[] slots;

        public WindowItems() {}

        public WindowItems(byte window, Types.Slot[] slots)
        {
            this.window = window;
            this.slots = slots;
        }

        public override int GetId()
        {
            return Id;
        }

        protected override void EncodeId(Buffer _buffer)
        {
            _buffer.WriteVaruint(Id);
        }

        protected override void DecodeId(Buffer _buffer)
        {
            _buffer.ReadVaruint();
        }

        protected override void EncodeImpl(Buffer _buffer)
        {
            _buffer.WriteUbyte(window);
            _buffer.WriteBigEndianUshort(slots.Length); foreach(Types.Slot slotsChild in slots){ slotsChild.EncodeBody(_buffer); }
        }

        protected override void DecodeImpl(Buffer _buffer)
        {


        }

        public static WindowItems FromBuffer(byte[] buffer)
        {
            var ret = new WindowItems();
            ret.decode(buffer);
            return ret;
        }

    }

    public class WindowProperty : Packet
    {

        public const uint Id = 21;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        // property
        public const ushort FurnanceFireIcon = 0;
        public const ushort FurnaceMaxFuelBurnTime = 1;
        public const ushort FurnaceProgressArrow = 2;
        public const ushort FurnceMaxProgress = 3;
        public const ushort EnchantmentLevelRequirementTop = 0;
        public const ushort EnchantmentLevelRequirementMiddle = 1;
        public const ushort EnchantmentLevelRequirementBottom = 2;
        public const ushort EnchantmentSeed = 3;
        public const ushort EnchantmentIdTop = 4;
        public const ushort EnchantmentIdMiddle = 5;
        public const ushort EnchantmentIdBottom = 6;
        public const ushort EnchantmentLevelTop = 7;
        public const ushort EnchantmentLevelMiddle = 8;
        public const ushort EnchantmentLevelBottom = 9;
        public const ushort BeaconPowerLevel = 0;
        public const ushort BeaconFirstEffect = 1;
        public const ushort BeaconSecondEffect = 2;
        public const ushort AnvilRepairCost = 0;
        public const ushort BrewingStandBrewTime = 0;

        public byte window;
        public ushort property;
        public short @value;

        public WindowProperty() {}

        public WindowProperty(byte window, ushort property, short @value)
        {
            this.window = window;
            this.property = property;
            this.@value = @value;
        }

        public override int GetId()
        {
            return Id;
        }

        protected override void EncodeId(Buffer _buffer)
        {
            _buffer.WriteVaruint(Id);
        }

        protected override void DecodeId(Buffer _buffer)
        {
            _buffer.ReadVaruint();
        }

        protected override void EncodeImpl(Buffer _buffer)
        {
            _buffer.WriteUbyte(window);
            _buffer.WriteBigEndianUshort(property);
            _buffer.WriteBigEndianShort(@value);
        }

        protected override void DecodeImpl(Buffer _buffer)
        {



        }

        public static WindowProperty FromBuffer(byte[] buffer)
        {
            var ret = new WindowProperty();
            ret.decode(buffer);
            return ret;
        }

    }

    public class SetSlot : Packet
    {

        public const uint Id = 22;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        public byte window;
        public ushort slot;
        public Types.Slot item;

        public SetSlot() {}

        public SetSlot(byte window, ushort slot, Types.Slot item)
        {
            this.window = window;
            this.slot = slot;
            this.item = item;
        }

        public override int GetId()
        {
            return Id;
        }

        protected override void EncodeId(Buffer _buffer)
        {
            _buffer.WriteVaruint(Id);
        }

        protected override void DecodeId(Buffer _buffer)
        {
            _buffer.ReadVaruint();
        }

        protected override void EncodeImpl(Buffer _buffer)
        {
            _buffer.WriteUbyte(window);
            _buffer.WriteBigEndianUshort(slot);
            item.EncodeBody(_buffer);
        }

        protected override void DecodeImpl(Buffer _buffer)
        {



        }

        public static SetSlot FromBuffer(byte[] buffer)
        {
            var ret = new SetSlot();
            ret.decode(buffer);
            return ret;
        }

    }

    public class SetCooldown : Packet
    {

        public const uint Id = 23;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        public uint item;
        public uint cooldown;

        public SetCooldown() {}

        public SetCooldown(uint item, uint cooldown)
        {
            this.item = item;
            this.cooldown = cooldown;
        }

        public override int GetId()
        {
            return Id;
        }

        protected override void EncodeId(Buffer _buffer)
        {
            _buffer.WriteVaruint(Id);
        }

        protected override void DecodeId(Buffer _buffer)
        {
            _buffer.ReadVaruint();
        }

        protected override void EncodeImpl(Buffer _buffer)
        {
            _buffer.WriteVaruint(item);
            _buffer.WriteVaruint(cooldown);
        }

        protected override void DecodeImpl(Buffer _buffer)
        {


        }

        public static SetCooldown FromBuffer(byte[] buffer)
        {
            var ret = new SetCooldown();
            ret.decode(buffer);
            return ret;
        }

    }

    public class PluginMessage : Packet
    {

        public const uint Id = 24;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        public string channel;
        public byte[] data;

        public PluginMessage() {}

        public PluginMessage(string channel, byte[] data)
        {
            this.channel = channel;
            this.data = data;
        }

        public override int GetId()
        {
            return Id;
        }

        protected override void EncodeId(Buffer _buffer)
        {
            _buffer.WriteVaruint(Id);
        }

        protected override void DecodeId(Buffer _buffer)
        {
            _buffer.ReadVaruint();
        }

        protected override void EncodeImpl(Buffer _buffer)
        {
            _buffer.WriteVaruint(Encoding.UTF8.GetByteCount(channel)); _buffer.WriteString(channel);
            _buffer.WriteBytes(data);
        }

        protected override void DecodeImpl(Buffer _buffer)
        {


        }

        public static PluginMessage FromBuffer(byte[] buffer)
        {
            var ret = new PluginMessage();
            ret.decode(buffer);
            return ret;
        }

    }

    public class NamedSoundEffect : Packet
    {

        public const uint Id = 25;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        public string name;
        public uint category;
        public Tuple<int, int, int> position;
        public float volume;
        public byte pitch;

        public NamedSoundEffect() {}

        public NamedSoundEffect(string name, uint category, Tuple<int, int, int> position, float volume, byte pitch)
        {
            this.name = name;
            this.category = category;
            this.position = position;
            this.volume = volume;
            this.pitch = pitch;
        }

        public override int GetId()
        {
            return Id;
        }

        protected override void EncodeId(Buffer _buffer)
        {
            _buffer.WriteVaruint(Id);
        }

        protected override void DecodeId(Buffer _buffer)
        {
            _buffer.ReadVaruint();
        }

        protected override void EncodeImpl(Buffer _buffer)
        {
            _buffer.WriteVaruint(Encoding.UTF8.GetByteCount(name)); _buffer.WriteString(name);
            _buffer.WriteVaruint(category);
            _buffer.WriteBigEndianInt(position[0]); _buffer.WriteBigEndianInt(position[1]); _buffer.WriteBigEndianInt(position[2]);
            _buffer.WriteBigEndianFloat(volume);
            _buffer.WriteUbyte(pitch);
        }

        protected override void DecodeImpl(Buffer _buffer)
        {





        }

        public static NamedSoundEffect FromBuffer(byte[] buffer)
        {
            var ret = new NamedSoundEffect();
            ret.decode(buffer);
            return ret;
        }

    }

    public class Disconnect : Packet
    {

        public const uint Id = 26;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        public string reason;

        public Disconnect() {}

        public Disconnect(string reason)
        {
            this.reason = reason;
        }

        public override int GetId()
        {
            return Id;
        }

        protected override void EncodeId(Buffer _buffer)
        {
            _buffer.WriteVaruint(Id);
        }

        protected override void DecodeId(Buffer _buffer)
        {
            _buffer.ReadVaruint();
        }

        protected override void EncodeImpl(Buffer _buffer)
        {
            _buffer.WriteVaruint(Encoding.UTF8.GetByteCount(reason)); _buffer.WriteString(reason);
        }

        protected override void DecodeImpl(Buffer _buffer)
        {

        }

        public static Disconnect FromBuffer(byte[] buffer)
        {
            var ret = new Disconnect();
            ret.decode(buffer);
            return ret;
        }

    }

    public class EntityStatus : Packet
    {

        public const uint Id = 27;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        // status
        public const byte SpawnTippedArrowParticleEffects = 0;
        public const byte PlayJumpingAnimationAndParticles = 1;
        public const byte ResetSpawnerDelay = 1;
        public const byte PlayHurtAnimationAndSound = 2;
        public const byte PlayDeathAnimationAndSound = 3;
        public const byte PlayAttackAnimationAndSound = 4;
        public const byte SpawnSmokeParticles = 6;
        public const byte SpawnHeartParticles = 7;
        public const byte PlayShakingWaterAnimation = 8;
        public const byte FinishedConsuming = 9;
        public const byte PlayEatingGrassAnimation = 10;
        public const byte IgniteMinecartTnt = 10;
        public const byte HoldPoppy = 11;
        public const byte SpawnVillagerMatingHeartParticles = 12;
        public const byte SpawnVillagerAngryParticles = 13;
        public const byte SpawnVillagerHappyParticles = 14;
        public const byte SpawnWitchMagicParticles = 15;
        public const byte PlayZombieCureFinishedSound = 16;
        public const byte SpawnFireworkExplosionEffect = 17;
        public const byte SpawnLoveParticles = 18;
        public const byte ResetSquidRotation = 19;
        public const byte SpawnExplosionParticles = 20;
        public const byte PlayGuardianSoundEffect = 21;
        public const byte EnableReducedDebugScreen = 22;
        public const byte DisableReducedDebugScreen = 23;
        public const byte SetOpPermissionLevel0 = 24;
        public const byte SetOpPermissionLevel1 = 25;
        public const byte SetOpPermissionLevel2 = 26;
        public const byte SetOpPermissionLevel3 = 27;
        public const byte SetOpPermissionLevel4 = 28;

        public uint entityId;
        public byte status;

        public EntityStatus() {}

        public EntityStatus(uint entityId, byte status)
        {
            this.entityId = entityId;
            this.status = status;
        }

        public override int GetId()
        {
            return Id;
        }

        protected override void EncodeId(Buffer _buffer)
        {
            _buffer.WriteVaruint(Id);
        }

        protected override void DecodeId(Buffer _buffer)
        {
            _buffer.ReadVaruint();
        }

        protected override void EncodeImpl(Buffer _buffer)
        {
            _buffer.WriteBigEndianUint(entityId);
            _buffer.WriteUbyte(status);
        }

        protected override void DecodeImpl(Buffer _buffer)
        {


        }

        public static EntityStatus FromBuffer(byte[] buffer)
        {
            var ret = new EntityStatus();
            ret.decode(buffer);
            return ret;
        }

    }

    public class Explosion : Packet
    {

        public const uint Id = 28;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        public Tuple<float, float, float> position;
        public float radius;
        public Tuple<sbyte, sbyte, sbyte>[] records;
        public Tuple<float, float, float> motion;

        public Explosion() {}

        public Explosion(Tuple<float, float, float> position, float radius, Tuple<sbyte, sbyte, sbyte>[] records, Tuple<float, float, float> motion)
        {
            this.position = position;
            this.radius = radius;
            this.records = records;
            this.motion = motion;
        }

        public override int GetId()
        {
            return Id;
        }

        protected override void EncodeId(Buffer _buffer)
        {
            _buffer.WriteVaruint(Id);
        }

        protected override void DecodeId(Buffer _buffer)
        {
            _buffer.ReadVaruint();
        }

        protected override void EncodeImpl(Buffer _buffer)
        {
            _buffer.WriteBigEndianFloat(position[0]); _buffer.WriteBigEndianFloat(position[1]); _buffer.WriteBigEndianFloat(position[2]);
            _buffer.WriteBigEndianFloat(radius);
            _buffer.WriteBigEndianUint(records.Length); foreach(Tuple<sbyte, sbyte, sbyte> recordsChild in records){ _buffer.WriteByte(recordsChild[0]); _buffer.WriteByte(recordsChild[1]); _buffer.WriteByte(recordsChild[2]); }
            _buffer.WriteBigEndianFloat(motion[0]); _buffer.WriteBigEndianFloat(motion[1]); _buffer.WriteBigEndianFloat(motion[2]);
        }

        protected override void DecodeImpl(Buffer _buffer)
        {




        }

        public static Explosion FromBuffer(byte[] buffer)
        {
            var ret = new Explosion();
            ret.decode(buffer);
            return ret;
        }

    }

    public class UnloadChunk : Packet
    {

        public const uint Id = 29;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        public Tuple<int, int> position;

        public UnloadChunk() {}

        public UnloadChunk(Tuple<int, int> position)
        {
            this.position = position;
        }

        public override int GetId()
        {
            return Id;
        }

        protected override void EncodeId(Buffer _buffer)
        {
            _buffer.WriteVaruint(Id);
        }

        protected override void DecodeId(Buffer _buffer)
        {
            _buffer.ReadVaruint();
        }

        protected override void EncodeImpl(Buffer _buffer)
        {
            _buffer.WriteBigEndianInt(position[0]); _buffer.WriteBigEndianInt(position[1]);
        }

        protected override void DecodeImpl(Buffer _buffer)
        {

        }

        public static UnloadChunk FromBuffer(byte[] buffer)
        {
            var ret = new UnloadChunk();
            ret.decode(buffer);
            return ret;
        }

    }

    public class ChangeGameState : Packet
    {

        public const uint Id = 30;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        // reason
        public const byte InvalidBed = 0;
        public const byte EndRaining = 1;
        public const byte BeginRaining = 2;
        public const byte ChangeGamemode = 3;
        public const byte ExitEnd = 4;
        public const byte DemoMessage = 5;
        public const byte ArrowHittingPlayer = 6;
        public const byte FadeValue = 7;
        public const byte FadeTime = 8;
        public const byte PlayMobAppearance = 10;

        // value
        public const float Survival = 0;
        public const float Creative = 1;
        public const float Adventure = 2;
        public const float Spectator = 3;
        public const float ShowDemoScreen = 0;
        public const float TellMovementControls = 101;
        public const float TellJumpControls = 102;
        public const float TellInventoryControls = 103;
        public const float Bright = 0;
        public const float Dark = 1;

        public byte reason;
        public float @value;

        public ChangeGameState() {}

        public ChangeGameState(byte reason, float @value)
        {
            this.reason = reason;
            this.@value = @value;
        }

        public override int GetId()
        {
            return Id;
        }

        protected override void EncodeId(Buffer _buffer)
        {
            _buffer.WriteVaruint(Id);
        }

        protected override void DecodeId(Buffer _buffer)
        {
            _buffer.ReadVaruint();
        }

        protected override void EncodeImpl(Buffer _buffer)
        {
            _buffer.WriteUbyte(reason);
            _buffer.WriteBigEndianFloat(@value);
        }

        protected override void DecodeImpl(Buffer _buffer)
        {


        }

        public static ChangeGameState FromBuffer(byte[] buffer)
        {
            var ret = new ChangeGameState();
            ret.decode(buffer);
            return ret;
        }

    }

    public class KeepAlive : Packet
    {

        public const uint Id = 31;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        public uint id;

        public KeepAlive() {}

        public KeepAlive(uint id)
        {
            this.id = id;
        }

        public override int GetId()
        {
            return Id;
        }

        protected override void EncodeId(Buffer _buffer)
        {
            _buffer.WriteVaruint(Id);
        }

        protected override void DecodeId(Buffer _buffer)
        {
            _buffer.ReadVaruint();
        }

        protected override void EncodeImpl(Buffer _buffer)
        {
            _buffer.WriteVaruint(id);
        }

        protected override void DecodeImpl(Buffer _buffer)
        {

        }

        public static KeepAlive FromBuffer(byte[] buffer)
        {
            var ret = new KeepAlive();
            ret.decode(buffer);
            return ret;
        }

    }

    public class ChunkData : Packet
    {

        public const uint Id = 32;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        public Tuple<int, int> position;
        public bool full;
        public uint sections;
        public byte[] data;

        public ChunkData() {}

        public ChunkData(Tuple<int, int> position, bool full, uint sections, byte[] data)
        {
            this.position = position;
            this.full = full;
            this.sections = sections;
            this.data = data;
        }

        public override int GetId()
        {
            return Id;
        }

        protected override void EncodeId(Buffer _buffer)
        {
            _buffer.WriteVaruint(Id);
        }

        protected override void DecodeId(Buffer _buffer)
        {
            _buffer.ReadVaruint();
        }

        protected override void EncodeImpl(Buffer _buffer)
        {
            _buffer.WriteBigEndianInt(position[0]); _buffer.WriteBigEndianInt(position[1]);
            _buffer.WriteBool(full);
            _buffer.WriteVaruint(sections);
            _buffer.WriteVaruint(data.Length); _buffer.WriteBytes(data);
        }

        protected override void DecodeImpl(Buffer _buffer)
        {




        }

        public static ChunkData FromBuffer(byte[] buffer)
        {
            var ret = new ChunkData();
            ret.decode(buffer);
            return ret;
        }

    }

    public class Effect : Packet
    {

        public const uint Id = 33;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        // effect id
        public const uint DispenserDispense = 1000;
        public const uint DispenserFailDispense = 1001;
        public const uint DispenserShoot = 1002;
        public const uint DoorOpenOrClose = 1003;
        public const uint FireworkShot = 1004;
        public const uint PlayDisc = 1005;
        public const uint GhastWarn = 1007;
        public const uint GhastShoot = 1008;
        public const uint ZombieAttackWoodDoor = 1010;
        public const uint ZombieAttackIronDoor = 1011;
        public const uint ZombieBreakWoodDoor = 1012;
        public const uint WitherSpawn = 1013;
        public const uint WitherShoot = 1014;
        public const uint BatTakeOff = 1015;
        public const uint ZombieInfectVillager = 1016;
        public const uint ZombieVillagerConvert = 1017;
        public const uint AnvilBreak = 1019;
        public const uint AnvilUse = 1020;
        public const uint AnvilLand = 1021;
        public const uint Spawn10SmokeParticles = 2000;
        public const uint BreakBreakParticles = 2001;
        public const uint SplashPotionParticlesAndSound = 2002;
        public const uint EnderEyeBreakParticlesAndSound = 2003;
        public const uint MobSpawnParticles = 2004;
        public const uint BonemealParticles = 2005;

        public uint effectId;
        public ulong position;
        public uint data;
        public bool disableVolume;

        public Effect() {}

        public Effect(uint effectId, ulong position, uint data, bool disableVolume)
        {
            this.effectId = effectId;
            this.position = position;
            this.data = data;
            this.disableVolume = disableVolume;
        }

        public override int GetId()
        {
            return Id;
        }

        protected override void EncodeId(Buffer _buffer)
        {
            _buffer.WriteVaruint(Id);
        }

        protected override void DecodeId(Buffer _buffer)
        {
            _buffer.ReadVaruint();
        }

        protected override void EncodeImpl(Buffer _buffer)
        {
            _buffer.WriteBigEndianUint(effectId);
            _buffer.WriteBigEndianUlong(position);
            _buffer.WriteBigEndianUint(data);
            _buffer.WriteBool(disableVolume);
        }

        protected override void DecodeImpl(Buffer _buffer)
        {




        }

        public static Effect FromBuffer(byte[] buffer)
        {
            var ret = new Effect();
            ret.decode(buffer);
            return ret;
        }

    }

    public class Particle : Packet
    {

        public const uint Id = 34;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        // particle id
        public const uint Explode = 0;
        public const uint LargeExplosion = 1;
        public const uint HugeExplosion = 2;
        public const uint FireworkSpark = 3;
        public const uint Bubble = 4;
        public const uint Splash = 5;
        public const uint Wake = 6;
        public const uint Suspended = 7;
        public const uint DepthSuspend = 8;
        public const uint Crit = 9;
        public const uint MagicCrit = 10;
        public const uint Smoke = 11;
        public const uint LargeSmoke = 12;
        public const uint Spell = 13;
        public const uint InstantSpell = 14;
        public const uint MobSpell = 15;
        public const uint MobSpellAmbient = 16;
        public const uint WitchMagic = 17;
        public const uint DripWater = 18;
        public const uint DripLava = 19;
        public const uint AngryVillager = 20;
        public const uint HappyVillager = 21;
        public const uint TownAura = 22;
        public const uint Note = 23;
        public const uint Portal = 24;
        public const uint EnchantmentTable = 25;
        public const uint Flame = 26;
        public const uint Lava = 27;
        public const uint Footstep = 28;
        public const uint Cloud = 29;
        public const uint RedDust = 30;
        public const uint SnowballPoof = 31;
        public const uint SnowShovel = 32;
        public const uint Slime = 33;
        public const uint Heart = 34;
        public const uint Barrier = 35;
        public const uint ItemCrack = 36;
        public const uint BlockCrack = 37;
        public const uint BlockDust = 38;
        public const uint Droplet = 39;
        public const uint Take = 40;
        public const uint MobAppearance = 41;
        public const uint DragonBreath = 42;
        public const uint Endrod = 43;
        public const uint DamageIndicator = 44;
        public const uint SweepAttack = 45;

        public uint particleId;
        public bool longDistance;
        public Tuple<float, float, float> position;
        public Tuple<float, float, float> offset;
        public float data;
        public uint count;
        public uint[2] additionalData;

        public Particle() {}

        public Particle(uint particleId, bool longDistance, Tuple<float, float, float> position, Tuple<float, float, float> offset, float data, uint count, uint[2] additionalData)
        {
            this.particleId = particleId;
            this.longDistance = longDistance;
            this.position = position;
            this.offset = offset;
            this.data = data;
            this.count = count;
            this.additionalData = additionalData;
        }

        public override int GetId()
        {
            return Id;
        }

        protected override void EncodeId(Buffer _buffer)
        {
            _buffer.WriteVaruint(Id);
        }

        protected override void DecodeId(Buffer _buffer)
        {
            _buffer.ReadVaruint();
        }

        protected override void EncodeImpl(Buffer _buffer)
        {
            _buffer.WriteBigEndianUint(particleId);
            _buffer.WriteBool(longDistance);
            _buffer.WriteBigEndianFloat(position[0]); _buffer.WriteBigEndianFloat(position[1]); _buffer.WriteBigEndianFloat(position[2]);
            _buffer.WriteBigEndianFloat(offset[0]); _buffer.WriteBigEndianFloat(offset[1]); _buffer.WriteBigEndianFloat(offset[2]);
            _buffer.WriteBigEndianFloat(data);
            _buffer.WriteBigEndianUint(count);
            foreach(uint additionalDataChild in additionalData){ _buffer.WriteVaruint(additionalDataChild); }
        }

        protected override void DecodeImpl(Buffer _buffer)
        {







        }

        public static Particle FromBuffer(byte[] buffer)
        {
            var ret = new Particle();
            ret.decode(buffer);
            return ret;
        }

    }

    public class JoinGame : Packet
    {

        public const uint Id = 35;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        // gamemode
        public const byte Survival = 0;
        public const byte Creative = 1;
        public const byte Adventure = 2;
        public const byte Spectator = 3;

        // dimension
        public const int Nether = -1;
        public const int Overworld = 0;
        public const int End = 1;

        // difficulty
        public const byte Peaceful = 0;
        public const byte Easy = 1;
        public const byte Normal = 2;
        public const byte Hard = 3;

        // level type
        public const string Infinity = "default";
        public const string Flat = "flat";
        public const string Amplified = "amplified";
        public const string LargeBiomes = "largeBiomes";

        public uint entityId;
        public byte gamemode;
        public int dimension;
        public byte difficulty;
        public byte maxPlayers;
        public string levelType;
        public bool reducedDebug;

        public JoinGame() {}

        public JoinGame(uint entityId, byte gamemode, int dimension, byte difficulty, byte maxPlayers, string levelType, bool reducedDebug)
        {
            this.entityId = entityId;
            this.gamemode = gamemode;
            this.dimension = dimension;
            this.difficulty = difficulty;
            this.maxPlayers = maxPlayers;
            this.levelType = levelType;
            this.reducedDebug = reducedDebug;
        }

        public override int GetId()
        {
            return Id;
        }

        protected override void EncodeId(Buffer _buffer)
        {
            _buffer.WriteVaruint(Id);
        }

        protected override void DecodeId(Buffer _buffer)
        {
            _buffer.ReadVaruint();
        }

        protected override void EncodeImpl(Buffer _buffer)
        {
            _buffer.WriteBigEndianUint(entityId);
            _buffer.WriteUbyte(gamemode);
            _buffer.WriteBigEndianInt(dimension);
            _buffer.WriteUbyte(difficulty);
            _buffer.WriteUbyte(maxPlayers);
            _buffer.WriteVaruint(Encoding.UTF8.GetByteCount(levelType)); _buffer.WriteString(levelType);
            _buffer.WriteBool(reducedDebug);
        }

        protected override void DecodeImpl(Buffer _buffer)
        {







        }

        public static JoinGame FromBuffer(byte[] buffer)
        {
            var ret = new JoinGame();
            ret.decode(buffer);
            return ret;
        }

    }

    public class Map : Packet
    {

        public const uint Id = 36;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        public uint mapId;
        public byte scale;
        public bool showIcons;
        public Types.Icon[] icons;
        public byte colums;
        public byte rows;
        public Tuple<byte, byte> offset;
        public byte[] data;

        public Map() {}

        public Map(uint mapId, byte scale, bool showIcons, Types.Icon[] icons, byte colums, byte rows, Tuple<byte, byte> offset, byte[] data)
        {
            this.mapId = mapId;
            this.scale = scale;
            this.showIcons = showIcons;
            this.icons = icons;
            this.colums = colums;
            this.rows = rows;
            this.offset = offset;
            this.data = data;
        }

        public override int GetId()
        {
            return Id;
        }

        protected override void EncodeId(Buffer _buffer)
        {
            _buffer.WriteVaruint(Id);
        }

        protected override void DecodeId(Buffer _buffer)
        {
            _buffer.ReadVaruint();
        }

        protected override void EncodeImpl(Buffer _buffer)
        {
            _buffer.WriteVaruint(mapId);
            _buffer.WriteUbyte(scale);
            _buffer.WriteBool(showIcons);
            _buffer.WriteVaruint(icons.Length); foreach(Types.Icon iconsChild in icons){ iconsChild.EncodeBody(_buffer); }
            _buffer.WriteUbyte(colums);
            _buffer.WriteUbyte(rows);
            _buffer.WriteUbyte(offset[0]); _buffer.WriteUbyte(offset[1]);
            _buffer.WriteVaruint(data.Length); _buffer.WriteBytes(data);
        }

        protected override void DecodeImpl(Buffer _buffer)
        {








        }

        public static Map FromBuffer(byte[] buffer)
        {
            var ret = new Map();
            ret.decode(buffer);
            return ret;
        }

    }

    public class EntityRelativeMove : Packet
    {

        public const uint Id = 37;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        public uint entityId;
        public Tuple<short, short, short> delta;
        public bool onGround;

        public EntityRelativeMove() {}

        public EntityRelativeMove(uint entityId, Tuple<short, short, short> delta, bool onGround)
        {
            this.entityId = entityId;
            this.delta = delta;
            this.onGround = onGround;
        }

        public override int GetId()
        {
            return Id;
        }

        protected override void EncodeId(Buffer _buffer)
        {
            _buffer.WriteVaruint(Id);
        }

        protected override void DecodeId(Buffer _buffer)
        {
            _buffer.ReadVaruint();
        }

        protected override void EncodeImpl(Buffer _buffer)
        {
            _buffer.WriteVaruint(entityId);
            _buffer.WriteBigEndianShort(delta[0]); _buffer.WriteBigEndianShort(delta[1]); _buffer.WriteBigEndianShort(delta[2]);
            _buffer.WriteBool(onGround);
        }

        protected override void DecodeImpl(Buffer _buffer)
        {



        }

        public static EntityRelativeMove FromBuffer(byte[] buffer)
        {
            var ret = new EntityRelativeMove();
            ret.decode(buffer);
            return ret;
        }

    }

    public class EntityLookAndRelativeMove : Packet
    {

        public const uint Id = 38;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        public uint entityId;
        public Tuple<short, short, short> delta;
        public byte yaw;
        public byte pitch;
        public bool onGround;

        public EntityLookAndRelativeMove() {}

        public EntityLookAndRelativeMove(uint entityId, Tuple<short, short, short> delta, byte yaw, byte pitch, bool onGround)
        {
            this.entityId = entityId;
            this.delta = delta;
            this.yaw = yaw;
            this.pitch = pitch;
            this.onGround = onGround;
        }

        public override int GetId()
        {
            return Id;
        }

        protected override void EncodeId(Buffer _buffer)
        {
            _buffer.WriteVaruint(Id);
        }

        protected override void DecodeId(Buffer _buffer)
        {
            _buffer.ReadVaruint();
        }

        protected override void EncodeImpl(Buffer _buffer)
        {
            _buffer.WriteVaruint(entityId);
            _buffer.WriteBigEndianShort(delta[0]); _buffer.WriteBigEndianShort(delta[1]); _buffer.WriteBigEndianShort(delta[2]);
            _buffer.WriteUbyte(yaw);
            _buffer.WriteUbyte(pitch);
            _buffer.WriteBool(onGround);
        }

        protected override void DecodeImpl(Buffer _buffer)
        {





        }

        public static EntityLookAndRelativeMove FromBuffer(byte[] buffer)
        {
            var ret = new EntityLookAndRelativeMove();
            ret.decode(buffer);
            return ret;
        }

    }

    public class EntityLook : Packet
    {

        public const uint Id = 39;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        public uint entityId;
        public byte yaw;
        public byte pitch;
        public bool onGround;

        public EntityLook() {}

        public EntityLook(uint entityId, byte yaw, byte pitch, bool onGround)
        {
            this.entityId = entityId;
            this.yaw = yaw;
            this.pitch = pitch;
            this.onGround = onGround;
        }

        public override int GetId()
        {
            return Id;
        }

        protected override void EncodeId(Buffer _buffer)
        {
            _buffer.WriteVaruint(Id);
        }

        protected override void DecodeId(Buffer _buffer)
        {
            _buffer.ReadVaruint();
        }

        protected override void EncodeImpl(Buffer _buffer)
        {
            _buffer.WriteVaruint(entityId);
            _buffer.WriteUbyte(yaw);
            _buffer.WriteUbyte(pitch);
            _buffer.WriteBool(onGround);
        }

        protected override void DecodeImpl(Buffer _buffer)
        {




        }

        public static EntityLook FromBuffer(byte[] buffer)
        {
            var ret = new EntityLook();
            ret.decode(buffer);
            return ret;
        }

    }

    public class Entity : Packet
    {

        public const uint Id = 40;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        public uint entityId;

        public Entity() {}

        public Entity(uint entityId)
        {
            this.entityId = entityId;
        }

        public override int GetId()
        {
            return Id;
        }

        protected override void EncodeId(Buffer _buffer)
        {
            _buffer.WriteVaruint(Id);
        }

        protected override void DecodeId(Buffer _buffer)
        {
            _buffer.ReadVaruint();
        }

        protected override void EncodeImpl(Buffer _buffer)
        {
            _buffer.WriteVaruint(entityId);
        }

        protected override void DecodeImpl(Buffer _buffer)
        {

        }

        public static Entity FromBuffer(byte[] buffer)
        {
            var ret = new Entity();
            ret.decode(buffer);
            return ret;
        }

    }

    public class VehicleMove : Packet
    {

        public const uint Id = 41;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        public Tuple<double, double, double> position;
        public float yaw;
        public float pitch;

        public VehicleMove() {}

        public VehicleMove(Tuple<double, double, double> position, float yaw, float pitch)
        {
            this.position = position;
            this.yaw = yaw;
            this.pitch = pitch;
        }

        public override int GetId()
        {
            return Id;
        }

        protected override void EncodeId(Buffer _buffer)
        {
            _buffer.WriteVaruint(Id);
        }

        protected override void DecodeId(Buffer _buffer)
        {
            _buffer.ReadVaruint();
        }

        protected override void EncodeImpl(Buffer _buffer)
        {
            _buffer.WriteBigEndianDouble(position[0]); _buffer.WriteBigEndianDouble(position[1]); _buffer.WriteBigEndianDouble(position[2]);
            _buffer.WriteBigEndianFloat(yaw);
            _buffer.WriteBigEndianFloat(pitch);
        }

        protected override void DecodeImpl(Buffer _buffer)
        {



        }

        public static VehicleMove FromBuffer(byte[] buffer)
        {
            var ret = new VehicleMove();
            ret.decode(buffer);
            return ret;
        }

    }

    public class OpenSignEditor : Packet
    {

        public const uint Id = 42;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        public ulong position;

        public OpenSignEditor() {}

        public OpenSignEditor(ulong position)
        {
            this.position = position;
        }

        public override int GetId()
        {
            return Id;
        }

        protected override void EncodeId(Buffer _buffer)
        {
            _buffer.WriteVaruint(Id);
        }

        protected override void DecodeId(Buffer _buffer)
        {
            _buffer.ReadVaruint();
        }

        protected override void EncodeImpl(Buffer _buffer)
        {
            _buffer.WriteBigEndianUlong(position);
        }

        protected override void DecodeImpl(Buffer _buffer)
        {

        }

        public static OpenSignEditor FromBuffer(byte[] buffer)
        {
            var ret = new OpenSignEditor();
            ret.decode(buffer);
            return ret;
        }

    }

    public class PlayerAbilities : Packet
    {

        public const uint Id = 43;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        // flags
        public const byte Invulnerable = 1;
        public const byte Flying = 2;
        public const byte AllowFlying = 4;
        public const byte CreativeMode = 8;

        public byte flags;
        public float flyingSpeed;
        public float fovModifier;

        public PlayerAbilities() {}

        public PlayerAbilities(byte flags, float flyingSpeed, float fovModifier)
        {
            this.flags = flags;
            this.flyingSpeed = flyingSpeed;
            this.fovModifier = fovModifier;
        }

        public override int GetId()
        {
            return Id;
        }

        protected override void EncodeId(Buffer _buffer)
        {
            _buffer.WriteVaruint(Id);
        }

        protected override void DecodeId(Buffer _buffer)
        {
            _buffer.ReadVaruint();
        }

        protected override void EncodeImpl(Buffer _buffer)
        {
            _buffer.WriteUbyte(flags);
            _buffer.WriteBigEndianFloat(flyingSpeed);
            _buffer.WriteBigEndianFloat(fovModifier);
        }

        protected override void DecodeImpl(Buffer _buffer)
        {



        }

        public static PlayerAbilities FromBuffer(byte[] buffer)
        {
            var ret = new PlayerAbilities();
            ret.decode(buffer);
            return ret;
        }

    }

    public class CombatEvent : Packet
    {

        public const uint Id = 44;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        public byte eventId;

        public CombatEvent() {}

        public CombatEvent(byte eventId)
        {
            this.eventId = eventId;
        }

        public override int GetId()
        {
            return Id;
        }

        protected override void EncodeId(Buffer _buffer)
        {
            _buffer.WriteVaruint(Id);
        }

        protected override void DecodeId(Buffer _buffer)
        {
            _buffer.ReadVaruint();
        }

        protected override void EncodeImpl(Buffer _buffer)
        {
            _buffer.WriteUbyte(eventId);
        }

        protected override void DecodeImpl(Buffer _buffer)
        {

        }

        public static CombatEvent FromBuffer(byte[] buffer)
        {
            var ret = new CombatEvent();
            ret.decode(buffer);
            return ret;
        }

    }

    public class PlayerListItem : Packet
    {

        public const uint Id = 45;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        public uint action;

        public PlayerListItem() {}

        public PlayerListItem(uint action)
        {
            this.action = action;
        }

        public override int GetId()
        {
            return Id;
        }

        protected override void EncodeId(Buffer _buffer)
        {
            _buffer.WriteVaruint(Id);
        }

        protected override void DecodeId(Buffer _buffer)
        {
            _buffer.ReadVaruint();
        }

        protected override void EncodeImpl(Buffer _buffer)
        {
            _buffer.WriteVaruint(action);
        }

        protected override void DecodeImpl(Buffer _buffer)
        {

        }

        public static PlayerListItem FromBuffer(byte[] buffer)
        {
            var ret = new PlayerListItem();
            ret.decode(buffer);
            return ret;
        }

    }

    public class PlayerPositionAndLook : Packet
    {

        public const uint Id = 46;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        // flags
        public const byte X = 1;
        public const byte Y = 2;
        public const byte Z = 4;
        public const byte YRotation = 8;
        public const byte XRotation = 16;

        public Tuple<double, double, double> position;
        public float yaw;
        public float pitch;
        public byte flags;
        public uint teleportId;

        public PlayerPositionAndLook() {}

        public PlayerPositionAndLook(Tuple<double, double, double> position, float yaw, float pitch, byte flags, uint teleportId)
        {
            this.position = position;
            this.yaw = yaw;
            this.pitch = pitch;
            this.flags = flags;
            this.teleportId = teleportId;
        }

        public override int GetId()
        {
            return Id;
        }

        protected override void EncodeId(Buffer _buffer)
        {
            _buffer.WriteVaruint(Id);
        }

        protected override void DecodeId(Buffer _buffer)
        {
            _buffer.ReadVaruint();
        }

        protected override void EncodeImpl(Buffer _buffer)
        {
            _buffer.WriteBigEndianDouble(position[0]); _buffer.WriteBigEndianDouble(position[1]); _buffer.WriteBigEndianDouble(position[2]);
            _buffer.WriteBigEndianFloat(yaw);
            _buffer.WriteBigEndianFloat(pitch);
            _buffer.WriteUbyte(flags);
            _buffer.WriteVaruint(teleportId);
        }

        protected override void DecodeImpl(Buffer _buffer)
        {





        }

        public static PlayerPositionAndLook FromBuffer(byte[] buffer)
        {
            var ret = new PlayerPositionAndLook();
            ret.decode(buffer);
            return ret;
        }

    }

    public class UseBed : Packet
    {

        public const uint Id = 47;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        public uint entityId;
        public ulong position;

        public UseBed() {}

        public UseBed(uint entityId, ulong position)
        {
            this.entityId = entityId;
            this.position = position;
        }

        public override int GetId()
        {
            return Id;
        }

        protected override void EncodeId(Buffer _buffer)
        {
            _buffer.WriteVaruint(Id);
        }

        protected override void DecodeId(Buffer _buffer)
        {
            _buffer.ReadVaruint();
        }

        protected override void EncodeImpl(Buffer _buffer)
        {
            _buffer.WriteVaruint(entityId);
            _buffer.WriteBigEndianUlong(position);
        }

        protected override void DecodeImpl(Buffer _buffer)
        {


        }

        public static UseBed FromBuffer(byte[] buffer)
        {
            var ret = new UseBed();
            ret.decode(buffer);
            return ret;
        }

    }

    public class DestroyEntities : Packet
    {

        public const uint Id = 48;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        public uint[] entityIds;

        public DestroyEntities() {}

        public DestroyEntities(uint[] entityIds)
        {
            this.entityIds = entityIds;
        }

        public override int GetId()
        {
            return Id;
        }

        protected override void EncodeId(Buffer _buffer)
        {
            _buffer.WriteVaruint(Id);
        }

        protected override void DecodeId(Buffer _buffer)
        {
            _buffer.ReadVaruint();
        }

        protected override void EncodeImpl(Buffer _buffer)
        {
            _buffer.WriteVaruint(entityIds.Length); foreach(uint entityIdsChild in entityIds){ _buffer.WriteVaruint(entityIdsChild); }
        }

        protected override void DecodeImpl(Buffer _buffer)
        {

        }

        public static DestroyEntities FromBuffer(byte[] buffer)
        {
            var ret = new DestroyEntities();
            ret.decode(buffer);
            return ret;
        }

    }

    public class RemoveEntityEffect : Packet
    {

        public const uint Id = 49;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        public uint entityId;
        public byte effectId;

        public RemoveEntityEffect() {}

        public RemoveEntityEffect(uint entityId, byte effectId)
        {
            this.entityId = entityId;
            this.effectId = effectId;
        }

        public override int GetId()
        {
            return Id;
        }

        protected override void EncodeId(Buffer _buffer)
        {
            _buffer.WriteVaruint(Id);
        }

        protected override void DecodeId(Buffer _buffer)
        {
            _buffer.ReadVaruint();
        }

        protected override void EncodeImpl(Buffer _buffer)
        {
            _buffer.WriteVaruint(entityId);
            _buffer.WriteUbyte(effectId);
        }

        protected override void DecodeImpl(Buffer _buffer)
        {


        }

        public static RemoveEntityEffect FromBuffer(byte[] buffer)
        {
            var ret = new RemoveEntityEffect();
            ret.decode(buffer);
            return ret;
        }

    }

    public class ResourcePackSend : Packet
    {

        public const uint Id = 50;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        public string url;
        public string hash;

        public ResourcePackSend() {}

        public ResourcePackSend(string url, string hash)
        {
            this.url = url;
            this.hash = hash;
        }

        public override int GetId()
        {
            return Id;
        }

        protected override void EncodeId(Buffer _buffer)
        {
            _buffer.WriteVaruint(Id);
        }

        protected override void DecodeId(Buffer _buffer)
        {
            _buffer.ReadVaruint();
        }

        protected override void EncodeImpl(Buffer _buffer)
        {
            _buffer.WriteVaruint(Encoding.UTF8.GetByteCount(url)); _buffer.WriteString(url);
            _buffer.WriteVaruint(Encoding.UTF8.GetByteCount(hash)); _buffer.WriteString(hash);
        }

        protected override void DecodeImpl(Buffer _buffer)
        {


        }

        public static ResourcePackSend FromBuffer(byte[] buffer)
        {
            var ret = new ResourcePackSend();
            ret.decode(buffer);
            return ret;
        }

    }

    public class Respawn : Packet
    {

        public const uint Id = 51;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        // dimension
        public const int Nether = -1;
        public const int Overworld = 0;
        public const int End = 1;

        // difficulty
        public const byte Peaceful = 0;
        public const byte Easy = 1;
        public const byte Normal = 2;
        public const byte Hard = 3;

        // gamemode
        public const byte Survival = 0;
        public const byte Creative = 1;
        public const byte Adventure = 2;
        public const byte Spectator = 3;

        // level type
        public const string Infinity = "default";
        public const string Flat = "flat";
        public const string Amplified = "amplified";
        public const string LargeBiomes = "largeBiomes";

        public int dimension;
        public byte difficulty;
        public byte gamemode;
        public string levelType;

        public Respawn() {}

        public Respawn(int dimension, byte difficulty, byte gamemode, string levelType)
        {
            this.dimension = dimension;
            this.difficulty = difficulty;
            this.gamemode = gamemode;
            this.levelType = levelType;
        }

        public override int GetId()
        {
            return Id;
        }

        protected override void EncodeId(Buffer _buffer)
        {
            _buffer.WriteVaruint(Id);
        }

        protected override void DecodeId(Buffer _buffer)
        {
            _buffer.ReadVaruint();
        }

        protected override void EncodeImpl(Buffer _buffer)
        {
            _buffer.WriteBigEndianInt(dimension);
            _buffer.WriteUbyte(difficulty);
            _buffer.WriteUbyte(gamemode);
            _buffer.WriteVaruint(Encoding.UTF8.GetByteCount(levelType)); _buffer.WriteString(levelType);
        }

        protected override void DecodeImpl(Buffer _buffer)
        {




        }

        public static Respawn FromBuffer(byte[] buffer)
        {
            var ret = new Respawn();
            ret.decode(buffer);
            return ret;
        }

    }

    public class EntityHeadLook : Packet
    {

        public const uint Id = 52;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        public uint entityId;
        public byte headYaw;

        public EntityHeadLook() {}

        public EntityHeadLook(uint entityId, byte headYaw)
        {
            this.entityId = entityId;
            this.headYaw = headYaw;
        }

        public override int GetId()
        {
            return Id;
        }

        protected override void EncodeId(Buffer _buffer)
        {
            _buffer.WriteVaruint(Id);
        }

        protected override void DecodeId(Buffer _buffer)
        {
            _buffer.ReadVaruint();
        }

        protected override void EncodeImpl(Buffer _buffer)
        {
            _buffer.WriteVaruint(entityId);
            _buffer.WriteUbyte(headYaw);
        }

        protected override void DecodeImpl(Buffer _buffer)
        {


        }

        public static EntityHeadLook FromBuffer(byte[] buffer)
        {
            var ret = new EntityHeadLook();
            ret.decode(buffer);
            return ret;
        }

    }

    public class WorldBorder : Packet
    {

        public const uint Id = 53;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        public uint action;

        public WorldBorder() {}

        public WorldBorder(uint action)
        {
            this.action = action;
        }

        public override int GetId()
        {
            return Id;
        }

        protected override void EncodeId(Buffer _buffer)
        {
            _buffer.WriteVaruint(Id);
        }

        protected override void DecodeId(Buffer _buffer)
        {
            _buffer.ReadVaruint();
        }

        protected override void EncodeImpl(Buffer _buffer)
        {
            _buffer.WriteVaruint(action);
        }

        protected override void DecodeImpl(Buffer _buffer)
        {

        }

        public static WorldBorder FromBuffer(byte[] buffer)
        {
            var ret = new WorldBorder();
            ret.decode(buffer);
            return ret;
        }

    }

    public class Camera : Packet
    {

        public const uint Id = 54;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        public uint entityId;

        public Camera() {}

        public Camera(uint entityId)
        {
            this.entityId = entityId;
        }

        public override int GetId()
        {
            return Id;
        }

        protected override void EncodeId(Buffer _buffer)
        {
            _buffer.WriteVaruint(Id);
        }

        protected override void DecodeId(Buffer _buffer)
        {
            _buffer.ReadVaruint();
        }

        protected override void EncodeImpl(Buffer _buffer)
        {
            _buffer.WriteVaruint(entityId);
        }

        protected override void DecodeImpl(Buffer _buffer)
        {

        }

        public static Camera FromBuffer(byte[] buffer)
        {
            var ret = new Camera();
            ret.decode(buffer);
            return ret;
        }

    }

    public class HeldItemChange : Packet
    {

        public const uint Id = 55;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        public byte slot;

        public HeldItemChange() {}

        public HeldItemChange(byte slot)
        {
            this.slot = slot;
        }

        public override int GetId()
        {
            return Id;
        }

        protected override void EncodeId(Buffer _buffer)
        {
            _buffer.WriteVaruint(Id);
        }

        protected override void DecodeId(Buffer _buffer)
        {
            _buffer.ReadVaruint();
        }

        protected override void EncodeImpl(Buffer _buffer)
        {
            _buffer.WriteUbyte(slot);
        }

        protected override void DecodeImpl(Buffer _buffer)
        {

        }

        public static HeldItemChange FromBuffer(byte[] buffer)
        {
            var ret = new HeldItemChange();
            ret.decode(buffer);
            return ret;
        }

    }

    public class DisplayScoreboard : Packet
    {

        public const uint Id = 56;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        // position
        public const byte List = 0;
        public const byte Sidebar = 1;
        public const byte BelowName = 2;

        public byte position;
        public string scoreName;

        public DisplayScoreboard() {}

        public DisplayScoreboard(byte position, string scoreName)
        {
            this.position = position;
            this.scoreName = scoreName;
        }

        public override int GetId()
        {
            return Id;
        }

        protected override void EncodeId(Buffer _buffer)
        {
            _buffer.WriteVaruint(Id);
        }

        protected override void DecodeId(Buffer _buffer)
        {
            _buffer.ReadVaruint();
        }

        protected override void EncodeImpl(Buffer _buffer)
        {
            _buffer.WriteUbyte(position);
            _buffer.WriteVaruint(Encoding.UTF8.GetByteCount(scoreName)); _buffer.WriteString(scoreName);
        }

        protected override void DecodeImpl(Buffer _buffer)
        {


        }

        public static DisplayScoreboard FromBuffer(byte[] buffer)
        {
            var ret = new DisplayScoreboard();
            ret.decode(buffer);
            return ret;
        }

    }

    public class EntityMetadata : Packet
    {

        public const uint Id = 57;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        public uint entityId;
        public sul.Metadata.Minecraft108.Metadata metadata;

        public EntityMetadata() {}

        public EntityMetadata(uint entityId, sul.Metadata.Minecraft108.Metadata metadata)
        {
            this.entityId = entityId;
            this.metadata = metadata;
        }

        public override int GetId()
        {
            return Id;
        }

        protected override void EncodeId(Buffer _buffer)
        {
            _buffer.WriteVaruint(Id);
        }

        protected override void DecodeId(Buffer _buffer)
        {
            _buffer.ReadVaruint();
        }

        protected override void EncodeImpl(Buffer _buffer)
        {
            _buffer.WriteVaruint(entityId);
            metadata.EncodeBody(_buffer);
        }

        protected override void DecodeImpl(Buffer _buffer)
        {


        }

        public static EntityMetadata FromBuffer(byte[] buffer)
        {
            var ret = new EntityMetadata();
            ret.decode(buffer);
            return ret;
        }

    }

    public class AttachEntity : Packet
    {

        public const uint Id = 58;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        public uint target;
        public uint holder;

        public AttachEntity() {}

        public AttachEntity(uint target, uint holder)
        {
            this.target = target;
            this.holder = holder;
        }

        public override int GetId()
        {
            return Id;
        }

        protected override void EncodeId(Buffer _buffer)
        {
            _buffer.WriteVaruint(Id);
        }

        protected override void DecodeId(Buffer _buffer)
        {
            _buffer.ReadVaruint();
        }

        protected override void EncodeImpl(Buffer _buffer)
        {
            _buffer.WriteBigEndianUint(target);
            _buffer.WriteBigEndianUint(holder);
        }

        protected override void DecodeImpl(Buffer _buffer)
        {


        }

        public static AttachEntity FromBuffer(byte[] buffer)
        {
            var ret = new AttachEntity();
            ret.decode(buffer);
            return ret;
        }

    }

    public class EntityVelocity : Packet
    {

        public const uint Id = 59;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        public uint entityId;
        public Tuple<short, short, short> velocity;

        public EntityVelocity() {}

        public EntityVelocity(uint entityId, Tuple<short, short, short> velocity)
        {
            this.entityId = entityId;
            this.velocity = velocity;
        }

        public override int GetId()
        {
            return Id;
        }

        protected override void EncodeId(Buffer _buffer)
        {
            _buffer.WriteVaruint(Id);
        }

        protected override void DecodeId(Buffer _buffer)
        {
            _buffer.ReadVaruint();
        }

        protected override void EncodeImpl(Buffer _buffer)
        {
            _buffer.WriteVaruint(entityId);
            _buffer.WriteBigEndianShort(velocity[0]); _buffer.WriteBigEndianShort(velocity[1]); _buffer.WriteBigEndianShort(velocity[2]);
        }

        protected override void DecodeImpl(Buffer _buffer)
        {


        }

        public static EntityVelocity FromBuffer(byte[] buffer)
        {
            var ret = new EntityVelocity();
            ret.decode(buffer);
            return ret;
        }

    }

    public class EntityEquipment : Packet
    {

        public const uint Id = 60;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        public uint entityId;
        public uint slot;
        public Types.Slot item;

        public EntityEquipment() {}

        public EntityEquipment(uint entityId, uint slot, Types.Slot item)
        {
            this.entityId = entityId;
            this.slot = slot;
            this.item = item;
        }

        public override int GetId()
        {
            return Id;
        }

        protected override void EncodeId(Buffer _buffer)
        {
            _buffer.WriteVaruint(Id);
        }

        protected override void DecodeId(Buffer _buffer)
        {
            _buffer.ReadVaruint();
        }

        protected override void EncodeImpl(Buffer _buffer)
        {
            _buffer.WriteVaruint(entityId);
            _buffer.WriteVaruint(slot);
            item.EncodeBody(_buffer);
        }

        protected override void DecodeImpl(Buffer _buffer)
        {



        }

        public static EntityEquipment FromBuffer(byte[] buffer)
        {
            var ret = new EntityEquipment();
            ret.decode(buffer);
            return ret;
        }

    }

    public class SetExperience : Packet
    {

        public const uint Id = 61;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        public float experience;
        public uint level;
        public uint totalExperience;

        public SetExperience() {}

        public SetExperience(float experience, uint level, uint totalExperience)
        {
            this.experience = experience;
            this.level = level;
            this.totalExperience = totalExperience;
        }

        public override int GetId()
        {
            return Id;
        }

        protected override void EncodeId(Buffer _buffer)
        {
            _buffer.WriteVaruint(Id);
        }

        protected override void DecodeId(Buffer _buffer)
        {
            _buffer.ReadVaruint();
        }

        protected override void EncodeImpl(Buffer _buffer)
        {
            _buffer.WriteBigEndianFloat(experience);
            _buffer.WriteVaruint(level);
            _buffer.WriteVaruint(totalExperience);
        }

        protected override void DecodeImpl(Buffer _buffer)
        {



        }

        public static SetExperience FromBuffer(byte[] buffer)
        {
            var ret = new SetExperience();
            ret.decode(buffer);
            return ret;
        }

    }

    public class UpdateHealth : Packet
    {

        public const uint Id = 62;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        public float health;
        public uint hunger;
        public float saturation;

        public UpdateHealth() {}

        public UpdateHealth(float health, uint hunger, float saturation)
        {
            this.health = health;
            this.hunger = hunger;
            this.saturation = saturation;
        }

        public override int GetId()
        {
            return Id;
        }

        protected override void EncodeId(Buffer _buffer)
        {
            _buffer.WriteVaruint(Id);
        }

        protected override void DecodeId(Buffer _buffer)
        {
            _buffer.ReadVaruint();
        }

        protected override void EncodeImpl(Buffer _buffer)
        {
            _buffer.WriteBigEndianFloat(health);
            _buffer.WriteVaruint(hunger);
            _buffer.WriteBigEndianFloat(saturation);
        }

        protected override void DecodeImpl(Buffer _buffer)
        {



        }

        public static UpdateHealth FromBuffer(byte[] buffer)
        {
            var ret = new UpdateHealth();
            ret.decode(buffer);
            return ret;
        }

    }

    public class ScoreboardObjective : Packet
    {

        public const uint Id = 63;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        // mode
        public const byte Create = 0;
        public const byte Remove = 1;
        public const byte Update = 2;

        // type
        public const string Numeric = "integer";
        public const string Graphic = "hearts";

        public string name;
        public byte mode;
        public string @value;
        public string type;

        public ScoreboardObjective() {}

        public ScoreboardObjective(string name, byte mode, string @value, string type)
        {
            this.name = name;
            this.mode = mode;
            this.@value = @value;
            this.type = type;
        }

        public override int GetId()
        {
            return Id;
        }

        protected override void EncodeId(Buffer _buffer)
        {
            _buffer.WriteVaruint(Id);
        }

        protected override void DecodeId(Buffer _buffer)
        {
            _buffer.ReadVaruint();
        }

        protected override void EncodeImpl(Buffer _buffer)
        {
            _buffer.WriteVaruint(Encoding.UTF8.GetByteCount(name)); _buffer.WriteString(name);
            _buffer.WriteUbyte(mode);
            if(mode!=1){ _buffer.WriteVaruint(Encoding.UTF8.GetByteCount(@value)); _buffer.WriteString(@value); }
            if(mode!=1){ _buffer.WriteVaruint(Encoding.UTF8.GetByteCount(type)); _buffer.WriteString(type); }
        }

        protected override void DecodeImpl(Buffer _buffer)
        {


            if(mode!=1){  }
            if(mode!=1){  }
        }

        public static ScoreboardObjective FromBuffer(byte[] buffer)
        {
            var ret = new ScoreboardObjective();
            ret.decode(buffer);
            return ret;
        }

    }

    public class SetPassengers : Packet
    {

        public const uint Id = 64;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        public uint entityId;
        public uint[] passengers;

        public SetPassengers() {}

        public SetPassengers(uint entityId, uint[] passengers)
        {
            this.entityId = entityId;
            this.passengers = passengers;
        }

        public override int GetId()
        {
            return Id;
        }

        protected override void EncodeId(Buffer _buffer)
        {
            _buffer.WriteVaruint(Id);
        }

        protected override void DecodeId(Buffer _buffer)
        {
            _buffer.ReadVaruint();
        }

        protected override void EncodeImpl(Buffer _buffer)
        {
            _buffer.WriteVaruint(entityId);
            _buffer.WriteVaruint(passengers.Length); foreach(uint passengersChild in passengers){ _buffer.WriteVaruint(passengersChild); }
        }

        protected override void DecodeImpl(Buffer _buffer)
        {


        }

        public static SetPassengers FromBuffer(byte[] buffer)
        {
            var ret = new SetPassengers();
            ret.decode(buffer);
            return ret;
        }

    }

    public class Teams : Packet
    {

        public const uint Id = 65;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        public string name;
        public byte mode;

        public Teams() {}

        public Teams(string name, byte mode)
        {
            this.name = name;
            this.mode = mode;
        }

        public override int GetId()
        {
            return Id;
        }

        protected override void EncodeId(Buffer _buffer)
        {
            _buffer.WriteVaruint(Id);
        }

        protected override void DecodeId(Buffer _buffer)
        {
            _buffer.ReadVaruint();
        }

        protected override void EncodeImpl(Buffer _buffer)
        {
            _buffer.WriteVaruint(Encoding.UTF8.GetByteCount(name)); _buffer.WriteString(name);
            _buffer.WriteUbyte(mode);
        }

        protected override void DecodeImpl(Buffer _buffer)
        {


        }

        public static Teams FromBuffer(byte[] buffer)
        {
            var ret = new Teams();
            ret.decode(buffer);
            return ret;
        }

    }

    public class UpdateScore : Packet
    {

        public const uint Id = 66;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        // action
        public const byte Update = 0;
        public const byte Remove = 1;

        public string scoreName;
        public byte action;
        public string objectiveName;
        public uint @value;

        public UpdateScore() {}

        public UpdateScore(string scoreName, byte action, string objectiveName, uint @value)
        {
            this.scoreName = scoreName;
            this.action = action;
            this.objectiveName = objectiveName;
            this.@value = @value;
        }

        public override int GetId()
        {
            return Id;
        }

        protected override void EncodeId(Buffer _buffer)
        {
            _buffer.WriteVaruint(Id);
        }

        protected override void DecodeId(Buffer _buffer)
        {
            _buffer.ReadVaruint();
        }

        protected override void EncodeImpl(Buffer _buffer)
        {
            _buffer.WriteVaruint(Encoding.UTF8.GetByteCount(scoreName)); _buffer.WriteString(scoreName);
            _buffer.WriteUbyte(action);
            _buffer.WriteVaruint(Encoding.UTF8.GetByteCount(objectiveName)); _buffer.WriteString(objectiveName);
            if(action==0){ _buffer.WriteVaruint(@value); }
        }

        protected override void DecodeImpl(Buffer _buffer)
        {



            if(action==0){  }
        }

        public static UpdateScore FromBuffer(byte[] buffer)
        {
            var ret = new UpdateScore();
            ret.decode(buffer);
            return ret;
        }

    }

    public class SpawnPosition : Packet
    {

        public const uint Id = 67;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        public ulong position;

        public SpawnPosition() {}

        public SpawnPosition(ulong position)
        {
            this.position = position;
        }

        public override int GetId()
        {
            return Id;
        }

        protected override void EncodeId(Buffer _buffer)
        {
            _buffer.WriteVaruint(Id);
        }

        protected override void DecodeId(Buffer _buffer)
        {
            _buffer.ReadVaruint();
        }

        protected override void EncodeImpl(Buffer _buffer)
        {
            _buffer.WriteBigEndianUlong(position);
        }

        protected override void DecodeImpl(Buffer _buffer)
        {

        }

        public static SpawnPosition FromBuffer(byte[] buffer)
        {
            var ret = new SpawnPosition();
            ret.decode(buffer);
            return ret;
        }

    }

    public class TimeUpdate : Packet
    {

        public const uint Id = 68;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        public ulong worldAge;
        public long time;

        public TimeUpdate() {}

        public TimeUpdate(ulong worldAge, long time)
        {
            this.worldAge = worldAge;
            this.time = time;
        }

        public override int GetId()
        {
            return Id;
        }

        protected override void EncodeId(Buffer _buffer)
        {
            _buffer.WriteVaruint(Id);
        }

        protected override void DecodeId(Buffer _buffer)
        {
            _buffer.ReadVaruint();
        }

        protected override void EncodeImpl(Buffer _buffer)
        {
            _buffer.WriteBigEndianUlong(worldAge);
            _buffer.WriteBigEndianLong(time);
        }

        protected override void DecodeImpl(Buffer _buffer)
        {


        }

        public static TimeUpdate FromBuffer(byte[] buffer)
        {
            var ret = new TimeUpdate();
            ret.decode(buffer);
            return ret;
        }

    }

    public class Title : Packet
    {

        public const uint Id = 69;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        public uint action;

        public Title() {}

        public Title(uint action)
        {
            this.action = action;
        }

        public override int GetId()
        {
            return Id;
        }

        protected override void EncodeId(Buffer _buffer)
        {
            _buffer.WriteVaruint(Id);
        }

        protected override void DecodeId(Buffer _buffer)
        {
            _buffer.ReadVaruint();
        }

        protected override void EncodeImpl(Buffer _buffer)
        {
            _buffer.WriteVaruint(action);
        }

        protected override void DecodeImpl(Buffer _buffer)
        {

        }

        public static Title FromBuffer(byte[] buffer)
        {
            var ret = new Title();
            ret.decode(buffer);
            return ret;
        }

    }

    public class UpdateSign : Packet
    {

        public const uint Id = 70;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        public ulong position;
        public string[4] lines;

        public UpdateSign() {}

        public UpdateSign(ulong position, string[4] lines)
        {
            this.position = position;
            this.lines = lines;
        }

        public override int GetId()
        {
            return Id;
        }

        protected override void EncodeId(Buffer _buffer)
        {
            _buffer.WriteVaruint(Id);
        }

        protected override void DecodeId(Buffer _buffer)
        {
            _buffer.ReadVaruint();
        }

        protected override void EncodeImpl(Buffer _buffer)
        {
            _buffer.WriteBigEndianUlong(position);
            foreach(string linesChild in lines){ _buffer.WriteVaruint(Encoding.UTF8.GetByteCount(linesChild)); _buffer.WriteString(linesChild); }
        }

        protected override void DecodeImpl(Buffer _buffer)
        {


        }

        public static UpdateSign FromBuffer(byte[] buffer)
        {
            var ret = new UpdateSign();
            ret.decode(buffer);
            return ret;
        }

    }

    public class SoundEffect : Packet
    {

        public const uint Id = 71;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        public uint soundId;
        public uint category;
        public Tuple<int, int, int> position;
        public float volume;
        public byte pitch;

        public SoundEffect() {}

        public SoundEffect(uint soundId, uint category, Tuple<int, int, int> position, float volume, byte pitch)
        {
            this.soundId = soundId;
            this.category = category;
            this.position = position;
            this.volume = volume;
            this.pitch = pitch;
        }

        public override int GetId()
        {
            return Id;
        }

        protected override void EncodeId(Buffer _buffer)
        {
            _buffer.WriteVaruint(Id);
        }

        protected override void DecodeId(Buffer _buffer)
        {
            _buffer.ReadVaruint();
        }

        protected override void EncodeImpl(Buffer _buffer)
        {
            _buffer.WriteVaruint(soundId);
            _buffer.WriteVaruint(category);
            _buffer.WriteBigEndianInt(position[0]); _buffer.WriteBigEndianInt(position[1]); _buffer.WriteBigEndianInt(position[2]);
            _buffer.WriteBigEndianFloat(volume);
            _buffer.WriteUbyte(pitch);
        }

        protected override void DecodeImpl(Buffer _buffer)
        {





        }

        public static SoundEffect FromBuffer(byte[] buffer)
        {
            var ret = new SoundEffect();
            ret.decode(buffer);
            return ret;
        }

    }

    public class PlayerListHeaderAndFooter : Packet
    {

        public const uint Id = 72;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        public string header;
        public string footer;

        public PlayerListHeaderAndFooter() {}

        public PlayerListHeaderAndFooter(string header, string footer)
        {
            this.header = header;
            this.footer = footer;
        }

        public override int GetId()
        {
            return Id;
        }

        protected override void EncodeId(Buffer _buffer)
        {
            _buffer.WriteVaruint(Id);
        }

        protected override void DecodeId(Buffer _buffer)
        {
            _buffer.ReadVaruint();
        }

        protected override void EncodeImpl(Buffer _buffer)
        {
            _buffer.WriteVaruint(Encoding.UTF8.GetByteCount(header)); _buffer.WriteString(header);
            _buffer.WriteVaruint(Encoding.UTF8.GetByteCount(footer)); _buffer.WriteString(footer);
        }

        protected override void DecodeImpl(Buffer _buffer)
        {


        }

        public static PlayerListHeaderAndFooter FromBuffer(byte[] buffer)
        {
            var ret = new PlayerListHeaderAndFooter();
            ret.decode(buffer);
            return ret;
        }

    }

    public class CollectItem : Packet
    {

        public const uint Id = 73;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        public uint collected;
        public uint collector;

        public CollectItem() {}

        public CollectItem(uint collected, uint collector)
        {
            this.collected = collected;
            this.collector = collector;
        }

        public override int GetId()
        {
            return Id;
        }

        protected override void EncodeId(Buffer _buffer)
        {
            _buffer.WriteVaruint(Id);
        }

        protected override void DecodeId(Buffer _buffer)
        {
            _buffer.ReadVaruint();
        }

        protected override void EncodeImpl(Buffer _buffer)
        {
            _buffer.WriteVaruint(collected);
            _buffer.WriteVaruint(collector);
        }

        protected override void DecodeImpl(Buffer _buffer)
        {


        }

        public static CollectItem FromBuffer(byte[] buffer)
        {
            var ret = new CollectItem();
            ret.decode(buffer);
            return ret;
        }

    }

    public class EntityTeleport : Packet
    {

        public const uint Id = 74;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        public uint entityId;
        public Tuple<double, double, double> position;
        public byte yaw;
        public byte pitch;
        public bool onGround;

        public EntityTeleport() {}

        public EntityTeleport(uint entityId, Tuple<double, double, double> position, byte yaw, byte pitch, bool onGround)
        {
            this.entityId = entityId;
            this.position = position;
            this.yaw = yaw;
            this.pitch = pitch;
            this.onGround = onGround;
        }

        public override int GetId()
        {
            return Id;
        }

        protected override void EncodeId(Buffer _buffer)
        {
            _buffer.WriteVaruint(Id);
        }

        protected override void DecodeId(Buffer _buffer)
        {
            _buffer.ReadVaruint();
        }

        protected override void EncodeImpl(Buffer _buffer)
        {
            _buffer.WriteVaruint(entityId);
            _buffer.WriteBigEndianDouble(position[0]); _buffer.WriteBigEndianDouble(position[1]); _buffer.WriteBigEndianDouble(position[2]);
            _buffer.WriteUbyte(yaw);
            _buffer.WriteUbyte(pitch);
            _buffer.WriteBool(onGround);
        }

        protected override void DecodeImpl(Buffer _buffer)
        {





        }

        public static EntityTeleport FromBuffer(byte[] buffer)
        {
            var ret = new EntityTeleport();
            ret.decode(buffer);
            return ret;
        }

    }

    public class EntityProperties : Packet
    {

        public const uint Id = 75;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        public uint entityId;
        public Types.Attribute[] attributes;

        public EntityProperties() {}

        public EntityProperties(uint entityId, Types.Attribute[] attributes)
        {
            this.entityId = entityId;
            this.attributes = attributes;
        }

        public override int GetId()
        {
            return Id;
        }

        protected override void EncodeId(Buffer _buffer)
        {
            _buffer.WriteVaruint(Id);
        }

        protected override void DecodeId(Buffer _buffer)
        {
            _buffer.ReadVaruint();
        }

        protected override void EncodeImpl(Buffer _buffer)
        {
            _buffer.WriteVaruint(entityId);
            _buffer.WriteBigEndianUint(attributes.Length); foreach(Types.Attribute attributesChild in attributes){ attributesChild.EncodeBody(_buffer); }
        }

        protected override void DecodeImpl(Buffer _buffer)
        {


        }

        public static EntityProperties FromBuffer(byte[] buffer)
        {
            var ret = new EntityProperties();
            ret.decode(buffer);
            return ret;
        }

    }

    public class EntityEffect : Packet
    {

        public const uint Id = 76;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        public uint entityId;
        public byte effectId;
        public byte amplifier;
        public uint duration;
        public bool hideParticles;

        public EntityEffect() {}

        public EntityEffect(uint entityId, byte effectId, byte amplifier, uint duration, bool hideParticles)
        {
            this.entityId = entityId;
            this.effectId = effectId;
            this.amplifier = amplifier;
            this.duration = duration;
            this.hideParticles = hideParticles;
        }

        public override int GetId()
        {
            return Id;
        }

        protected override void EncodeId(Buffer _buffer)
        {
            _buffer.WriteVaruint(Id);
        }

        protected override void DecodeId(Buffer _buffer)
        {
            _buffer.ReadVaruint();
        }

        protected override void EncodeImpl(Buffer _buffer)
        {
            _buffer.WriteVaruint(entityId);
            _buffer.WriteUbyte(effectId);
            _buffer.WriteUbyte(amplifier);
            _buffer.WriteVaruint(duration);
            _buffer.WriteBool(hideParticles);
        }

        protected override void DecodeImpl(Buffer _buffer)
        {





        }

        public static EntityEffect FromBuffer(byte[] buffer)
        {
            var ret = new EntityEffect();
            ret.decode(buffer);
            return ret;
        }

    }

}
