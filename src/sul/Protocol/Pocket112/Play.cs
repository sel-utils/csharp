/*
 * This file was automatically generated by sel-utils and
 * released under the MIT License.
 * 
 * License: https://github.com/sel-project/sel-utils/blob/master/LICENSE
 * Repository: https://github.com/sel-project/sel-utils
 * Generated from https://github.com/sel-project/sel-utils/blob/master/xml/protocol/pocket112.xml
 */
using Types = sul.Pocket112.Types;

using Utils.Buffer;
using Utils.Packet;

namespace sul.Pocket112
{

    public class Login : Packet
    {

        public const byte Id = 1;

        public const bool Clientbound = false;
        public const bool Serverbound = true;

        // version
        public const byte Vanilla = 0;
        public const byte Education = 1;

        public uint protocol = 112;
        public byte version;
        public Types.LoginBody body;

        public Login() {}

        public Login(uint protocol, byte version, Types.LoginBody body)
        {
            this.protocol = protocol;
            this.version = version;
            this.body = body;
        }

        public override int GetId()
        {
            return Id;
        }

        protected override void EncodeId(Buffer _buffer)
        {
            _buffer.WriteUbyte(Id);
        }

        protected override void DecodeId(Buffer _buffer)
        {
            _buffer.ReadUbyte();
        }

        protected override void EncodeImpl(Buffer _buffer)
        {
            _buffer.WriteBigEndianUint(protocol);
            _buffer.WriteUbyte(version);
            body.EncodeBody(_buffer);
        }

        protected override void DecodeImpl(Buffer _buffer)
        {



        }

        public static Login FromBuffer(byte[] buffer)
        {
            var ret = new Login();
            ret.decode(buffer);
            return ret;
        }

    }

    public class PlayStatus : Packet
    {

        public const byte Id = 2;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        // status
        public const uint Ok = 0;
        public const uint OutdatedClient = 1;
        public const uint OutdatedServer = 2;
        public const uint Spawned = 3;
        public const uint InvalidTenant = 4;
        public const uint EditionMismatchEduToVanilla = 5;
        public const uint EditionMismatchVanillaToEdu = 6;

        public uint status;

        public PlayStatus() {}

        public PlayStatus(uint status)
        {
            this.status = status;
        }

        public override int GetId()
        {
            return Id;
        }

        protected override void EncodeId(Buffer _buffer)
        {
            _buffer.WriteUbyte(Id);
        }

        protected override void DecodeId(Buffer _buffer)
        {
            _buffer.ReadUbyte();
        }

        protected override void EncodeImpl(Buffer _buffer)
        {
            _buffer.WriteBigEndianUint(status);
        }

        protected override void DecodeImpl(Buffer _buffer)
        {

        }

        public static PlayStatus FromBuffer(byte[] buffer)
        {
            var ret = new PlayStatus();
            ret.decode(buffer);
            return ret;
        }

    }

    public class ServerToClientHandshake : Packet
    {

        public const byte Id = 3;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        public string serverPublicKey;
        public byte[] token;

        public ServerToClientHandshake() {}

        public ServerToClientHandshake(string serverPublicKey, byte[] token)
        {
            this.serverPublicKey = serverPublicKey;
            this.token = token;
        }

        public override int GetId()
        {
            return Id;
        }

        protected override void EncodeId(Buffer _buffer)
        {
            _buffer.WriteUbyte(Id);
        }

        protected override void DecodeId(Buffer _buffer)
        {
            _buffer.ReadUbyte();
        }

        protected override void EncodeImpl(Buffer _buffer)
        {
            _buffer.WriteVaruint(Encoding.UTF8.GetByteCount(serverPublicKey)); _buffer.WriteString(serverPublicKey);
            _buffer.WriteVaruint(token.Length); _buffer.WriteBytes(token);
        }

        protected override void DecodeImpl(Buffer _buffer)
        {


        }

        public static ServerToClientHandshake FromBuffer(byte[] buffer)
        {
            var ret = new ServerToClientHandshake();
            ret.decode(buffer);
            return ret;
        }

    }

    public class ClientToServerHandshake : Packet
    {

        public const byte Id = 4;

        public const bool Clientbound = false;
        public const bool Serverbound = true;



        public ClientToServerHandshake() {}

        public override int GetId()
        {
            return Id;
        }

        protected override void EncodeId(Buffer _buffer)
        {
            _buffer.WriteUbyte(Id);
        }

        protected override void DecodeId(Buffer _buffer)
        {
            _buffer.ReadUbyte();
        }

        protected override void EncodeImpl(Buffer _buffer)
        {

        }

        protected override void DecodeImpl(Buffer _buffer)
        {

        }

        public static ClientToServerHandshake FromBuffer(byte[] buffer)
        {
            var ret = new ClientToServerHandshake();
            ret.decode(buffer);
            return ret;
        }

    }

    public class Disconnect : Packet
    {

        public const byte Id = 5;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        public bool hideDisconnectionScreen;
        public string message;

        public Disconnect() {}

        public Disconnect(bool hideDisconnectionScreen, string message)
        {
            this.hideDisconnectionScreen = hideDisconnectionScreen;
            this.message = message;
        }

        public override int GetId()
        {
            return Id;
        }

        protected override void EncodeId(Buffer _buffer)
        {
            _buffer.WriteUbyte(Id);
        }

        protected override void DecodeId(Buffer _buffer)
        {
            _buffer.ReadUbyte();
        }

        protected override void EncodeImpl(Buffer _buffer)
        {
            _buffer.WriteBool(hideDisconnectionScreen);
            if(hideDisconnectionScreen==false){ _buffer.WriteVaruint(Encoding.UTF8.GetByteCount(message)); _buffer.WriteString(message); }
        }

        protected override void DecodeImpl(Buffer _buffer)
        {

            if(hideDisconnectionScreen==false){  }
        }

        public static Disconnect FromBuffer(byte[] buffer)
        {
            var ret = new Disconnect();
            ret.decode(buffer);
            return ret;
        }

    }

    public class ResourcePacksInfo : Packet
    {

        public const byte Id = 6;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        public bool mustAccept;
        public Types.PackWithSize[] behaviourPacks;
        public Types.PackWithSize[] resourcePacks;

        public ResourcePacksInfo() {}

        public ResourcePacksInfo(bool mustAccept, Types.PackWithSize[] behaviourPacks, Types.PackWithSize[] resourcePacks)
        {
            this.mustAccept = mustAccept;
            this.behaviourPacks = behaviourPacks;
            this.resourcePacks = resourcePacks;
        }

        public override int GetId()
        {
            return Id;
        }

        protected override void EncodeId(Buffer _buffer)
        {
            _buffer.WriteUbyte(Id);
        }

        protected override void DecodeId(Buffer _buffer)
        {
            _buffer.ReadUbyte();
        }

        protected override void EncodeImpl(Buffer _buffer)
        {
            _buffer.WriteBool(mustAccept);
            _buffer.WriteLittleEndianUshort(behaviourPacks.Length); foreach(Types.PackWithSize behaviourPacksChild in behaviourPacks){ behaviourPacksChild.EncodeBody(_buffer); }
            _buffer.WriteLittleEndianUshort(resourcePacks.Length); foreach(Types.PackWithSize resourcePacksChild in resourcePacks){ resourcePacksChild.EncodeBody(_buffer); }
        }

        protected override void DecodeImpl(Buffer _buffer)
        {



        }

        public static ResourcePacksInfo FromBuffer(byte[] buffer)
        {
            var ret = new ResourcePacksInfo();
            ret.decode(buffer);
            return ret;
        }

    }

    public class ResourcePacksStackPacket : Packet
    {

        public const byte Id = 7;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        public bool mustAccept;
        public Types.Pack[] behaviourPacks;
        public Types.Pack[] resourcePacks;

        public ResourcePacksStackPacket() {}

        public ResourcePacksStackPacket(bool mustAccept, Types.Pack[] behaviourPacks, Types.Pack[] resourcePacks)
        {
            this.mustAccept = mustAccept;
            this.behaviourPacks = behaviourPacks;
            this.resourcePacks = resourcePacks;
        }

        public override int GetId()
        {
            return Id;
        }

        protected override void EncodeId(Buffer _buffer)
        {
            _buffer.WriteUbyte(Id);
        }

        protected override void DecodeId(Buffer _buffer)
        {
            _buffer.ReadUbyte();
        }

        protected override void EncodeImpl(Buffer _buffer)
        {
            _buffer.WriteBool(mustAccept);
            _buffer.WriteVaruint(behaviourPacks.Length); foreach(Types.Pack behaviourPacksChild in behaviourPacks){ behaviourPacksChild.EncodeBody(_buffer); }
            _buffer.WriteVaruint(resourcePacks.Length); foreach(Types.Pack resourcePacksChild in resourcePacks){ resourcePacksChild.EncodeBody(_buffer); }
        }

        protected override void DecodeImpl(Buffer _buffer)
        {



        }

        public static ResourcePacksStackPacket FromBuffer(byte[] buffer)
        {
            var ret = new ResourcePacksStackPacket();
            ret.decode(buffer);
            return ret;
        }

    }

    public class ResourcePackClientResponse : Packet
    {

        public const byte Id = 8;

        public const bool Clientbound = false;
        public const bool Serverbound = true;

        // status
        public const byte Refused = 1;
        public const byte SendPacks = 2;
        public const byte HaveAllPacks = 3;
        public const byte Completed = 4;

        public byte status;
        public string[] packIds;

        public ResourcePackClientResponse() {}

        public ResourcePackClientResponse(byte status, string[] packIds)
        {
            this.status = status;
            this.packIds = packIds;
        }

        public override int GetId()
        {
            return Id;
        }

        protected override void EncodeId(Buffer _buffer)
        {
            _buffer.WriteUbyte(Id);
        }

        protected override void DecodeId(Buffer _buffer)
        {
            _buffer.ReadUbyte();
        }

        protected override void EncodeImpl(Buffer _buffer)
        {
            _buffer.WriteUbyte(status);
            _buffer.WriteLittleEndianUshort(packIds.Length); foreach(string packIdsChild in packIds){ _buffer.WriteLittleEndianVaruint(Encoding.UTF8.GetByteCount(packIdsChild)); _buffer.WriteLittleEndianString(packIdsChild); }
        }

        protected override void DecodeImpl(Buffer _buffer)
        {


        }

        public static ResourcePackClientResponse FromBuffer(byte[] buffer)
        {
            var ret = new ResourcePackClientResponse();
            ret.decode(buffer);
            return ret;
        }

    }

    public class Text : Packet
    {

        public const byte Id = 9;

        public const bool Clientbound = true;
        public const bool Serverbound = true;

        public byte type;

        public Text() {}

        public Text(byte type)
        {
            this.type = type;
        }

        public override int GetId()
        {
            return Id;
        }

        protected override void EncodeId(Buffer _buffer)
        {
            _buffer.WriteUbyte(Id);
        }

        protected override void DecodeId(Buffer _buffer)
        {
            _buffer.ReadUbyte();
        }

        protected override void EncodeImpl(Buffer _buffer)
        {
            _buffer.WriteUbyte(type);
        }

        protected override void DecodeImpl(Buffer _buffer)
        {

        }

        public static Text FromBuffer(byte[] buffer)
        {
            var ret = new Text();
            ret.decode(buffer);
            return ret;
        }

    }

    public class SetTime : Packet
    {

        public const byte Id = 10;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        public int time;

        public SetTime() {}

        public SetTime(int time)
        {
            this.time = time;
        }

        public override int GetId()
        {
            return Id;
        }

        protected override void EncodeId(Buffer _buffer)
        {
            _buffer.WriteUbyte(Id);
        }

        protected override void DecodeId(Buffer _buffer)
        {
            _buffer.ReadUbyte();
        }

        protected override void EncodeImpl(Buffer _buffer)
        {
            _buffer.WriteVarint(time);
        }

        protected override void DecodeImpl(Buffer _buffer)
        {

        }

        public static SetTime FromBuffer(byte[] buffer)
        {
            var ret = new SetTime();
            ret.decode(buffer);
            return ret;
        }

    }

    public class StartGame : Packet
    {

        public const byte Id = 11;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        // gamemode
        public const int Survival = 0;
        public const int Creative = 1;
        public const int Adventure = 2;

        // dimension
        public const int Overworld = 0;
        public const int Nether = 1;
        public const int End = 2;

        // generator
        public const int Old = 0;
        public const int Infinite = 1;
        public const int Flat = 2;

        // difficulty
        public const int Peaceful = 0;
        public const int Easy = 1;
        public const int Normal = 2;
        public const int Hard = 3;

        // version
        public const byte Vanilla = 0;
        public const byte Education = 1;

        public long entityId;
        public long runtimeId;
        public int gamemode;
        public Tuple<float, float, float> position;
        public float yaw;
        public float pitch;
        public int seed;
        public int dimension = 0;
        public int generator = 1;
        public int worldGamemode;
        public int difficulty;
        public Tuple<int, int, int> spawnPosition;
        public bool loadedInCreative;
        public int time;
        public byte version;
        public float rainLevel;
        public float lightingLevel;
        public bool commandsEnabled;
        public bool textureRequired;
        public Types.Rule[] gameRules;
        public string levelId;
        public string worldName;
        public string premiumWorldTemplate;

        public StartGame() {}

        public StartGame(long entityId, long runtimeId, int gamemode, Tuple<float, float, float> position, float yaw, float pitch, int seed, int dimension, int generator, int worldGamemode, int difficulty, Tuple<int, int, int> spawnPosition, bool loadedInCreative, int time, byte version, float rainLevel, float lightingLevel, bool commandsEnabled, bool textureRequired, Types.Rule[] gameRules, string levelId, string worldName, string premiumWorldTemplate)
        {
            this.entityId = entityId;
            this.runtimeId = runtimeId;
            this.gamemode = gamemode;
            this.position = position;
            this.yaw = yaw;
            this.pitch = pitch;
            this.seed = seed;
            this.dimension = dimension;
            this.generator = generator;
            this.worldGamemode = worldGamemode;
            this.difficulty = difficulty;
            this.spawnPosition = spawnPosition;
            this.loadedInCreative = loadedInCreative;
            this.time = time;
            this.version = version;
            this.rainLevel = rainLevel;
            this.lightingLevel = lightingLevel;
            this.commandsEnabled = commandsEnabled;
            this.textureRequired = textureRequired;
            this.gameRules = gameRules;
            this.levelId = levelId;
            this.worldName = worldName;
            this.premiumWorldTemplate = premiumWorldTemplate;
        }

        public override int GetId()
        {
            return Id;
        }

        protected override void EncodeId(Buffer _buffer)
        {
            _buffer.WriteUbyte(Id);
        }

        protected override void DecodeId(Buffer _buffer)
        {
            _buffer.ReadUbyte();
        }

        protected override void EncodeImpl(Buffer _buffer)
        {
            _buffer.WriteVarlong(entityId);
            _buffer.WriteVarlong(runtimeId);
            _buffer.WriteVarint(gamemode);
            _buffer.WriteLittleEndianFloat(position[0]); _buffer.WriteLittleEndianFloat(position[1]); _buffer.WriteLittleEndianFloat(position[2]);
            _buffer.WriteLittleEndianFloat(yaw);
            _buffer.WriteLittleEndianFloat(pitch);
            _buffer.WriteVarint(seed);
            _buffer.WriteVarint(dimension);
            _buffer.WriteVarint(generator);
            _buffer.WriteVarint(worldGamemode);
            _buffer.WriteVarint(difficulty);
            _buffer.WriteVarint(spawnPosition[0]); _buffer.WriteVarint(spawnPosition[1]); _buffer.WriteVarint(spawnPosition[2]);
            _buffer.WriteBool(loadedInCreative);
            _buffer.WriteVarint(time);
            _buffer.WriteUbyte(version);
            _buffer.WriteLittleEndianFloat(rainLevel);
            _buffer.WriteLittleEndianFloat(lightingLevel);
            _buffer.WriteBool(commandsEnabled);
            _buffer.WriteBool(textureRequired);
            _buffer.WriteVaruint(gameRules.Length); foreach(Types.Rule gameRulesChild in gameRules){ gameRulesChild.EncodeBody(_buffer); }
            _buffer.WriteVaruint(Encoding.UTF8.GetByteCount(levelId)); _buffer.WriteString(levelId);
            _buffer.WriteVaruint(Encoding.UTF8.GetByteCount(worldName)); _buffer.WriteString(worldName);
            _buffer.WriteVaruint(Encoding.UTF8.GetByteCount(premiumWorldTemplate)); _buffer.WriteString(premiumWorldTemplate);
        }

        protected override void DecodeImpl(Buffer _buffer)
        {























        }

        public static StartGame FromBuffer(byte[] buffer)
        {
            var ret = new StartGame();
            ret.decode(buffer);
            return ret;
        }

    }

    public class AddPlayer : Packet
    {

        public const byte Id = 12;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        public Types.McpeUuid uuid;
        public string username;
        public long entityId;
        public long runtimeId;
        public Tuple<float, float, float> position;
        public Tuple<float, float, float> motion;
        public float pitch;
        public float headYaw;
        public float yaw;
        public Types.Slot heldItem;
        public sul.Metadata.Pocket112.Metadata metadata;

        public AddPlayer() {}

        public AddPlayer(Types.McpeUuid uuid, string username, long entityId, long runtimeId, Tuple<float, float, float> position, Tuple<float, float, float> motion, float pitch, float headYaw, float yaw, Types.Slot heldItem, sul.Metadata.Pocket112.Metadata metadata)
        {
            this.uuid = uuid;
            this.username = username;
            this.entityId = entityId;
            this.runtimeId = runtimeId;
            this.position = position;
            this.motion = motion;
            this.pitch = pitch;
            this.headYaw = headYaw;
            this.yaw = yaw;
            this.heldItem = heldItem;
            this.metadata = metadata;
        }

        public override int GetId()
        {
            return Id;
        }

        protected override void EncodeId(Buffer _buffer)
        {
            _buffer.WriteUbyte(Id);
        }

        protected override void DecodeId(Buffer _buffer)
        {
            _buffer.ReadUbyte();
        }

        protected override void EncodeImpl(Buffer _buffer)
        {
            uuid.EncodeBody(_buffer);
            _buffer.WriteVaruint(Encoding.UTF8.GetByteCount(username)); _buffer.WriteString(username);
            _buffer.WriteVarlong(entityId);
            _buffer.WriteVarlong(runtimeId);
            _buffer.WriteLittleEndianFloat(position[0]); _buffer.WriteLittleEndianFloat(position[1]); _buffer.WriteLittleEndianFloat(position[2]);
            _buffer.WriteLittleEndianFloat(motion[0]); _buffer.WriteLittleEndianFloat(motion[1]); _buffer.WriteLittleEndianFloat(motion[2]);
            _buffer.WriteLittleEndianFloat(pitch);
            _buffer.WriteLittleEndianFloat(headYaw);
            _buffer.WriteLittleEndianFloat(yaw);
            heldItem.EncodeBody(_buffer);
            metadata.EncodeBody(_buffer);
        }

        protected override void DecodeImpl(Buffer _buffer)
        {











        }

        public static AddPlayer FromBuffer(byte[] buffer)
        {
            var ret = new AddPlayer();
            ret.decode(buffer);
            return ret;
        }

    }

    public class AddEntity : Packet
    {

        public const byte Id = 13;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        public long entityId;
        public long runtimeId;
        public uint type;
        public Tuple<float, float, float> position;
        public Tuple<float, float, float> motion;
        public float pitch;
        public float yaw;
        public Types.Attribute[] attributes;
        public sul.Metadata.Pocket112.Metadata metadata;
        public Types.Link[] links;

        public AddEntity() {}

        public AddEntity(long entityId, long runtimeId, uint type, Tuple<float, float, float> position, Tuple<float, float, float> motion, float pitch, float yaw, Types.Attribute[] attributes, sul.Metadata.Pocket112.Metadata metadata, Types.Link[] links)
        {
            this.entityId = entityId;
            this.runtimeId = runtimeId;
            this.type = type;
            this.position = position;
            this.motion = motion;
            this.pitch = pitch;
            this.yaw = yaw;
            this.attributes = attributes;
            this.metadata = metadata;
            this.links = links;
        }

        public override int GetId()
        {
            return Id;
        }

        protected override void EncodeId(Buffer _buffer)
        {
            _buffer.WriteUbyte(Id);
        }

        protected override void DecodeId(Buffer _buffer)
        {
            _buffer.ReadUbyte();
        }

        protected override void EncodeImpl(Buffer _buffer)
        {
            _buffer.WriteVarlong(entityId);
            _buffer.WriteVarlong(runtimeId);
            _buffer.WriteVaruint(type);
            _buffer.WriteLittleEndianFloat(position[0]); _buffer.WriteLittleEndianFloat(position[1]); _buffer.WriteLittleEndianFloat(position[2]);
            _buffer.WriteLittleEndianFloat(motion[0]); _buffer.WriteLittleEndianFloat(motion[1]); _buffer.WriteLittleEndianFloat(motion[2]);
            _buffer.WriteLittleEndianFloat(pitch);
            _buffer.WriteLittleEndianFloat(yaw);
            _buffer.WriteVaruint(attributes.Length); foreach(Types.Attribute attributesChild in attributes){ attributesChild.EncodeBody(_buffer); }
            metadata.EncodeBody(_buffer);
            _buffer.WriteVaruint(links.Length); foreach(Types.Link linksChild in links){ linksChild.EncodeBody(_buffer); }
        }

        protected override void DecodeImpl(Buffer _buffer)
        {










        }

        public static AddEntity FromBuffer(byte[] buffer)
        {
            var ret = new AddEntity();
            ret.decode(buffer);
            return ret;
        }

    }

    public class RemoveEntity : Packet
    {

        public const byte Id = 14;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        public long entityId;

        public RemoveEntity() {}

        public RemoveEntity(long entityId)
        {
            this.entityId = entityId;
        }

        public override int GetId()
        {
            return Id;
        }

        protected override void EncodeId(Buffer _buffer)
        {
            _buffer.WriteUbyte(Id);
        }

        protected override void DecodeId(Buffer _buffer)
        {
            _buffer.ReadUbyte();
        }

        protected override void EncodeImpl(Buffer _buffer)
        {
            _buffer.WriteVarlong(entityId);
        }

        protected override void DecodeImpl(Buffer _buffer)
        {

        }

        public static RemoveEntity FromBuffer(byte[] buffer)
        {
            var ret = new RemoveEntity();
            ret.decode(buffer);
            return ret;
        }

    }

    public class AddItemEntity : Packet
    {

        public const byte Id = 15;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        public long entityId;
        public long runtimeId;
        public Types.Slot item;
        public Tuple<float, float, float> position;
        public Tuple<float, float, float> motion;
        public sul.Metadata.Pocket112.Metadata metadata;

        public AddItemEntity() {}

        public AddItemEntity(long entityId, long runtimeId, Types.Slot item, Tuple<float, float, float> position, Tuple<float, float, float> motion, sul.Metadata.Pocket112.Metadata metadata)
        {
            this.entityId = entityId;
            this.runtimeId = runtimeId;
            this.item = item;
            this.position = position;
            this.motion = motion;
            this.metadata = metadata;
        }

        public override int GetId()
        {
            return Id;
        }

        protected override void EncodeId(Buffer _buffer)
        {
            _buffer.WriteUbyte(Id);
        }

        protected override void DecodeId(Buffer _buffer)
        {
            _buffer.ReadUbyte();
        }

        protected override void EncodeImpl(Buffer _buffer)
        {
            _buffer.WriteVarlong(entityId);
            _buffer.WriteVarlong(runtimeId);
            item.EncodeBody(_buffer);
            _buffer.WriteLittleEndianFloat(position[0]); _buffer.WriteLittleEndianFloat(position[1]); _buffer.WriteLittleEndianFloat(position[2]);
            _buffer.WriteLittleEndianFloat(motion[0]); _buffer.WriteLittleEndianFloat(motion[1]); _buffer.WriteLittleEndianFloat(motion[2]);
            metadata.EncodeBody(_buffer);
        }

        protected override void DecodeImpl(Buffer _buffer)
        {






        }

        public static AddItemEntity FromBuffer(byte[] buffer)
        {
            var ret = new AddItemEntity();
            ret.decode(buffer);
            return ret;
        }

    }

    public class AddHangingEntity : Packet
    {

        public const byte Id = 16;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        public long entityId;
        public long runtimeId;
        public Types.BlockPosition position;
        public int unknown3;

        public AddHangingEntity() {}

        public AddHangingEntity(long entityId, long runtimeId, Types.BlockPosition position, int unknown3)
        {
            this.entityId = entityId;
            this.runtimeId = runtimeId;
            this.position = position;
            this.unknown3 = unknown3;
        }

        public override int GetId()
        {
            return Id;
        }

        protected override void EncodeId(Buffer _buffer)
        {
            _buffer.WriteUbyte(Id);
        }

        protected override void DecodeId(Buffer _buffer)
        {
            _buffer.ReadUbyte();
        }

        protected override void EncodeImpl(Buffer _buffer)
        {
            _buffer.WriteVarlong(entityId);
            _buffer.WriteVarlong(runtimeId);
            position.EncodeBody(_buffer);
            _buffer.WriteVarint(unknown3);
        }

        protected override void DecodeImpl(Buffer _buffer)
        {




        }

        public static AddHangingEntity FromBuffer(byte[] buffer)
        {
            var ret = new AddHangingEntity();
            ret.decode(buffer);
            return ret;
        }

    }

    public class TakeItemEntity : Packet
    {

        public const byte Id = 17;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        public long collected;
        public long collector;

        public TakeItemEntity() {}

        public TakeItemEntity(long collected, long collector)
        {
            this.collected = collected;
            this.collector = collector;
        }

        public override int GetId()
        {
            return Id;
        }

        protected override void EncodeId(Buffer _buffer)
        {
            _buffer.WriteUbyte(Id);
        }

        protected override void DecodeId(Buffer _buffer)
        {
            _buffer.ReadUbyte();
        }

        protected override void EncodeImpl(Buffer _buffer)
        {
            _buffer.WriteVarlong(collected);
            _buffer.WriteVarlong(collector);
        }

        protected override void DecodeImpl(Buffer _buffer)
        {


        }

        public static TakeItemEntity FromBuffer(byte[] buffer)
        {
            var ret = new TakeItemEntity();
            ret.decode(buffer);
            return ret;
        }

    }

    public class MoveEntity : Packet
    {

        public const byte Id = 18;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        public long entityId;
        public Tuple<float, float, float> position;
        public byte pitch;
        public byte headYaw;
        public byte yaw;
        public bool onGround;
        public bool teleported;

        public MoveEntity() {}

        public MoveEntity(long entityId, Tuple<float, float, float> position, byte pitch, byte headYaw, byte yaw, bool onGround, bool teleported)
        {
            this.entityId = entityId;
            this.position = position;
            this.pitch = pitch;
            this.headYaw = headYaw;
            this.yaw = yaw;
            this.onGround = onGround;
            this.teleported = teleported;
        }

        public override int GetId()
        {
            return Id;
        }

        protected override void EncodeId(Buffer _buffer)
        {
            _buffer.WriteUbyte(Id);
        }

        protected override void DecodeId(Buffer _buffer)
        {
            _buffer.ReadUbyte();
        }

        protected override void EncodeImpl(Buffer _buffer)
        {
            _buffer.WriteVarlong(entityId);
            _buffer.WriteLittleEndianFloat(position[0]); _buffer.WriteLittleEndianFloat(position[1]); _buffer.WriteLittleEndianFloat(position[2]);
            _buffer.WriteUbyte(pitch);
            _buffer.WriteUbyte(headYaw);
            _buffer.WriteUbyte(yaw);
            _buffer.WriteBool(onGround);
            _buffer.WriteBool(teleported);
        }

        protected override void DecodeImpl(Buffer _buffer)
        {







        }

        public static MoveEntity FromBuffer(byte[] buffer)
        {
            var ret = new MoveEntity();
            ret.decode(buffer);
            return ret;
        }

    }

    public class MovePlayer : Packet
    {

        public const byte Id = 19;

        public const bool Clientbound = true;
        public const bool Serverbound = true;

        // animation
        public const byte Full = 0;
        public const byte None = 1;
        public const byte Teleport = 2;
        public const byte Pitch = 3;

        public long entityId;
        public Tuple<float, float, float> position;
        public float pitch;
        public float headYaw;
        public float yaw;
        public byte animation;
        public bool onGround;
        public long unknown7;
        public int unknown8;
        public int unknown9;

        public MovePlayer() {}

        public MovePlayer(long entityId, Tuple<float, float, float> position, float pitch, float headYaw, float yaw, byte animation, bool onGround, long unknown7, int unknown8, int unknown9)
        {
            this.entityId = entityId;
            this.position = position;
            this.pitch = pitch;
            this.headYaw = headYaw;
            this.yaw = yaw;
            this.animation = animation;
            this.onGround = onGround;
            this.unknown7 = unknown7;
            this.unknown8 = unknown8;
            this.unknown9 = unknown9;
        }

        public override int GetId()
        {
            return Id;
        }

        protected override void EncodeId(Buffer _buffer)
        {
            _buffer.WriteUbyte(Id);
        }

        protected override void DecodeId(Buffer _buffer)
        {
            _buffer.ReadUbyte();
        }

        protected override void EncodeImpl(Buffer _buffer)
        {
            _buffer.WriteVarlong(entityId);
            _buffer.WriteLittleEndianFloat(position[0]); _buffer.WriteLittleEndianFloat(position[1]); _buffer.WriteLittleEndianFloat(position[2]);
            _buffer.WriteLittleEndianFloat(pitch);
            _buffer.WriteLittleEndianFloat(headYaw);
            _buffer.WriteLittleEndianFloat(yaw);
            _buffer.WriteUbyte(animation);
            _buffer.WriteBool(onGround);
            _buffer.WriteVarlong(unknown7);
            if(animation==3){ _buffer.WriteLittleEndianInt(unknown8); }
            if(animation==3){ _buffer.WriteLittleEndianInt(unknown9); }
        }

        protected override void DecodeImpl(Buffer _buffer)
        {








            if(animation==3){  }
            if(animation==3){  }
        }

        public static MovePlayer FromBuffer(byte[] buffer)
        {
            var ret = new MovePlayer();
            ret.decode(buffer);
            return ret;
        }

    }

    public class RiderJump : Packet
    {

        public const byte Id = 20;

        public const bool Clientbound = true;
        public const bool Serverbound = true;

        public long rider;

        public RiderJump() {}

        public RiderJump(long rider)
        {
            this.rider = rider;
        }

        public override int GetId()
        {
            return Id;
        }

        protected override void EncodeId(Buffer _buffer)
        {
            _buffer.WriteUbyte(Id);
        }

        protected override void DecodeId(Buffer _buffer)
        {
            _buffer.ReadUbyte();
        }

        protected override void EncodeImpl(Buffer _buffer)
        {
            _buffer.WriteVarlong(rider);
        }

        protected override void DecodeImpl(Buffer _buffer)
        {

        }

        public static RiderJump FromBuffer(byte[] buffer)
        {
            var ret = new RiderJump();
            ret.decode(buffer);
            return ret;
        }

    }

    public class RemoveBlock : Packet
    {

        public const byte Id = 21;

        public const bool Clientbound = false;
        public const bool Serverbound = true;

        public Types.BlockPosition position;

        public RemoveBlock() {}

        public RemoveBlock(Types.BlockPosition position)
        {
            this.position = position;
        }

        public override int GetId()
        {
            return Id;
        }

        protected override void EncodeId(Buffer _buffer)
        {
            _buffer.WriteUbyte(Id);
        }

        protected override void DecodeId(Buffer _buffer)
        {
            _buffer.ReadUbyte();
        }

        protected override void EncodeImpl(Buffer _buffer)
        {
            position.EncodeBody(_buffer);
        }

        protected override void DecodeImpl(Buffer _buffer)
        {

        }

        public static RemoveBlock FromBuffer(byte[] buffer)
        {
            var ret = new RemoveBlock();
            ret.decode(buffer);
            return ret;
        }

    }

    public class UpdateBlock : Packet
    {

        public const byte Id = 22;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        // flags and meta
        public const uint Neighbors = 1;
        public const uint Network = 2;
        public const uint NoGraphic = 4;
        public const uint Priority = 8;

        public Types.BlockPosition position;
        public uint block;
        public uint flagsAndMeta;

        public UpdateBlock() {}

        public UpdateBlock(Types.BlockPosition position, uint block, uint flagsAndMeta)
        {
            this.position = position;
            this.block = block;
            this.flagsAndMeta = flagsAndMeta;
        }

        public override int GetId()
        {
            return Id;
        }

        protected override void EncodeId(Buffer _buffer)
        {
            _buffer.WriteUbyte(Id);
        }

        protected override void DecodeId(Buffer _buffer)
        {
            _buffer.ReadUbyte();
        }

        protected override void EncodeImpl(Buffer _buffer)
        {
            position.EncodeBody(_buffer);
            _buffer.WriteVaruint(block);
            _buffer.WriteVaruint(flagsAndMeta);
        }

        protected override void DecodeImpl(Buffer _buffer)
        {



        }

        public static UpdateBlock FromBuffer(byte[] buffer)
        {
            var ret = new UpdateBlock();
            ret.decode(buffer);
            return ret;
        }

    }

    public class AddPainting : Packet
    {

        public const byte Id = 23;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        public long entityId;
        public long runtimeId;
        public Types.BlockPosition position;
        public int direction;
        public string title;

        public AddPainting() {}

        public AddPainting(long entityId, long runtimeId, Types.BlockPosition position, int direction, string title)
        {
            this.entityId = entityId;
            this.runtimeId = runtimeId;
            this.position = position;
            this.direction = direction;
            this.title = title;
        }

        public override int GetId()
        {
            return Id;
        }

        protected override void EncodeId(Buffer _buffer)
        {
            _buffer.WriteUbyte(Id);
        }

        protected override void DecodeId(Buffer _buffer)
        {
            _buffer.ReadUbyte();
        }

        protected override void EncodeImpl(Buffer _buffer)
        {
            _buffer.WriteVarlong(entityId);
            _buffer.WriteVarlong(runtimeId);
            position.EncodeBody(_buffer);
            _buffer.WriteVarint(direction);
            _buffer.WriteVaruint(Encoding.UTF8.GetByteCount(title)); _buffer.WriteString(title);
        }

        protected override void DecodeImpl(Buffer _buffer)
        {





        }

        public static AddPainting FromBuffer(byte[] buffer)
        {
            var ret = new AddPainting();
            ret.decode(buffer);
            return ret;
        }

    }

    public class Explode : Packet
    {

        public const byte Id = 24;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        public Tuple<float, float, float> position;
        public float radius;
        public Types.BlockPosition[] destroyedBlocks;

        public Explode() {}

        public Explode(Tuple<float, float, float> position, float radius, Types.BlockPosition[] destroyedBlocks)
        {
            this.position = position;
            this.radius = radius;
            this.destroyedBlocks = destroyedBlocks;
        }

        public override int GetId()
        {
            return Id;
        }

        protected override void EncodeId(Buffer _buffer)
        {
            _buffer.WriteUbyte(Id);
        }

        protected override void DecodeId(Buffer _buffer)
        {
            _buffer.ReadUbyte();
        }

        protected override void EncodeImpl(Buffer _buffer)
        {
            _buffer.WriteLittleEndianFloat(position[0]); _buffer.WriteLittleEndianFloat(position[1]); _buffer.WriteLittleEndianFloat(position[2]);
            _buffer.WriteLittleEndianFloat(radius);
            _buffer.WriteVaruint(destroyedBlocks.Length); foreach(Types.BlockPosition destroyedBlocksChild in destroyedBlocks){ destroyedBlocksChild.EncodeBody(_buffer); }
        }

        protected override void DecodeImpl(Buffer _buffer)
        {



        }

        public static Explode FromBuffer(byte[] buffer)
        {
            var ret = new Explode();
            ret.decode(buffer);
            return ret;
        }

    }

    public class LevelSoundEvent : Packet
    {

        public const byte Id = 25;

        public const bool Clientbound = true;
        public const bool Serverbound = true;

        // sound
        public const byte ItemUseOn = 0;
        public const byte Hit = 1;
        public const byte Step = 2;
        public const byte Jump = 3;
        public const byte Break = 4;
        public const byte Place = 5;
        public const byte HeavyStep = 6;
        public const byte Gallop = 7;
        public const byte Fall = 8;
        public const byte Ambient = 9;
        public const byte AmbientBaby = 10;
        public const byte AmbientInWater = 11;
        public const byte Breathe = 12;
        public const byte Death = 13;
        public const byte DeathInWater = 14;
        public const byte DeathToZombie = 15;
        public const byte Hurt = 16;
        public const byte HurtInWater = 17;
        public const byte Mad = 18;
        public const byte Boost = 19;
        public const byte Bow = 20;
        public const byte SquishBig = 21;
        public const byte SquishSmall = 22;
        public const byte FallBig = 23;
        public const byte FallSmall = 24;
        public const byte Splash = 25;
        public const byte Fizz = 26;
        public const byte Flap = 27;
        public const byte Swim = 28;
        public const byte Drink = 29;
        public const byte Eat = 30;
        public const byte Takeoff = 31;
        public const byte Shake = 32;
        public const byte Plop = 33;
        public const byte Land = 34;
        public const byte Saddle = 35;
        public const byte Armor = 36;
        public const byte AddChest = 37;
        public const byte Throw = 38;
        public const byte Attack = 39;
        public const byte AttackNodamage = 40;
        public const byte Warn = 41;
        public const byte Shear = 42;
        public const byte Milk = 43;
        public const byte Thunder = 44;
        public const byte Explode = 45;
        public const byte Fire = 46;
        public const byte Ignite = 47;
        public const byte Fuse = 48;
        public const byte Stare = 49;
        public const byte Spawn = 50;
        public const byte Shoot = 51;
        public const byte BreakBlock = 52;
        public const byte Remedy = 53;
        public const byte Unfect = 54;
        public const byte Levelup = 55;
        public const byte BowHit = 56;
        public const byte BulletHit = 57;
        public const byte ExtinguishFire = 58;
        public const byte ItemFizz = 59;
        public const byte ChestOpen = 60;
        public const byte ChestClosed = 61;
        public const byte PowerOn = 62;
        public const byte PowerOff = 63;
        public const byte Attach = 64;
        public const byte Detach = 65;
        public const byte Deny = 66;
        public const byte Tripod = 67;
        public const byte Pop = 68;
        public const byte DropSlot = 69;
        public const byte Note = 70;
        public const byte Thorns = 71;
        public const byte PistonIn = 72;
        public const byte PistonOut = 73;
        public const byte Portal = 74;
        public const byte Water = 75;
        public const byte LavaPop = 76;
        public const byte Lava = 77;
        public const byte Burp = 78;
        public const byte BucketFillWater = 79;
        public const byte BucketFillLava = 80;
        public const byte BucketEmptyWater = 81;
        public const byte BucketEmptyLava = 82;
        public const byte GuardianFlop = 83;
        public const byte ElderguardianCurse = 84;
        public const byte MobWarning = 85;
        public const byte MobWarningBaby = 86;
        public const byte Teleport = 87;
        public const byte ShulkerOpen = 88;
        public const byte ShulkerClose = 89;
        public const byte Haggle = 90;
        public const byte HaggleYes = 91;
        public const byte HaggleNo = 92;
        public const byte HaggleIdle = 93;
        public const byte ChorusGrow = 94;
        public const byte ChorusDeath = 95;
        public const byte Default = 96;
        public const byte Undefined = 97;

        public byte sound;
        public Tuple<float, float, float> position;
        public uint volume;
        public int pitch;
        public bool unknown4;

        public LevelSoundEvent() {}

        public LevelSoundEvent(byte sound, Tuple<float, float, float> position, uint volume, int pitch, bool unknown4)
        {
            this.sound = sound;
            this.position = position;
            this.volume = volume;
            this.pitch = pitch;
            this.unknown4 = unknown4;
        }

        public override int GetId()
        {
            return Id;
        }

        protected override void EncodeId(Buffer _buffer)
        {
            _buffer.WriteUbyte(Id);
        }

        protected override void DecodeId(Buffer _buffer)
        {
            _buffer.ReadUbyte();
        }

        protected override void EncodeImpl(Buffer _buffer)
        {
            _buffer.WriteUbyte(sound);
            _buffer.WriteLittleEndianFloat(position[0]); _buffer.WriteLittleEndianFloat(position[1]); _buffer.WriteLittleEndianFloat(position[2]);
            _buffer.WriteVaruint(volume);
            _buffer.WriteVarint(pitch);
            _buffer.WriteBool(unknown4);
        }

        protected override void DecodeImpl(Buffer _buffer)
        {





        }

        public static LevelSoundEvent FromBuffer(byte[] buffer)
        {
            var ret = new LevelSoundEvent();
            ret.decode(buffer);
            return ret;
        }

    }

    public class LevelEvent : Packet
    {

        public const byte Id = 26;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        // event id
        public const int StartRain = 3001;
        public const int StartThunder = 3002;
        public const int StopRain = 3003;
        public const int StopThunder = 3004;
        public const int StartBlockBreak = 3600;
        public const int StopBlockBreak = 3601;
        public const int SetData = 4000;
        public const int PlayersSleeping = 9800;
        public const int ParticleBubble = 16385;
        public const int ParticleCritical = 16386;
        public const int ParticleBlockForceField = 16387;
        public const int ParticleSmoke = 16388;
        public const int ParticleExplode = 16389;
        public const int ParticleEvaporation = 16390;
        public const int ParticleFlame = 16391;
        public const int ParticleLava = 16392;
        public const int ParticleLargeSmoke = 16393;
        public const int ParticleRedstone = 16394;
        public const int ParticleRisingRedDust = 16395;
        public const int ParticleItemBreak = 16396;
        public const int ParticleSnowballPoof = 16397;
        public const int ParticleHugeExplode = 16398;
        public const int ParticleHugeExplodeSeed = 16399;
        public const int ParticleMobFlame = 16400;
        public const int ParticleHeart = 16401;
        public const int ParticleTerrain = 16402;
        public const int ParticleTownAura = 16403;
        public const int ParticlePortal = 16404;
        public const int ParticleWaterSplash = 16405;
        public const int ParticleWaterWake = 16406;
        public const int ParticleDripWater = 16407;
        public const int ParticleDripLava = 16408;
        public const int ParticleFallingDust = 16409;
        public const int ParticleMobSpell = 16410;
        public const int ParticleMobSpellAmbient = 16411;
        public const int ParticleMobSpellInstantaneous = 16412;
        public const int ParticleInk = 16413;
        public const int ParticleSlime = 16414;
        public const int ParticleRainSplash = 16415;
        public const int ParticleVillagerAngry = 16416;
        public const int ParticleVillagerHappy = 16417;
        public const int ParticleEnchantmentTable = 16418;
        public const int ParticleTrackingEmitter = 16419;
        public const int ParticleNote = 16420;
        public const int ParticleWitchSpell = 16421;
        public const int ParticleCarrot = 16422;
        public const int ParticleEndRod = 16424;
        public const int ParticleDragonBreath = 16425;
        public const int ParticleShoot = 2000;
        public const int ParticleDestroy = 2001;
        public const int ParticleSplash = 2002;
        public const int ParticleEyeDespawn = 2003;
        public const int ParticleSpawn = 2004;

        public int eventId;
        public Tuple<float, float, float> position;
        public int data;

        public LevelEvent() {}

        public LevelEvent(int eventId, Tuple<float, float, float> position, int data)
        {
            this.eventId = eventId;
            this.position = position;
            this.data = data;
        }

        public override int GetId()
        {
            return Id;
        }

        protected override void EncodeId(Buffer _buffer)
        {
            _buffer.WriteUbyte(Id);
        }

        protected override void DecodeId(Buffer _buffer)
        {
            _buffer.ReadUbyte();
        }

        protected override void EncodeImpl(Buffer _buffer)
        {
            _buffer.WriteVarint(eventId);
            _buffer.WriteLittleEndianFloat(position[0]); _buffer.WriteLittleEndianFloat(position[1]); _buffer.WriteLittleEndianFloat(position[2]);
            _buffer.WriteVarint(data);
        }

        protected override void DecodeImpl(Buffer _buffer)
        {



        }

        public static LevelEvent FromBuffer(byte[] buffer)
        {
            var ret = new LevelEvent();
            ret.decode(buffer);
            return ret;
        }

    }

    public class BlockEvent : Packet
    {

        public const byte Id = 27;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        public Types.BlockPosition position;
        public int[2] data;

        public BlockEvent() {}

        public BlockEvent(Types.BlockPosition position, int[2] data)
        {
            this.position = position;
            this.data = data;
        }

        public override int GetId()
        {
            return Id;
        }

        protected override void EncodeId(Buffer _buffer)
        {
            _buffer.WriteUbyte(Id);
        }

        protected override void DecodeId(Buffer _buffer)
        {
            _buffer.ReadUbyte();
        }

        protected override void EncodeImpl(Buffer _buffer)
        {
            position.EncodeBody(_buffer);
            foreach(int dataChild in data){ _buffer.WriteVarint(dataChild); }
        }

        protected override void DecodeImpl(Buffer _buffer)
        {


        }

        public static BlockEvent FromBuffer(byte[] buffer)
        {
            var ret = new BlockEvent();
            ret.decode(buffer);
            return ret;
        }

    }

    public class EntityEvent : Packet
    {

        public const byte Id = 28;

        public const bool Clientbound = true;
        public const bool Serverbound = true;

        // event id
        public const byte HurtAnimation = 2;
        public const byte DeathAnimation = 3;
        public const byte TameFail = 6;
        public const byte TameSuccess = 7;
        public const byte ShakeWet = 8;
        public const byte UseItem = 9;
        public const byte EatGrassAnimation = 10;
        public const byte FishHookBubbles = 11;
        public const byte FishHookPosition = 12;
        public const byte FishHookHook = 13;
        public const byte FishHookTease = 14;
        public const byte SquidInkCloud = 15;
        public const byte AmbientSound = 16;
        public const byte Respawn = 17;

        public long entityId;
        public byte eventId;
        public int unknown2;

        public EntityEvent() {}

        public EntityEvent(long entityId, byte eventId, int unknown2)
        {
            this.entityId = entityId;
            this.eventId = eventId;
            this.unknown2 = unknown2;
        }

        public override int GetId()
        {
            return Id;
        }

        protected override void EncodeId(Buffer _buffer)
        {
            _buffer.WriteUbyte(Id);
        }

        protected override void DecodeId(Buffer _buffer)
        {
            _buffer.ReadUbyte();
        }

        protected override void EncodeImpl(Buffer _buffer)
        {
            _buffer.WriteVarlong(entityId);
            _buffer.WriteUbyte(eventId);
            _buffer.WriteVarint(unknown2);
        }

        protected override void DecodeImpl(Buffer _buffer)
        {



        }

        public static EntityEvent FromBuffer(byte[] buffer)
        {
            var ret = new EntityEvent();
            ret.decode(buffer);
            return ret;
        }

    }

    public class MobEffect : Packet
    {

        public const byte Id = 29;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        // event id
        public const byte Add = 1;
        public const byte Modify = 2;
        public const byte Remove = 3;

        public long entityId;
        public byte eventId;
        public int effect;
        public int amplifier;
        public bool particles;
        public int duration;

        public MobEffect() {}

        public MobEffect(long entityId, byte eventId, int effect, int amplifier, bool particles, int duration)
        {
            this.entityId = entityId;
            this.eventId = eventId;
            this.effect = effect;
            this.amplifier = amplifier;
            this.particles = particles;
            this.duration = duration;
        }

        public override int GetId()
        {
            return Id;
        }

        protected override void EncodeId(Buffer _buffer)
        {
            _buffer.WriteUbyte(Id);
        }

        protected override void DecodeId(Buffer _buffer)
        {
            _buffer.ReadUbyte();
        }

        protected override void EncodeImpl(Buffer _buffer)
        {
            _buffer.WriteVarlong(entityId);
            _buffer.WriteUbyte(eventId);
            _buffer.WriteVarint(effect);
            _buffer.WriteVarint(amplifier);
            _buffer.WriteBool(particles);
            _buffer.WriteVarint(duration);
        }

        protected override void DecodeImpl(Buffer _buffer)
        {






        }

        public static MobEffect FromBuffer(byte[] buffer)
        {
            var ret = new MobEffect();
            ret.decode(buffer);
            return ret;
        }

    }

    public class UpdateAttributes : Packet
    {

        public const byte Id = 30;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        public long entityId;
        public Types.Attribute[] attributes;

        public UpdateAttributes() {}

        public UpdateAttributes(long entityId, Types.Attribute[] attributes)
        {
            this.entityId = entityId;
            this.attributes = attributes;
        }

        public override int GetId()
        {
            return Id;
        }

        protected override void EncodeId(Buffer _buffer)
        {
            _buffer.WriteUbyte(Id);
        }

        protected override void DecodeId(Buffer _buffer)
        {
            _buffer.ReadUbyte();
        }

        protected override void EncodeImpl(Buffer _buffer)
        {
            _buffer.WriteVarlong(entityId);
            _buffer.WriteVaruint(attributes.Length); foreach(Types.Attribute attributesChild in attributes){ attributesChild.EncodeBody(_buffer); }
        }

        protected override void DecodeImpl(Buffer _buffer)
        {


        }

        public static UpdateAttributes FromBuffer(byte[] buffer)
        {
            var ret = new UpdateAttributes();
            ret.decode(buffer);
            return ret;
        }

    }

    public class MobEquipment : Packet
    {

        public const byte Id = 31;

        public const bool Clientbound = true;
        public const bool Serverbound = true;

        public long entityId;
        public Types.Slot item;
        public byte inventorySlot;
        public byte hotbarSlot;
        public byte unknown4;

        public MobEquipment() {}

        public MobEquipment(long entityId, Types.Slot item, byte inventorySlot, byte hotbarSlot, byte unknown4)
        {
            this.entityId = entityId;
            this.item = item;
            this.inventorySlot = inventorySlot;
            this.hotbarSlot = hotbarSlot;
            this.unknown4 = unknown4;
        }

        public override int GetId()
        {
            return Id;
        }

        protected override void EncodeId(Buffer _buffer)
        {
            _buffer.WriteUbyte(Id);
        }

        protected override void DecodeId(Buffer _buffer)
        {
            _buffer.ReadUbyte();
        }

        protected override void EncodeImpl(Buffer _buffer)
        {
            _buffer.WriteVarlong(entityId);
            item.EncodeBody(_buffer);
            _buffer.WriteUbyte(inventorySlot);
            _buffer.WriteUbyte(hotbarSlot);
            _buffer.WriteUbyte(unknown4);
        }

        protected override void DecodeImpl(Buffer _buffer)
        {





        }

        public static MobEquipment FromBuffer(byte[] buffer)
        {
            var ret = new MobEquipment();
            ret.decode(buffer);
            return ret;
        }

    }

    public class MobArmorEquipment : Packet
    {

        public const byte Id = 32;

        public const bool Clientbound = true;
        public const bool Serverbound = true;

        public long entityId;
        public Types.Slot[4] armor;

        public MobArmorEquipment() {}

        public MobArmorEquipment(long entityId, Types.Slot[4] armor)
        {
            this.entityId = entityId;
            this.armor = armor;
        }

        public override int GetId()
        {
            return Id;
        }

        protected override void EncodeId(Buffer _buffer)
        {
            _buffer.WriteUbyte(Id);
        }

        protected override void DecodeId(Buffer _buffer)
        {
            _buffer.ReadUbyte();
        }

        protected override void EncodeImpl(Buffer _buffer)
        {
            _buffer.WriteVarlong(entityId);
            foreach(Types.Slot armorChild in armor){ armorChild.EncodeBody(_buffer); }
        }

        protected override void DecodeImpl(Buffer _buffer)
        {


        }

        public static MobArmorEquipment FromBuffer(byte[] buffer)
        {
            var ret = new MobArmorEquipment();
            ret.decode(buffer);
            return ret;
        }

    }

    public class Interact : Packet
    {

        public const byte Id = 33;

        public const bool Clientbound = false;
        public const bool Serverbound = true;

        // action
        public const byte Attack = 1;
        public const byte Interact = 2;
        public const byte LeaveVehicle = 3;
        public const byte Hover = 4;

        public byte action;
        public long target;

        public Interact() {}

        public Interact(byte action, long target)
        {
            this.action = action;
            this.target = target;
        }

        public override int GetId()
        {
            return Id;
        }

        protected override void EncodeId(Buffer _buffer)
        {
            _buffer.WriteUbyte(Id);
        }

        protected override void DecodeId(Buffer _buffer)
        {
            _buffer.ReadUbyte();
        }

        protected override void EncodeImpl(Buffer _buffer)
        {
            _buffer.WriteUbyte(action);
            _buffer.WriteVarlong(target);
        }

        protected override void DecodeImpl(Buffer _buffer)
        {


        }

        public static Interact FromBuffer(byte[] buffer)
        {
            var ret = new Interact();
            ret.decode(buffer);
            return ret;
        }

    }

    public class BlockPickRequest : Packet
    {

        public const byte Id = 34;

        public const bool Clientbound = false;
        public const bool Serverbound = true;

        public Tuple<int, int, int> position;
        public byte slot;

        public BlockPickRequest() {}

        public BlockPickRequest(Tuple<int, int, int> position, byte slot)
        {
            this.position = position;
            this.slot = slot;
        }

        public override int GetId()
        {
            return Id;
        }

        protected override void EncodeId(Buffer _buffer)
        {
            _buffer.WriteUbyte(Id);
        }

        protected override void DecodeId(Buffer _buffer)
        {
            _buffer.ReadUbyte();
        }

        protected override void EncodeImpl(Buffer _buffer)
        {
            _buffer.WriteVarint(position[0]); _buffer.WriteVarint(position[1]); _buffer.WriteVarint(position[2]);
            _buffer.WriteUbyte(slot);
        }

        protected override void DecodeImpl(Buffer _buffer)
        {


        }

        public static BlockPickRequest FromBuffer(byte[] buffer)
        {
            var ret = new BlockPickRequest();
            ret.decode(buffer);
            return ret;
        }

    }

    public class UseItem : Packet
    {

        public const byte Id = 35;

        public const bool Clientbound = false;
        public const bool Serverbound = true;

        public Types.BlockPosition blockPosition;
        public uint hotbarSlot;
        public int face;
        public Tuple<float, float, float> facePosition;
        public Tuple<float, float, float> position;
        public int slot;
        public Types.Slot item;

        public UseItem() {}

        public UseItem(Types.BlockPosition blockPosition, uint hotbarSlot, int face, Tuple<float, float, float> facePosition, Tuple<float, float, float> position, int slot, Types.Slot item)
        {
            this.blockPosition = blockPosition;
            this.hotbarSlot = hotbarSlot;
            this.face = face;
            this.facePosition = facePosition;
            this.position = position;
            this.slot = slot;
            this.item = item;
        }

        public override int GetId()
        {
            return Id;
        }

        protected override void EncodeId(Buffer _buffer)
        {
            _buffer.WriteUbyte(Id);
        }

        protected override void DecodeId(Buffer _buffer)
        {
            _buffer.ReadUbyte();
        }

        protected override void EncodeImpl(Buffer _buffer)
        {
            blockPosition.EncodeBody(_buffer);
            _buffer.WriteVaruint(hotbarSlot);
            _buffer.WriteVarint(face);
            _buffer.WriteLittleEndianFloat(facePosition[0]); _buffer.WriteLittleEndianFloat(facePosition[1]); _buffer.WriteLittleEndianFloat(facePosition[2]);
            _buffer.WriteLittleEndianFloat(position[0]); _buffer.WriteLittleEndianFloat(position[1]); _buffer.WriteLittleEndianFloat(position[2]);
            _buffer.WriteVarint(slot);
            item.EncodeBody(_buffer);
        }

        protected override void DecodeImpl(Buffer _buffer)
        {







        }

        public static UseItem FromBuffer(byte[] buffer)
        {
            var ret = new UseItem();
            ret.decode(buffer);
            return ret;
        }

    }

    public class PlayerAction : Packet
    {

        public const byte Id = 36;

        public const bool Clientbound = false;
        public const bool Serverbound = true;

        // action
        public const int StartBreak = 0;
        public const int AbortBreak = 1;
        public const int StopBreak = 2;
        public const int ReleaseItem = 5;
        public const int StopSleeping = 6;
        public const int Respawn = 7;
        public const int Jump = 8;
        public const int StartSprint = 9;
        public const int StopSprint = 10;
        public const int StartSneak = 11;
        public const int StopSneak = 12;
        public const int StartGliding = 15;
        public const int StopGliding = 16;
        public const int ContinueBreak = 18;

        public long entityId;
        public int action;
        public Types.BlockPosition position;
        public int face;

        public PlayerAction() {}

        public PlayerAction(long entityId, int action, Types.BlockPosition position, int face)
        {
            this.entityId = entityId;
            this.action = action;
            this.position = position;
            this.face = face;
        }

        public override int GetId()
        {
            return Id;
        }

        protected override void EncodeId(Buffer _buffer)
        {
            _buffer.WriteUbyte(Id);
        }

        protected override void DecodeId(Buffer _buffer)
        {
            _buffer.ReadUbyte();
        }

        protected override void EncodeImpl(Buffer _buffer)
        {
            _buffer.WriteVarlong(entityId);
            _buffer.WriteVarint(action);
            position.EncodeBody(_buffer);
            _buffer.WriteVarint(face);
        }

        protected override void DecodeImpl(Buffer _buffer)
        {




        }

        public static PlayerAction FromBuffer(byte[] buffer)
        {
            var ret = new PlayerAction();
            ret.decode(buffer);
            return ret;
        }

    }

    public class EntityFall : Packet
    {

        public const byte Id = 37;

        public const bool Clientbound = false;
        public const bool Serverbound = true;

        public long entityId;
        public float distance;
        public bool unknown2;

        public EntityFall() {}

        public EntityFall(long entityId, float distance, bool unknown2)
        {
            this.entityId = entityId;
            this.distance = distance;
            this.unknown2 = unknown2;
        }

        public override int GetId()
        {
            return Id;
        }

        protected override void EncodeId(Buffer _buffer)
        {
            _buffer.WriteUbyte(Id);
        }

        protected override void DecodeId(Buffer _buffer)
        {
            _buffer.ReadUbyte();
        }

        protected override void EncodeImpl(Buffer _buffer)
        {
            _buffer.WriteVarlong(entityId);
            _buffer.WriteLittleEndianFloat(distance);
            _buffer.WriteBool(unknown2);
        }

        protected override void DecodeImpl(Buffer _buffer)
        {



        }

        public static EntityFall FromBuffer(byte[] buffer)
        {
            var ret = new EntityFall();
            ret.decode(buffer);
            return ret;
        }

    }

    public class HurtArmor : Packet
    {

        public const byte Id = 38;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        public int unknown0;

        public HurtArmor() {}

        public HurtArmor(int unknown0)
        {
            this.unknown0 = unknown0;
        }

        public override int GetId()
        {
            return Id;
        }

        protected override void EncodeId(Buffer _buffer)
        {
            _buffer.WriteUbyte(Id);
        }

        protected override void DecodeId(Buffer _buffer)
        {
            _buffer.ReadUbyte();
        }

        protected override void EncodeImpl(Buffer _buffer)
        {
            _buffer.WriteVarint(unknown0);
        }

        protected override void DecodeImpl(Buffer _buffer)
        {

        }

        public static HurtArmor FromBuffer(byte[] buffer)
        {
            var ret = new HurtArmor();
            ret.decode(buffer);
            return ret;
        }

    }

    public class SetEntityData : Packet
    {

        public const byte Id = 39;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        public long entityId;
        public sul.Metadata.Pocket112.Metadata metadata;

        public SetEntityData() {}

        public SetEntityData(long entityId, sul.Metadata.Pocket112.Metadata metadata)
        {
            this.entityId = entityId;
            this.metadata = metadata;
        }

        public override int GetId()
        {
            return Id;
        }

        protected override void EncodeId(Buffer _buffer)
        {
            _buffer.WriteUbyte(Id);
        }

        protected override void DecodeId(Buffer _buffer)
        {
            _buffer.ReadUbyte();
        }

        protected override void EncodeImpl(Buffer _buffer)
        {
            _buffer.WriteVarlong(entityId);
            metadata.EncodeBody(_buffer);
        }

        protected override void DecodeImpl(Buffer _buffer)
        {


        }

        public static SetEntityData FromBuffer(byte[] buffer)
        {
            var ret = new SetEntityData();
            ret.decode(buffer);
            return ret;
        }

    }

    public class SetEntityMotion : Packet
    {

        public const byte Id = 40;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        public long entityId;
        public Tuple<float, float, float> motion;

        public SetEntityMotion() {}

        public SetEntityMotion(long entityId, Tuple<float, float, float> motion)
        {
            this.entityId = entityId;
            this.motion = motion;
        }

        public override int GetId()
        {
            return Id;
        }

        protected override void EncodeId(Buffer _buffer)
        {
            _buffer.WriteUbyte(Id);
        }

        protected override void DecodeId(Buffer _buffer)
        {
            _buffer.ReadUbyte();
        }

        protected override void EncodeImpl(Buffer _buffer)
        {
            _buffer.WriteVarlong(entityId);
            _buffer.WriteLittleEndianFloat(motion[0]); _buffer.WriteLittleEndianFloat(motion[1]); _buffer.WriteLittleEndianFloat(motion[2]);
        }

        protected override void DecodeImpl(Buffer _buffer)
        {


        }

        public static SetEntityMotion FromBuffer(byte[] buffer)
        {
            var ret = new SetEntityMotion();
            ret.decode(buffer);
            return ret;
        }

    }

    public class SetEntityLink : Packet
    {

        public const byte Id = 41;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        // action
        public const byte Add = 0;
        public const byte Ride = 1;
        public const byte Remove = 2;

        public long from;
        public long to;
        public byte action;

        public SetEntityLink() {}

        public SetEntityLink(long from, long to, byte action)
        {
            this.from = from;
            this.to = to;
            this.action = action;
        }

        public override int GetId()
        {
            return Id;
        }

        protected override void EncodeId(Buffer _buffer)
        {
            _buffer.WriteUbyte(Id);
        }

        protected override void DecodeId(Buffer _buffer)
        {
            _buffer.ReadUbyte();
        }

        protected override void EncodeImpl(Buffer _buffer)
        {
            _buffer.WriteVarlong(from);
            _buffer.WriteVarlong(to);
            _buffer.WriteUbyte(action);
        }

        protected override void DecodeImpl(Buffer _buffer)
        {



        }

        public static SetEntityLink FromBuffer(byte[] buffer)
        {
            var ret = new SetEntityLink();
            ret.decode(buffer);
            return ret;
        }

    }

    public class SetHealth : Packet
    {

        public const byte Id = 42;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        public int health;

        public SetHealth() {}

        public SetHealth(int health)
        {
            this.health = health;
        }

        public override int GetId()
        {
            return Id;
        }

        protected override void EncodeId(Buffer _buffer)
        {
            _buffer.WriteUbyte(Id);
        }

        protected override void DecodeId(Buffer _buffer)
        {
            _buffer.ReadUbyte();
        }

        protected override void EncodeImpl(Buffer _buffer)
        {
            _buffer.WriteVarint(health);
        }

        protected override void DecodeImpl(Buffer _buffer)
        {

        }

        public static SetHealth FromBuffer(byte[] buffer)
        {
            var ret = new SetHealth();
            ret.decode(buffer);
            return ret;
        }

    }

    public class SetSpawnPosition : Packet
    {

        public const byte Id = 43;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        public int unknown0;
        public Types.BlockPosition position;
        public bool unknown2;

        public SetSpawnPosition() {}

        public SetSpawnPosition(int unknown0, Types.BlockPosition position, bool unknown2)
        {
            this.unknown0 = unknown0;
            this.position = position;
            this.unknown2 = unknown2;
        }

        public override int GetId()
        {
            return Id;
        }

        protected override void EncodeId(Buffer _buffer)
        {
            _buffer.WriteUbyte(Id);
        }

        protected override void DecodeId(Buffer _buffer)
        {
            _buffer.ReadUbyte();
        }

        protected override void EncodeImpl(Buffer _buffer)
        {
            _buffer.WriteVarint(unknown0);
            position.EncodeBody(_buffer);
            _buffer.WriteBool(unknown2);
        }

        protected override void DecodeImpl(Buffer _buffer)
        {



        }

        public static SetSpawnPosition FromBuffer(byte[] buffer)
        {
            var ret = new SetSpawnPosition();
            ret.decode(buffer);
            return ret;
        }

    }

    public class Animate : Packet
    {

        public const byte Id = 44;

        public const bool Clientbound = true;
        public const bool Serverbound = true;

        // action
        public const int Breaking = 1;
        public const int WakeUp = 3;

        public int action;
        public long entityId;
        public float unknown2;

        public Animate() {}

        public Animate(int action, long entityId, float unknown2)
        {
            this.action = action;
            this.entityId = entityId;
            this.unknown2 = unknown2;
        }

        public override int GetId()
        {
            return Id;
        }

        protected override void EncodeId(Buffer _buffer)
        {
            _buffer.WriteUbyte(Id);
        }

        protected override void DecodeId(Buffer _buffer)
        {
            _buffer.ReadUbyte();
        }

        protected override void EncodeImpl(Buffer _buffer)
        {
            _buffer.WriteVarint(action);
            _buffer.WriteVarlong(entityId);
            if(action>128){ _buffer.WriteLittleEndianFloat(unknown2); }
        }

        protected override void DecodeImpl(Buffer _buffer)
        {


            if(action>128){  }
        }

        public static Animate FromBuffer(byte[] buffer)
        {
            var ret = new Animate();
            ret.decode(buffer);
            return ret;
        }

    }

    public class Respawn : Packet
    {

        public const byte Id = 45;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        public Tuple<float, float, float> position;

        public Respawn() {}

        public Respawn(Tuple<float, float, float> position)
        {
            this.position = position;
        }

        public override int GetId()
        {
            return Id;
        }

        protected override void EncodeId(Buffer _buffer)
        {
            _buffer.WriteUbyte(Id);
        }

        protected override void DecodeId(Buffer _buffer)
        {
            _buffer.ReadUbyte();
        }

        protected override void EncodeImpl(Buffer _buffer)
        {
            _buffer.WriteLittleEndianFloat(position[0]); _buffer.WriteLittleEndianFloat(position[1]); _buffer.WriteLittleEndianFloat(position[2]);
        }

        protected override void DecodeImpl(Buffer _buffer)
        {

        }

        public static Respawn FromBuffer(byte[] buffer)
        {
            var ret = new Respawn();
            ret.decode(buffer);
            return ret;
        }

    }

    public class DropItem : Packet
    {

        public const byte Id = 46;

        public const bool Clientbound = false;
        public const bool Serverbound = true;

        // action
        public const byte Drop = 0;

        public byte action;
        public Types.Slot item;

        public DropItem() {}

        public DropItem(byte action, Types.Slot item)
        {
            this.action = action;
            this.item = item;
        }

        public override int GetId()
        {
            return Id;
        }

        protected override void EncodeId(Buffer _buffer)
        {
            _buffer.WriteUbyte(Id);
        }

        protected override void DecodeId(Buffer _buffer)
        {
            _buffer.ReadUbyte();
        }

        protected override void EncodeImpl(Buffer _buffer)
        {
            _buffer.WriteUbyte(action);
            item.EncodeBody(_buffer);
        }

        protected override void DecodeImpl(Buffer _buffer)
        {


        }

        public static DropItem FromBuffer(byte[] buffer)
        {
            var ret = new DropItem();
            ret.decode(buffer);
            return ret;
        }

    }

    public class InventoryAction : Packet
    {

        public const byte Id = 47;

        public const bool Clientbound = false;
        public const bool Serverbound = true;

        public int action;
        public Types.Slot item;
        public int unknown2;
        public int unknown3;

        public InventoryAction() {}

        public InventoryAction(int action, Types.Slot item, int unknown2, int unknown3)
        {
            this.action = action;
            this.item = item;
            this.unknown2 = unknown2;
            this.unknown3 = unknown3;
        }

        public override int GetId()
        {
            return Id;
        }

        protected override void EncodeId(Buffer _buffer)
        {
            _buffer.WriteUbyte(Id);
        }

        protected override void DecodeId(Buffer _buffer)
        {
            _buffer.ReadUbyte();
        }

        protected override void EncodeImpl(Buffer _buffer)
        {
            _buffer.WriteVarint(action);
            item.EncodeBody(_buffer);
            _buffer.WriteVarint(unknown2);
            _buffer.WriteVarint(unknown3);
        }

        protected override void DecodeImpl(Buffer _buffer)
        {




        }

        public static InventoryAction FromBuffer(byte[] buffer)
        {
            var ret = new InventoryAction();
            ret.decode(buffer);
            return ret;
        }

    }

    public class ContainerOpen : Packet
    {

        public const byte Id = 48;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        public byte window;
        public byte type;
        public Types.BlockPosition position;
        public long entityId;

        public ContainerOpen() {}

        public ContainerOpen(byte window, byte type, Types.BlockPosition position, long entityId)
        {
            this.window = window;
            this.type = type;
            this.position = position;
            this.entityId = entityId;
        }

        public override int GetId()
        {
            return Id;
        }

        protected override void EncodeId(Buffer _buffer)
        {
            _buffer.WriteUbyte(Id);
        }

        protected override void DecodeId(Buffer _buffer)
        {
            _buffer.ReadUbyte();
        }

        protected override void EncodeImpl(Buffer _buffer)
        {
            _buffer.WriteUbyte(window);
            _buffer.WriteUbyte(type);
            position.EncodeBody(_buffer);
            _buffer.WriteVarlong(entityId);
        }

        protected override void DecodeImpl(Buffer _buffer)
        {




        }

        public static ContainerOpen FromBuffer(byte[] buffer)
        {
            var ret = new ContainerOpen();
            ret.decode(buffer);
            return ret;
        }

    }

    public class ContainerClose : Packet
    {

        public const byte Id = 49;

        public const bool Clientbound = true;
        public const bool Serverbound = true;

        public byte window;

        public ContainerClose() {}

        public ContainerClose(byte window)
        {
            this.window = window;
        }

        public override int GetId()
        {
            return Id;
        }

        protected override void EncodeId(Buffer _buffer)
        {
            _buffer.WriteUbyte(Id);
        }

        protected override void DecodeId(Buffer _buffer)
        {
            _buffer.ReadUbyte();
        }

        protected override void EncodeImpl(Buffer _buffer)
        {
            _buffer.WriteUbyte(window);
        }

        protected override void DecodeImpl(Buffer _buffer)
        {

        }

        public static ContainerClose FromBuffer(byte[] buffer)
        {
            var ret = new ContainerClose();
            ret.decode(buffer);
            return ret;
        }

    }

    public class ContainerSetSlot : Packet
    {

        public const byte Id = 50;

        public const bool Clientbound = true;
        public const bool Serverbound = true;

        public byte window;
        public int slot;
        public int hotbarSlot;
        public Types.Slot item;
        public byte unknown4;

        public ContainerSetSlot() {}

        public ContainerSetSlot(byte window, int slot, int hotbarSlot, Types.Slot item, byte unknown4)
        {
            this.window = window;
            this.slot = slot;
            this.hotbarSlot = hotbarSlot;
            this.item = item;
            this.unknown4 = unknown4;
        }

        public override int GetId()
        {
            return Id;
        }

        protected override void EncodeId(Buffer _buffer)
        {
            _buffer.WriteUbyte(Id);
        }

        protected override void DecodeId(Buffer _buffer)
        {
            _buffer.ReadUbyte();
        }

        protected override void EncodeImpl(Buffer _buffer)
        {
            _buffer.WriteUbyte(window);
            _buffer.WriteVarint(slot);
            _buffer.WriteVarint(hotbarSlot);
            item.EncodeBody(_buffer);
            _buffer.WriteUbyte(unknown4);
        }

        protected override void DecodeImpl(Buffer _buffer)
        {





        }

        public static ContainerSetSlot FromBuffer(byte[] buffer)
        {
            var ret = new ContainerSetSlot();
            ret.decode(buffer);
            return ret;
        }

    }

    public class ContainerSetData : Packet
    {

        public const byte Id = 51;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        public byte window;
        public int property;
        public int value;

        public ContainerSetData() {}

        public ContainerSetData(byte window, int property, int value)
        {
            this.window = window;
            this.property = property;
            this.value = value;
        }

        public override int GetId()
        {
            return Id;
        }

        protected override void EncodeId(Buffer _buffer)
        {
            _buffer.WriteUbyte(Id);
        }

        protected override void DecodeId(Buffer _buffer)
        {
            _buffer.ReadUbyte();
        }

        protected override void EncodeImpl(Buffer _buffer)
        {
            _buffer.WriteUbyte(window);
            _buffer.WriteVarint(property);
            _buffer.WriteVarint(value);
        }

        protected override void DecodeImpl(Buffer _buffer)
        {



        }

        public static ContainerSetData FromBuffer(byte[] buffer)
        {
            var ret = new ContainerSetData();
            ret.decode(buffer);
            return ret;
        }

    }

    public class ContainerSetContent : Packet
    {

        public const byte Id = 52;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        public uint window;
        public long entityId;
        public Types.Slot[] slots;
        public int[] hotbar;

        public ContainerSetContent() {}

        public ContainerSetContent(uint window, long entityId, Types.Slot[] slots, int[] hotbar)
        {
            this.window = window;
            this.entityId = entityId;
            this.slots = slots;
            this.hotbar = hotbar;
        }

        public override int GetId()
        {
            return Id;
        }

        protected override void EncodeId(Buffer _buffer)
        {
            _buffer.WriteUbyte(Id);
        }

        protected override void DecodeId(Buffer _buffer)
        {
            _buffer.ReadUbyte();
        }

        protected override void EncodeImpl(Buffer _buffer)
        {
            _buffer.WriteVaruint(window);
            _buffer.WriteVarlong(entityId);
            _buffer.WriteVaruint(slots.Length); foreach(Types.Slot slotsChild in slots){ slotsChild.EncodeBody(_buffer); }
            _buffer.WriteVaruint(hotbar.Length); foreach(int hotbarChild in hotbar){ _buffer.WriteVarint(hotbarChild); }
        }

        protected override void DecodeImpl(Buffer _buffer)
        {




        }

        public static ContainerSetContent FromBuffer(byte[] buffer)
        {
            var ret = new ContainerSetContent();
            ret.decode(buffer);
            return ret;
        }

    }

    public class CraftingData : Packet
    {

        public const byte Id = 53;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        public Types.Recipe[] recipes;

        public CraftingData() {}

        public CraftingData(Types.Recipe[] recipes)
        {
            this.recipes = recipes;
        }

        public override int GetId()
        {
            return Id;
        }

        protected override void EncodeId(Buffer _buffer)
        {
            _buffer.WriteUbyte(Id);
        }

        protected override void DecodeId(Buffer _buffer)
        {
            _buffer.ReadUbyte();
        }

        protected override void EncodeImpl(Buffer _buffer)
        {
            _buffer.WriteVaruint(recipes.Length); foreach(Types.Recipe recipesChild in recipes){ recipesChild.EncodeBody(_buffer); }
        }

        protected override void DecodeImpl(Buffer _buffer)
        {

        }

        public static CraftingData FromBuffer(byte[] buffer)
        {
            var ret = new CraftingData();
            ret.decode(buffer);
            return ret;
        }

    }

    public class CraftingEvent : Packet
    {

        public const byte Id = 54;

        public const bool Clientbound = false;
        public const bool Serverbound = true;

        public byte window;
        public int type;
        public Types.McpeUuid uuid;
        public Types.Slot[] input;
        public Types.Slot[] output;

        public CraftingEvent() {}

        public CraftingEvent(byte window, int type, Types.McpeUuid uuid, Types.Slot[] input, Types.Slot[] output)
        {
            this.window = window;
            this.type = type;
            this.uuid = uuid;
            this.input = input;
            this.output = output;
        }

        public override int GetId()
        {
            return Id;
        }

        protected override void EncodeId(Buffer _buffer)
        {
            _buffer.WriteUbyte(Id);
        }

        protected override void DecodeId(Buffer _buffer)
        {
            _buffer.ReadUbyte();
        }

        protected override void EncodeImpl(Buffer _buffer)
        {
            _buffer.WriteUbyte(window);
            _buffer.WriteVarint(type);
            uuid.EncodeBody(_buffer);
            _buffer.WriteVaruint(input.Length); foreach(Types.Slot inputChild in input){ inputChild.EncodeBody(_buffer); }
            _buffer.WriteVaruint(output.Length); foreach(Types.Slot outputChild in output){ outputChild.EncodeBody(_buffer); }
        }

        protected override void DecodeImpl(Buffer _buffer)
        {





        }

        public static CraftingEvent FromBuffer(byte[] buffer)
        {
            var ret = new CraftingEvent();
            ret.decode(buffer);
            return ret;
        }

    }

    public class AdventureSettings : Packet
    {

        public const byte Id = 55;

        public const bool Clientbound = true;
        public const bool Serverbound = true;

        // flags
        public const uint ImmutableWorld = 1;
        public const uint PvpDisabled = 2;
        public const uint PvmDisabled = 4;
        public const uint MvpDisbaled = 8;
        public const uint EvpDisabled = 16;
        public const uint AutoJump = 32;
        public const uint AllowFlight = 64;
        public const uint NoClip = 128;
        public const uint Flying = 512;
        public const uint Muted = 1024;

        // permissions
        public const uint User = 0;
        public const uint Operator = 1;
        public const uint Host = 2;
        public const uint Automation = 3;
        public const uint Admin = 4;

        public uint flags;
        public uint permissions;

        public AdventureSettings() {}

        public AdventureSettings(uint flags, uint permissions)
        {
            this.flags = flags;
            this.permissions = permissions;
        }

        public override int GetId()
        {
            return Id;
        }

        protected override void EncodeId(Buffer _buffer)
        {
            _buffer.WriteUbyte(Id);
        }

        protected override void DecodeId(Buffer _buffer)
        {
            _buffer.ReadUbyte();
        }

        protected override void EncodeImpl(Buffer _buffer)
        {
            _buffer.WriteVaruint(flags);
            _buffer.WriteVaruint(permissions);
        }

        protected override void DecodeImpl(Buffer _buffer)
        {


        }

        public static AdventureSettings FromBuffer(byte[] buffer)
        {
            var ret = new AdventureSettings();
            ret.decode(buffer);
            return ret;
        }

    }

    public class BlockEntityData : Packet
    {

        public const byte Id = 56;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        public Types.BlockPosition position;
        public byte[] nbt;

        public BlockEntityData() {}

        public BlockEntityData(Types.BlockPosition position, byte[] nbt)
        {
            this.position = position;
            this.nbt = nbt;
        }

        public override int GetId()
        {
            return Id;
        }

        protected override void EncodeId(Buffer _buffer)
        {
            _buffer.WriteUbyte(Id);
        }

        protected override void DecodeId(Buffer _buffer)
        {
            _buffer.ReadUbyte();
        }

        protected override void EncodeImpl(Buffer _buffer)
        {
            position.EncodeBody(_buffer);
            _buffer.WriteBytes(nbt);
        }

        protected override void DecodeImpl(Buffer _buffer)
        {


        }

        public static BlockEntityData FromBuffer(byte[] buffer)
        {
            var ret = new BlockEntityData();
            ret.decode(buffer);
            return ret;
        }

    }

    public class PlayerInput : Packet
    {

        public const byte Id = 57;

        public const bool Clientbound = false;
        public const bool Serverbound = true;

        public Tuple<float, float, float> motion;
        public byte flags;
        public bool unknown2;

        public PlayerInput() {}

        public PlayerInput(Tuple<float, float, float> motion, byte flags, bool unknown2)
        {
            this.motion = motion;
            this.flags = flags;
            this.unknown2 = unknown2;
        }

        public override int GetId()
        {
            return Id;
        }

        protected override void EncodeId(Buffer _buffer)
        {
            _buffer.WriteUbyte(Id);
        }

        protected override void DecodeId(Buffer _buffer)
        {
            _buffer.ReadUbyte();
        }

        protected override void EncodeImpl(Buffer _buffer)
        {
            _buffer.WriteLittleEndianFloat(motion[0]); _buffer.WriteLittleEndianFloat(motion[1]); _buffer.WriteLittleEndianFloat(motion[2]);
            _buffer.WriteUbyte(flags);
            _buffer.WriteBool(unknown2);
        }

        protected override void DecodeImpl(Buffer _buffer)
        {



        }

        public static PlayerInput FromBuffer(byte[] buffer)
        {
            var ret = new PlayerInput();
            ret.decode(buffer);
            return ret;
        }

    }

    public class FullChunkData : Packet
    {

        public const byte Id = 58;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        public Tuple<int, int> position;
        public Types.ChunkData data;

        public FullChunkData() {}

        public FullChunkData(Tuple<int, int> position, Types.ChunkData data)
        {
            this.position = position;
            this.data = data;
        }

        public override int GetId()
        {
            return Id;
        }

        protected override void EncodeId(Buffer _buffer)
        {
            _buffer.WriteUbyte(Id);
        }

        protected override void DecodeId(Buffer _buffer)
        {
            _buffer.ReadUbyte();
        }

        protected override void EncodeImpl(Buffer _buffer)
        {
            _buffer.WriteVarint(position[0]); _buffer.WriteVarint(position[1]);
            data.EncodeBody(_buffer);
        }

        protected override void DecodeImpl(Buffer _buffer)
        {


        }

        public static FullChunkData FromBuffer(byte[] buffer)
        {
            var ret = new FullChunkData();
            ret.decode(buffer);
            return ret;
        }

    }

    public class SetCommandsEnabled : Packet
    {

        public const byte Id = 59;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        public bool enabled;

        public SetCommandsEnabled() {}

        public SetCommandsEnabled(bool enabled)
        {
            this.enabled = enabled;
        }

        public override int GetId()
        {
            return Id;
        }

        protected override void EncodeId(Buffer _buffer)
        {
            _buffer.WriteUbyte(Id);
        }

        protected override void DecodeId(Buffer _buffer)
        {
            _buffer.ReadUbyte();
        }

        protected override void EncodeImpl(Buffer _buffer)
        {
            _buffer.WriteBool(enabled);
        }

        protected override void DecodeImpl(Buffer _buffer)
        {

        }

        public static SetCommandsEnabled FromBuffer(byte[] buffer)
        {
            var ret = new SetCommandsEnabled();
            ret.decode(buffer);
            return ret;
        }

    }

    public class SetDifficulty : Packet
    {

        public const byte Id = 60;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        // difficulty
        public const uint Peaceful = 0;
        public const uint Easy = 1;
        public const uint Normal = 2;
        public const uint Hard = 3;

        public uint difficulty;

        public SetDifficulty() {}

        public SetDifficulty(uint difficulty)
        {
            this.difficulty = difficulty;
        }

        public override int GetId()
        {
            return Id;
        }

        protected override void EncodeId(Buffer _buffer)
        {
            _buffer.WriteUbyte(Id);
        }

        protected override void DecodeId(Buffer _buffer)
        {
            _buffer.ReadUbyte();
        }

        protected override void EncodeImpl(Buffer _buffer)
        {
            _buffer.WriteVaruint(difficulty);
        }

        protected override void DecodeImpl(Buffer _buffer)
        {

        }

        public static SetDifficulty FromBuffer(byte[] buffer)
        {
            var ret = new SetDifficulty();
            ret.decode(buffer);
            return ret;
        }

    }

    public class ChangeDimension : Packet
    {

        public const byte Id = 61;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        // dimension
        public const int Overworld = 0;
        public const int Nether = 1;
        public const int End = 2;

        public int dimension;
        public Tuple<float, float, float> position;
        public bool unknown2;

        public ChangeDimension() {}

        public ChangeDimension(int dimension, Tuple<float, float, float> position, bool unknown2)
        {
            this.dimension = dimension;
            this.position = position;
            this.unknown2 = unknown2;
        }

        public override int GetId()
        {
            return Id;
        }

        protected override void EncodeId(Buffer _buffer)
        {
            _buffer.WriteUbyte(Id);
        }

        protected override void DecodeId(Buffer _buffer)
        {
            _buffer.ReadUbyte();
        }

        protected override void EncodeImpl(Buffer _buffer)
        {
            _buffer.WriteVarint(dimension);
            _buffer.WriteLittleEndianFloat(position[0]); _buffer.WriteLittleEndianFloat(position[1]); _buffer.WriteLittleEndianFloat(position[2]);
            _buffer.WriteBool(unknown2);
        }

        protected override void DecodeImpl(Buffer _buffer)
        {



        }

        public static ChangeDimension FromBuffer(byte[] buffer)
        {
            var ret = new ChangeDimension();
            ret.decode(buffer);
            return ret;
        }

    }

    public class SetPlayerGameType : Packet
    {

        public const byte Id = 62;

        public const bool Clientbound = true;
        public const bool Serverbound = true;

        // gamemode
        public const int Survival = 0;
        public const int Creative = 1;
        public const int Adventure = 2;

        public int gamemode;

        public SetPlayerGameType() {}

        public SetPlayerGameType(int gamemode)
        {
            this.gamemode = gamemode;
        }

        public override int GetId()
        {
            return Id;
        }

        protected override void EncodeId(Buffer _buffer)
        {
            _buffer.WriteUbyte(Id);
        }

        protected override void DecodeId(Buffer _buffer)
        {
            _buffer.ReadUbyte();
        }

        protected override void EncodeImpl(Buffer _buffer)
        {
            _buffer.WriteVarint(gamemode);
        }

        protected override void DecodeImpl(Buffer _buffer)
        {

        }

        public static SetPlayerGameType FromBuffer(byte[] buffer)
        {
            var ret = new SetPlayerGameType();
            ret.decode(buffer);
            return ret;
        }

    }

    public class PlayerList : Packet
    {

        public const byte Id = 63;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        public byte action;

        public PlayerList() {}

        public PlayerList(byte action)
        {
            this.action = action;
        }

        public override int GetId()
        {
            return Id;
        }

        protected override void EncodeId(Buffer _buffer)
        {
            _buffer.WriteUbyte(Id);
        }

        protected override void DecodeId(Buffer _buffer)
        {
            _buffer.ReadUbyte();
        }

        protected override void EncodeImpl(Buffer _buffer)
        {
            _buffer.WriteUbyte(action);
        }

        protected override void DecodeImpl(Buffer _buffer)
        {

        }

        public static PlayerList FromBuffer(byte[] buffer)
        {
            var ret = new PlayerList();
            ret.decode(buffer);
            return ret;
        }

    }

    public class SimpleEvent : Packet
    {

        public const byte Id = 63;

        public const bool Clientbound = true;
        public const bool Serverbound = true;



        public SimpleEvent() {}

        public override int GetId()
        {
            return Id;
        }

        protected override void EncodeId(Buffer _buffer)
        {
            _buffer.WriteUbyte(Id);
        }

        protected override void DecodeId(Buffer _buffer)
        {
            _buffer.ReadUbyte();
        }

        protected override void EncodeImpl(Buffer _buffer)
        {

        }

        protected override void DecodeImpl(Buffer _buffer)
        {

        }

        public static SimpleEvent FromBuffer(byte[] buffer)
        {
            var ret = new SimpleEvent();
            ret.decode(buffer);
            return ret;
        }

    }

    public class TelemetryEvent : Packet
    {

        public const byte Id = 64;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        public long entityId;
        public int eventId;

        public TelemetryEvent() {}

        public TelemetryEvent(long entityId, int eventId)
        {
            this.entityId = entityId;
            this.eventId = eventId;
        }

        public override int GetId()
        {
            return Id;
        }

        protected override void EncodeId(Buffer _buffer)
        {
            _buffer.WriteUbyte(Id);
        }

        protected override void DecodeId(Buffer _buffer)
        {
            _buffer.ReadUbyte();
        }

        protected override void EncodeImpl(Buffer _buffer)
        {
            _buffer.WriteVarlong(entityId);
            _buffer.WriteVarint(eventId);
        }

        protected override void DecodeImpl(Buffer _buffer)
        {


        }

        public static TelemetryEvent FromBuffer(byte[] buffer)
        {
            var ret = new TelemetryEvent();
            ret.decode(buffer);
            return ret;
        }

    }

    public class SpawnExperienceOrb : Packet
    {

        public const byte Id = 66;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        public Tuple<float, float, float> position;
        public int count;

        public SpawnExperienceOrb() {}

        public SpawnExperienceOrb(Tuple<float, float, float> position, int count)
        {
            this.position = position;
            this.count = count;
        }

        public override int GetId()
        {
            return Id;
        }

        protected override void EncodeId(Buffer _buffer)
        {
            _buffer.WriteUbyte(Id);
        }

        protected override void DecodeId(Buffer _buffer)
        {
            _buffer.ReadUbyte();
        }

        protected override void EncodeImpl(Buffer _buffer)
        {
            _buffer.WriteLittleEndianFloat(position[0]); _buffer.WriteLittleEndianFloat(position[1]); _buffer.WriteLittleEndianFloat(position[2]);
            _buffer.WriteVarint(count);
        }

        protected override void DecodeImpl(Buffer _buffer)
        {


        }

        public static SpawnExperienceOrb FromBuffer(byte[] buffer)
        {
            var ret = new SpawnExperienceOrb();
            ret.decode(buffer);
            return ret;
        }

    }

    public class ClientboundMapItemData : Packet
    {

        public const byte Id = 67;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        // update
        public const uint Texture = 2;
        public const uint Decorations = 4;
        public const uint Entities = 8;

        public long mapId;
        public uint update;
        public byte scale;
        public Tuple<int, int> size;
        public Tuple<int, int> offset;
        public byte[] data;
        public Types.Decoration[] decorations;

        public ClientboundMapItemData() {}

        public ClientboundMapItemData(long mapId, uint update, byte scale, Tuple<int, int> size, Tuple<int, int> offset, byte[] data, Types.Decoration[] decorations)
        {
            this.mapId = mapId;
            this.update = update;
            this.scale = scale;
            this.size = size;
            this.offset = offset;
            this.data = data;
            this.decorations = decorations;
        }

        public override int GetId()
        {
            return Id;
        }

        protected override void EncodeId(Buffer _buffer)
        {
            _buffer.WriteUbyte(Id);
        }

        protected override void DecodeId(Buffer _buffer)
        {
            _buffer.ReadUbyte();
        }

        protected override void EncodeImpl(Buffer _buffer)
        {
            _buffer.WriteVarlong(mapId);
            _buffer.WriteVaruint(update);
            if(update==2||update==4){ _buffer.WriteUbyte(scale); }
            if(update==2){ _buffer.WriteVarint(size[0]); _buffer.WriteVarint(size[1]); }
            if(update==2){ _buffer.WriteVarint(offset[0]); _buffer.WriteVarint(offset[1]); }
            if(update==2){ _buffer.WriteBytes(data); }
            if(update==4){ _buffer.WriteVaruint(decorations.Length); foreach(Types.Decoration decorationsChild in decorations){ decorationsChild.EncodeBody(_buffer); } }
        }

        protected override void DecodeImpl(Buffer _buffer)
        {


            if(update==2||update==4){  }
            if(update==2){  }
            if(update==2){  }
            if(update==2){  }
            if(update==4){  }
        }

        public static ClientboundMapItemData FromBuffer(byte[] buffer)
        {
            var ret = new ClientboundMapItemData();
            ret.decode(buffer);
            return ret;
        }

    }

    public class MapInfoRequest : Packet
    {

        public const byte Id = 68;

        public const bool Clientbound = false;
        public const bool Serverbound = true;

        public long mapId;

        public MapInfoRequest() {}

        public MapInfoRequest(long mapId)
        {
            this.mapId = mapId;
        }

        public override int GetId()
        {
            return Id;
        }

        protected override void EncodeId(Buffer _buffer)
        {
            _buffer.WriteUbyte(Id);
        }

        protected override void DecodeId(Buffer _buffer)
        {
            _buffer.ReadUbyte();
        }

        protected override void EncodeImpl(Buffer _buffer)
        {
            _buffer.WriteVarlong(mapId);
        }

        protected override void DecodeImpl(Buffer _buffer)
        {

        }

        public static MapInfoRequest FromBuffer(byte[] buffer)
        {
            var ret = new MapInfoRequest();
            ret.decode(buffer);
            return ret;
        }

    }

    public class RequestChunkRadius : Packet
    {

        public const byte Id = 69;

        public const bool Clientbound = false;
        public const bool Serverbound = true;

        public int radius;

        public RequestChunkRadius() {}

        public RequestChunkRadius(int radius)
        {
            this.radius = radius;
        }

        public override int GetId()
        {
            return Id;
        }

        protected override void EncodeId(Buffer _buffer)
        {
            _buffer.WriteUbyte(Id);
        }

        protected override void DecodeId(Buffer _buffer)
        {
            _buffer.ReadUbyte();
        }

        protected override void EncodeImpl(Buffer _buffer)
        {
            _buffer.WriteVarint(radius);
        }

        protected override void DecodeImpl(Buffer _buffer)
        {

        }

        public static RequestChunkRadius FromBuffer(byte[] buffer)
        {
            var ret = new RequestChunkRadius();
            ret.decode(buffer);
            return ret;
        }

    }

    public class ChunkRadiusUpdated : Packet
    {

        public const byte Id = 70;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        public int radius;

        public ChunkRadiusUpdated() {}

        public ChunkRadiusUpdated(int radius)
        {
            this.radius = radius;
        }

        public override int GetId()
        {
            return Id;
        }

        protected override void EncodeId(Buffer _buffer)
        {
            _buffer.WriteUbyte(Id);
        }

        protected override void DecodeId(Buffer _buffer)
        {
            _buffer.ReadUbyte();
        }

        protected override void EncodeImpl(Buffer _buffer)
        {
            _buffer.WriteVarint(radius);
        }

        protected override void DecodeImpl(Buffer _buffer)
        {

        }

        public static ChunkRadiusUpdated FromBuffer(byte[] buffer)
        {
            var ret = new ChunkRadiusUpdated();
            ret.decode(buffer);
            return ret;
        }

    }

    public class ItemFrameDropItem : Packet
    {

        public const byte Id = 71;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        public Types.BlockPosition position;
        public Types.Slot item;

        public ItemFrameDropItem() {}

        public ItemFrameDropItem(Types.BlockPosition position, Types.Slot item)
        {
            this.position = position;
            this.item = item;
        }

        public override int GetId()
        {
            return Id;
        }

        protected override void EncodeId(Buffer _buffer)
        {
            _buffer.WriteUbyte(Id);
        }

        protected override void DecodeId(Buffer _buffer)
        {
            _buffer.ReadUbyte();
        }

        protected override void EncodeImpl(Buffer _buffer)
        {
            position.EncodeBody(_buffer);
            item.EncodeBody(_buffer);
        }

        protected override void DecodeImpl(Buffer _buffer)
        {


        }

        public static ItemFrameDropItem FromBuffer(byte[] buffer)
        {
            var ret = new ItemFrameDropItem();
            ret.decode(buffer);
            return ret;
        }

    }

    public class ReplaceItemInSlot : Packet
    {

        public const byte Id = 72;

        public const bool Clientbound = false;
        public const bool Serverbound = true;

        public Types.Slot item;

        public ReplaceItemInSlot() {}

        public ReplaceItemInSlot(Types.Slot item)
        {
            this.item = item;
        }

        public override int GetId()
        {
            return Id;
        }

        protected override void EncodeId(Buffer _buffer)
        {
            _buffer.WriteUbyte(Id);
        }

        protected override void DecodeId(Buffer _buffer)
        {
            _buffer.ReadUbyte();
        }

        protected override void EncodeImpl(Buffer _buffer)
        {
            item.EncodeBody(_buffer);
        }

        protected override void DecodeImpl(Buffer _buffer)
        {

        }

        public static ReplaceItemInSlot FromBuffer(byte[] buffer)
        {
            var ret = new ReplaceItemInSlot();
            ret.decode(buffer);
            return ret;
        }

    }

    public class GameRulesChanged : Packet
    {

        public const byte Id = 73;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        public Types.Rule[] rules;

        public GameRulesChanged() {}

        public GameRulesChanged(Types.Rule[] rules)
        {
            this.rules = rules;
        }

        public override int GetId()
        {
            return Id;
        }

        protected override void EncodeId(Buffer _buffer)
        {
            _buffer.WriteUbyte(Id);
        }

        protected override void DecodeId(Buffer _buffer)
        {
            _buffer.ReadUbyte();
        }

        protected override void EncodeImpl(Buffer _buffer)
        {
            _buffer.WriteUint(rules.Length); foreach(Types.Rule rulesChild in rules){ rulesChild.EncodeBody(_buffer); }
        }

        protected override void DecodeImpl(Buffer _buffer)
        {

        }

        public static GameRulesChanged FromBuffer(byte[] buffer)
        {
            var ret = new GameRulesChanged();
            ret.decode(buffer);
            return ret;
        }

    }

    public class Camera : Packet
    {

        public const byte Id = 74;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        public long unknown0;
        public long unknown1;

        public Camera() {}

        public Camera(long unknown0, long unknown1)
        {
            this.unknown0 = unknown0;
            this.unknown1 = unknown1;
        }

        public override int GetId()
        {
            return Id;
        }

        protected override void EncodeId(Buffer _buffer)
        {
            _buffer.WriteUbyte(Id);
        }

        protected override void DecodeId(Buffer _buffer)
        {
            _buffer.ReadUbyte();
        }

        protected override void EncodeImpl(Buffer _buffer)
        {
            _buffer.WriteVarlong(unknown0);
            _buffer.WriteVarlong(unknown1);
        }

        protected override void DecodeImpl(Buffer _buffer)
        {


        }

        public static Camera FromBuffer(byte[] buffer)
        {
            var ret = new Camera();
            ret.decode(buffer);
            return ret;
        }

    }

    public class AddItem : Packet
    {

        public const byte Id = 75;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        public Types.Slot item;

        public AddItem() {}

        public AddItem(Types.Slot item)
        {
            this.item = item;
        }

        public override int GetId()
        {
            return Id;
        }

        protected override void EncodeId(Buffer _buffer)
        {
            _buffer.WriteUbyte(Id);
        }

        protected override void DecodeId(Buffer _buffer)
        {
            _buffer.ReadUbyte();
        }

        protected override void EncodeImpl(Buffer _buffer)
        {
            item.EncodeBody(_buffer);
        }

        protected override void DecodeImpl(Buffer _buffer)
        {

        }

        public static AddItem FromBuffer(byte[] buffer)
        {
            var ret = new AddItem();
            ret.decode(buffer);
            return ret;
        }

    }

    public class BossEvent : Packet
    {

        public const byte Id = 76;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        // event id
        public const uint Add = 0;
        public const uint Update = 1;
        public const uint Remove = 2;

        public long entityId;
        public uint eventId;

        public BossEvent() {}

        public BossEvent(long entityId, uint eventId)
        {
            this.entityId = entityId;
            this.eventId = eventId;
        }

        public override int GetId()
        {
            return Id;
        }

        protected override void EncodeId(Buffer _buffer)
        {
            _buffer.WriteUbyte(Id);
        }

        protected override void DecodeId(Buffer _buffer)
        {
            _buffer.ReadUbyte();
        }

        protected override void EncodeImpl(Buffer _buffer)
        {
            _buffer.WriteVarlong(entityId);
            _buffer.WriteVaruint(eventId);
        }

        protected override void DecodeImpl(Buffer _buffer)
        {


        }

        public static BossEvent FromBuffer(byte[] buffer)
        {
            var ret = new BossEvent();
            ret.decode(buffer);
            return ret;
        }

    }

    public class ShowCredits : Packet
    {

        public const byte Id = 77;

        public const bool Clientbound = true;
        public const bool Serverbound = true;

        // status
        public const int Start = 0;
        public const int End = 1;

        public long entityId;
        public int status;

        public ShowCredits() {}

        public ShowCredits(long entityId, int status)
        {
            this.entityId = entityId;
            this.status = status;
        }

        public override int GetId()
        {
            return Id;
        }

        protected override void EncodeId(Buffer _buffer)
        {
            _buffer.WriteUbyte(Id);
        }

        protected override void DecodeId(Buffer _buffer)
        {
            _buffer.ReadUbyte();
        }

        protected override void EncodeImpl(Buffer _buffer)
        {
            _buffer.WriteVarlong(entityId);
            _buffer.WriteVarint(status);
        }

        protected override void DecodeImpl(Buffer _buffer)
        {


        }

        public static ShowCredits FromBuffer(byte[] buffer)
        {
            var ret = new ShowCredits();
            ret.decode(buffer);
            return ret;
        }

    }

    public class AvailableCommands : Packet
    {

        public const byte Id = 78;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        public string commands;
        public string unknown1;

        public AvailableCommands() {}

        public AvailableCommands(string commands, string unknown1)
        {
            this.commands = commands;
            this.unknown1 = unknown1;
        }

        public override int GetId()
        {
            return Id;
        }

        protected override void EncodeId(Buffer _buffer)
        {
            _buffer.WriteUbyte(Id);
        }

        protected override void DecodeId(Buffer _buffer)
        {
            _buffer.ReadUbyte();
        }

        protected override void EncodeImpl(Buffer _buffer)
        {
            _buffer.WriteVaruint(Encoding.UTF8.GetByteCount(commands)); _buffer.WriteString(commands);
            _buffer.WriteVaruint(Encoding.UTF8.GetByteCount(unknown1)); _buffer.WriteString(unknown1);
        }

        protected override void DecodeImpl(Buffer _buffer)
        {


        }

        public static AvailableCommands FromBuffer(byte[] buffer)
        {
            var ret = new AvailableCommands();
            ret.decode(buffer);
            return ret;
        }

    }

    public class CommandStep : Packet
    {

        public const byte Id = 79;

        public const bool Clientbound = false;
        public const bool Serverbound = true;

        public string command;
        public string overload;
        public uint unknown2;
        public uint currentStep;
        public bool done;
        public ulong clientId;
        public string input;
        public string output;

        public CommandStep() {}

        public CommandStep(string command, string overload, uint unknown2, uint currentStep, bool done, ulong clientId, string input, string output)
        {
            this.command = command;
            this.overload = overload;
            this.unknown2 = unknown2;
            this.currentStep = currentStep;
            this.done = done;
            this.clientId = clientId;
            this.input = input;
            this.output = output;
        }

        public override int GetId()
        {
            return Id;
        }

        protected override void EncodeId(Buffer _buffer)
        {
            _buffer.WriteUbyte(Id);
        }

        protected override void DecodeId(Buffer _buffer)
        {
            _buffer.ReadUbyte();
        }

        protected override void EncodeImpl(Buffer _buffer)
        {
            _buffer.WriteVaruint(Encoding.UTF8.GetByteCount(command)); _buffer.WriteString(command);
            _buffer.WriteVaruint(Encoding.UTF8.GetByteCount(overload)); _buffer.WriteString(overload);
            _buffer.WriteVaruint(unknown2);
            _buffer.WriteVaruint(currentStep);
            _buffer.WriteBool(done);
            _buffer.WriteVarulong(clientId);
            _buffer.WriteVaruint(Encoding.UTF8.GetByteCount(input)); _buffer.WriteString(input);
            _buffer.WriteVaruint(Encoding.UTF8.GetByteCount(output)); _buffer.WriteString(output);
        }

        protected override void DecodeImpl(Buffer _buffer)
        {








        }

        public static CommandStep FromBuffer(byte[] buffer)
        {
            var ret = new CommandStep();
            ret.decode(buffer);
            return ret;
        }

    }

    public class CommandBlockUpdate : Packet
    {

        public const byte Id = 80;

        public const bool Clientbound = true;
        public const bool Serverbound = true;

        public bool updateBlock;
        public Types.BlockPosition position;
        public uint mode;
        public bool redstoneMode;
        public bool conditional;
        public long minecart;
        public string command;
        public string lastOutput;
        public string hover;
        public bool trackOutput;

        public CommandBlockUpdate() {}

        public CommandBlockUpdate(bool updateBlock, Types.BlockPosition position, uint mode, bool redstoneMode, bool conditional, long minecart, string command, string lastOutput, string hover, bool trackOutput)
        {
            this.updateBlock = updateBlock;
            this.position = position;
            this.mode = mode;
            this.redstoneMode = redstoneMode;
            this.conditional = conditional;
            this.minecart = minecart;
            this.command = command;
            this.lastOutput = lastOutput;
            this.hover = hover;
            this.trackOutput = trackOutput;
        }

        public override int GetId()
        {
            return Id;
        }

        protected override void EncodeId(Buffer _buffer)
        {
            _buffer.WriteUbyte(Id);
        }

        protected override void DecodeId(Buffer _buffer)
        {
            _buffer.ReadUbyte();
        }

        protected override void EncodeImpl(Buffer _buffer)
        {
            _buffer.WriteBool(updateBlock);
            if(updateBlock==true){ position.EncodeBody(_buffer); }
            if(updateBlock==true){ _buffer.WriteVaruint(mode); }
            if(updateBlock==true){ _buffer.WriteBool(redstoneMode); }
            if(updateBlock==true){ _buffer.WriteBool(conditional); }
            if(updateBlock==false){ _buffer.WriteVarlong(minecart); }
            _buffer.WriteVaruint(Encoding.UTF8.GetByteCount(command)); _buffer.WriteString(command);
            _buffer.WriteVaruint(Encoding.UTF8.GetByteCount(lastOutput)); _buffer.WriteString(lastOutput);
            _buffer.WriteVaruint(Encoding.UTF8.GetByteCount(hover)); _buffer.WriteString(hover);
            _buffer.WriteBool(trackOutput);
        }

        protected override void DecodeImpl(Buffer _buffer)
        {

            if(updateBlock==true){  }
            if(updateBlock==true){  }
            if(updateBlock==true){  }
            if(updateBlock==true){  }
            if(updateBlock==false){  }




        }

        public static CommandBlockUpdate FromBuffer(byte[] buffer)
        {
            var ret = new CommandBlockUpdate();
            ret.decode(buffer);
            return ret;
        }

    }

    public class UpdateTrade : Packet
    {

        public const byte Id = 81;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        public byte unknown0;
        public byte unknown1;
        public int unknown2;
        public int unknown3;
        public bool unknown4;
        public long trader;
        public long player;
        public string unknown7;
        public byte[] offers;

        public UpdateTrade() {}

        public UpdateTrade(byte unknown0, byte unknown1, int unknown2, int unknown3, bool unknown4, long trader, long player, string unknown7, byte[] offers)
        {
            this.unknown0 = unknown0;
            this.unknown1 = unknown1;
            this.unknown2 = unknown2;
            this.unknown3 = unknown3;
            this.unknown4 = unknown4;
            this.trader = trader;
            this.player = player;
            this.unknown7 = unknown7;
            this.offers = offers;
        }

        public override int GetId()
        {
            return Id;
        }

        protected override void EncodeId(Buffer _buffer)
        {
            _buffer.WriteUbyte(Id);
        }

        protected override void DecodeId(Buffer _buffer)
        {
            _buffer.ReadUbyte();
        }

        protected override void EncodeImpl(Buffer _buffer)
        {
            _buffer.WriteUbyte(unknown0);
            _buffer.WriteUbyte(unknown1);
            _buffer.WriteVarint(unknown2);
            _buffer.WriteVarint(unknown3);
            _buffer.WriteBool(unknown4);
            _buffer.WriteVarlong(trader);
            _buffer.WriteVarlong(player);
            _buffer.WriteVaruint(Encoding.UTF8.GetByteCount(unknown7)); _buffer.WriteString(unknown7);
            _buffer.WriteBytes(offers);
        }

        protected override void DecodeImpl(Buffer _buffer)
        {









        }

        public static UpdateTrade FromBuffer(byte[] buffer)
        {
            var ret = new UpdateTrade();
            ret.decode(buffer);
            return ret;
        }

    }

    public class UpdateEquip : Packet
    {

        public const byte Id = 82;

        public const bool Clientbound = true;
        public const bool Serverbound = false;



        public UpdateEquip() {}

        public override int GetId()
        {
            return Id;
        }

        protected override void EncodeId(Buffer _buffer)
        {
            _buffer.WriteUbyte(Id);
        }

        protected override void DecodeId(Buffer _buffer)
        {
            _buffer.ReadUbyte();
        }

        protected override void EncodeImpl(Buffer _buffer)
        {

        }

        protected override void DecodeImpl(Buffer _buffer)
        {

        }

        public static UpdateEquip FromBuffer(byte[] buffer)
        {
            var ret = new UpdateEquip();
            ret.decode(buffer);
            return ret;
        }

    }

    public class ResourcePackDataInfo : Packet
    {

        public const byte Id = 83;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        public string id;
        public uint maxChunkSize;
        public uint chunkCount;
        public ulong compressedPackSize;
        public string sha256;

        public ResourcePackDataInfo() {}

        public ResourcePackDataInfo(string id, uint maxChunkSize, uint chunkCount, ulong compressedPackSize, string sha256)
        {
            this.id = id;
            this.maxChunkSize = maxChunkSize;
            this.chunkCount = chunkCount;
            this.compressedPackSize = compressedPackSize;
            this.sha256 = sha256;
        }

        public override int GetId()
        {
            return Id;
        }

        protected override void EncodeId(Buffer _buffer)
        {
            _buffer.WriteUbyte(Id);
        }

        protected override void DecodeId(Buffer _buffer)
        {
            _buffer.ReadUbyte();
        }

        protected override void EncodeImpl(Buffer _buffer)
        {
            _buffer.WriteVaruint(Encoding.UTF8.GetByteCount(id)); _buffer.WriteString(id);
            _buffer.WriteLittleEndianUint(maxChunkSize);
            _buffer.WriteLittleEndianUint(chunkCount);
            _buffer.WriteLittleEndianUlong(compressedPackSize);
            _buffer.WriteVaruint(Encoding.UTF8.GetByteCount(sha256)); _buffer.WriteString(sha256);
        }

        protected override void DecodeImpl(Buffer _buffer)
        {





        }

        public static ResourcePackDataInfo FromBuffer(byte[] buffer)
        {
            var ret = new ResourcePackDataInfo();
            ret.decode(buffer);
            return ret;
        }

    }

    public class ResourcePackChunkData : Packet
    {

        public const byte Id = 84;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        public string id;
        public uint chunkIndex;
        public ulong progress;
        public byte[] data;

        public ResourcePackChunkData() {}

        public ResourcePackChunkData(string id, uint chunkIndex, ulong progress, byte[] data)
        {
            this.id = id;
            this.chunkIndex = chunkIndex;
            this.progress = progress;
            this.data = data;
        }

        public override int GetId()
        {
            return Id;
        }

        protected override void EncodeId(Buffer _buffer)
        {
            _buffer.WriteUbyte(Id);
        }

        protected override void DecodeId(Buffer _buffer)
        {
            _buffer.ReadUbyte();
        }

        protected override void EncodeImpl(Buffer _buffer)
        {
            _buffer.WriteVaruint(Encoding.UTF8.GetByteCount(id)); _buffer.WriteString(id);
            _buffer.WriteLittleEndianUint(chunkIndex);
            _buffer.WriteLittleEndianUlong(progress);
            _buffer.WriteLittleEndianUint(data.Length); _buffer.WriteLittleEndianBytes(data);
        }

        protected override void DecodeImpl(Buffer _buffer)
        {




        }

        public static ResourcePackChunkData FromBuffer(byte[] buffer)
        {
            var ret = new ResourcePackChunkData();
            ret.decode(buffer);
            return ret;
        }

    }

    public class ResourcePackChunkRequest : Packet
    {

        public const byte Id = 85;

        public const bool Clientbound = false;
        public const bool Serverbound = true;

        public string id;
        public uint chunkIndex;

        public ResourcePackChunkRequest() {}

        public ResourcePackChunkRequest(string id, uint chunkIndex)
        {
            this.id = id;
            this.chunkIndex = chunkIndex;
        }

        public override int GetId()
        {
            return Id;
        }

        protected override void EncodeId(Buffer _buffer)
        {
            _buffer.WriteUbyte(Id);
        }

        protected override void DecodeId(Buffer _buffer)
        {
            _buffer.ReadUbyte();
        }

        protected override void EncodeImpl(Buffer _buffer)
        {
            _buffer.WriteVaruint(Encoding.UTF8.GetByteCount(id)); _buffer.WriteString(id);
            _buffer.WriteLittleEndianUint(chunkIndex);
        }

        protected override void DecodeImpl(Buffer _buffer)
        {


        }

        public static ResourcePackChunkRequest FromBuffer(byte[] buffer)
        {
            var ret = new ResourcePackChunkRequest();
            ret.decode(buffer);
            return ret;
        }

    }

    public class Transfer : Packet
    {

        public const byte Id = 86;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        public string ip;
        public ushort port = 19132;

        public Transfer() {}

        public Transfer(string ip, ushort port)
        {
            this.ip = ip;
            this.port = port;
        }

        public override int GetId()
        {
            return Id;
        }

        protected override void EncodeId(Buffer _buffer)
        {
            _buffer.WriteUbyte(Id);
        }

        protected override void DecodeId(Buffer _buffer)
        {
            _buffer.ReadUbyte();
        }

        protected override void EncodeImpl(Buffer _buffer)
        {
            _buffer.WriteVaruint(Encoding.UTF8.GetByteCount(ip)); _buffer.WriteString(ip);
            _buffer.WriteLittleEndianUshort(port);
        }

        protected override void DecodeImpl(Buffer _buffer)
        {


        }

        public static Transfer FromBuffer(byte[] buffer)
        {
            var ret = new Transfer();
            ret.decode(buffer);
            return ret;
        }

    }

    public class PlaySound : Packet
    {

        public const byte Id = 87;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        public string unknown0;
        public Types.BlockPosition position;
        public float unknown2;
        public float unknown3;

        public PlaySound() {}

        public PlaySound(string unknown0, Types.BlockPosition position, float unknown2, float unknown3)
        {
            this.unknown0 = unknown0;
            this.position = position;
            this.unknown2 = unknown2;
            this.unknown3 = unknown3;
        }

        public override int GetId()
        {
            return Id;
        }

        protected override void EncodeId(Buffer _buffer)
        {
            _buffer.WriteUbyte(Id);
        }

        protected override void DecodeId(Buffer _buffer)
        {
            _buffer.ReadUbyte();
        }

        protected override void EncodeImpl(Buffer _buffer)
        {
            _buffer.WriteVaruint(Encoding.UTF8.GetByteCount(unknown0)); _buffer.WriteString(unknown0);
            position.EncodeBody(_buffer);
            _buffer.WriteLittleEndianFloat(unknown2);
            _buffer.WriteLittleEndianFloat(unknown3);
        }

        protected override void DecodeImpl(Buffer _buffer)
        {




        }

        public static PlaySound FromBuffer(byte[] buffer)
        {
            var ret = new PlaySound();
            ret.decode(buffer);
            return ret;
        }

    }

    public class StopSound : Packet
    {

        public const byte Id = 88;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        public string unknown0;
        public bool unknown1;

        public StopSound() {}

        public StopSound(string unknown0, bool unknown1)
        {
            this.unknown0 = unknown0;
            this.unknown1 = unknown1;
        }

        public override int GetId()
        {
            return Id;
        }

        protected override void EncodeId(Buffer _buffer)
        {
            _buffer.WriteUbyte(Id);
        }

        protected override void DecodeId(Buffer _buffer)
        {
            _buffer.ReadUbyte();
        }

        protected override void EncodeImpl(Buffer _buffer)
        {
            _buffer.WriteVaruint(Encoding.UTF8.GetByteCount(unknown0)); _buffer.WriteString(unknown0);
            _buffer.WriteBool(unknown1);
        }

        protected override void DecodeImpl(Buffer _buffer)
        {


        }

        public static StopSound FromBuffer(byte[] buffer)
        {
            var ret = new StopSound();
            ret.decode(buffer);
            return ret;
        }

    }

    public class SetTitle : Packet
    {

        public const byte Id = 89;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        // action
        public const int Hide = 0;
        public const int Reset = 1;
        public const int SetTitle = 2;
        public const int SetSubtitle = 3;
        public const int SetActionBar = 4;
        public const int SetTimings = 5;

        public int action;
        public string text;
        public int fadeIn;
        public int stay;
        public int fadeOut;

        public SetTitle() {}

        public SetTitle(int action, string text, int fadeIn, int stay, int fadeOut)
        {
            this.action = action;
            this.text = text;
            this.fadeIn = fadeIn;
            this.stay = stay;
            this.fadeOut = fadeOut;
        }

        public override int GetId()
        {
            return Id;
        }

        protected override void EncodeId(Buffer _buffer)
        {
            _buffer.WriteUbyte(Id);
        }

        protected override void DecodeId(Buffer _buffer)
        {
            _buffer.ReadUbyte();
        }

        protected override void EncodeImpl(Buffer _buffer)
        {
            _buffer.WriteVarint(action);
            _buffer.WriteVaruint(Encoding.UTF8.GetByteCount(text)); _buffer.WriteString(text);
            _buffer.WriteVarint(fadeIn);
            _buffer.WriteVarint(stay);
            _buffer.WriteVarint(fadeOut);
        }

        protected override void DecodeImpl(Buffer _buffer)
        {





        }

        public static SetTitle FromBuffer(byte[] buffer)
        {
            var ret = new SetTitle();
            ret.decode(buffer);
            return ret;
        }

    }

    public class AddBehaviorTree : Packet
    {

        public const byte Id = 90;

        public const bool Clientbound = true;
        public const bool Serverbound = false;



        public AddBehaviorTree() {}

        public override int GetId()
        {
            return Id;
        }

        protected override void EncodeId(Buffer _buffer)
        {
            _buffer.WriteUbyte(Id);
        }

        protected override void DecodeId(Buffer _buffer)
        {
            _buffer.ReadUbyte();
        }

        protected override void EncodeImpl(Buffer _buffer)
        {

        }

        protected override void DecodeImpl(Buffer _buffer)
        {

        }

        public static AddBehaviorTree FromBuffer(byte[] buffer)
        {
            var ret = new AddBehaviorTree();
            ret.decode(buffer);
            return ret;
        }

    }

    public class StructureBlockUpdate : Packet
    {

        public const byte Id = 91;

        public const bool Clientbound = true;
        public const bool Serverbound = false;



        public StructureBlockUpdate() {}

        public override int GetId()
        {
            return Id;
        }

        protected override void EncodeId(Buffer _buffer)
        {
            _buffer.WriteUbyte(Id);
        }

        protected override void DecodeId(Buffer _buffer)
        {
            _buffer.ReadUbyte();
        }

        protected override void EncodeImpl(Buffer _buffer)
        {

        }

        protected override void DecodeImpl(Buffer _buffer)
        {

        }

        public static StructureBlockUpdate FromBuffer(byte[] buffer)
        {
            var ret = new StructureBlockUpdate();
            ret.decode(buffer);
            return ret;
        }

    }

    public class ShowStoreOffer : Packet
    {

        public const byte Id = 92;

        public const bool Clientbound = true;
        public const bool Serverbound = false;



        public ShowStoreOffer() {}

        public override int GetId()
        {
            return Id;
        }

        protected override void EncodeId(Buffer _buffer)
        {
            _buffer.WriteUbyte(Id);
        }

        protected override void DecodeId(Buffer _buffer)
        {
            _buffer.ReadUbyte();
        }

        protected override void EncodeImpl(Buffer _buffer)
        {

        }

        protected override void DecodeImpl(Buffer _buffer)
        {

        }

        public static ShowStoreOffer FromBuffer(byte[] buffer)
        {
            var ret = new ShowStoreOffer();
            ret.decode(buffer);
            return ret;
        }

    }

    public class PurchaseReceipt : Packet
    {

        public const byte Id = 93;

        public const bool Clientbound = false;
        public const bool Serverbound = true;



        public PurchaseReceipt() {}

        public override int GetId()
        {
            return Id;
        }

        protected override void EncodeId(Buffer _buffer)
        {
            _buffer.WriteUbyte(Id);
        }

        protected override void DecodeId(Buffer _buffer)
        {
            _buffer.ReadUbyte();
        }

        protected override void EncodeImpl(Buffer _buffer)
        {

        }

        protected override void DecodeImpl(Buffer _buffer)
        {

        }

        public static PurchaseReceipt FromBuffer(byte[] buffer)
        {
            var ret = new PurchaseReceipt();
            ret.decode(buffer);
            return ret;
        }

    }

}
