/*
 * This file was automatically generated by sel-utils and
 * released under the MIT License.
 * 
 * License: https://github.com/sel-project/sel-utils/blob/master/LICENSE
 * Repository: https://github.com/sel-project/sel-utils
 * Generated from https://github.com/sel-project/sel-utils/blob/master/xml/protocol/raknet8.xml
 */
using Types = sul.Raknet8.Types;

namespace sul.Raknet8
{

    public class Ack : Packet
    {

        public const byte Id = 192;

        public const bool Clientbound = true;
        public const bool Serverbound = true;

        public Types.Acknowledge[] packets;

        public Ack() {}

        public Ack(Types.Acknowledge[] packets)
        {
            this.packets = packets;
        }

        public override int GetId()
        {
            return Id;
        }

        public override byte[] Encode()
        {
            return this._buffer;
        }

        public override void Decode(byte[] buffer)
        {
            this._buffer = buffer;
        }

        public static Ack FromBuffer(byte[] buffer)
        {
            var ret = new Ack();
            ret.decode(buffer);
            return ret;
        }

    }

    public class Nack : Packet
    {

        public const byte Id = 160;

        public const bool Clientbound = true;
        public const bool Serverbound = true;

        public Types.Acknowledge[] packets;

        public Nack() {}

        public Nack(Types.Acknowledge[] packets)
        {
            this.packets = packets;
        }

        public override int GetId()
        {
            return Id;
        }

        public override byte[] Encode()
        {
            return this._buffer;
        }

        public override void Decode(byte[] buffer)
        {
            this._buffer = buffer;
        }

        public static Nack FromBuffer(byte[] buffer)
        {
            var ret = new Nack();
            ret.decode(buffer);
            return ret;
        }

    }

    public class Encapsulated : Packet
    {

        public const byte Id = 132;

        public const bool Clientbound = true;
        public const bool Serverbound = true;

        public int count;
        public Types.Encapsulation encapsulation;

        public Encapsulated() {}

        public Encapsulated(int count, Types.Encapsulation encapsulation)
        {
            this.count = count;
            this.encapsulation = encapsulation;
        }

        public override int GetId()
        {
            return Id;
        }

        public override byte[] Encode()
        {
            return this._buffer;
        }

        public override void Decode(byte[] buffer)
        {
            this._buffer = buffer;
        }

        public static Encapsulated FromBuffer(byte[] buffer)
        {
            var ret = new Encapsulated();
            ret.decode(buffer);
            return ret;
        }

    }

}
