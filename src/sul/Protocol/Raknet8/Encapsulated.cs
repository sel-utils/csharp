/*
 * This file was automatically generated by sel-utils and
 * released under the MIT License.
 * 
 * License: https://github.com/sel-project/sel-utils/blob/master/LICENSE
 * Repository: https://github.com/sel-project/sel-utils
 * Generated from https://github.com/sel-project/sel-utils/blob/master/xml/protocol/raknet8.xml
 */
using Types = sul.Raknet8.Types;

using Utils.Buffer;
using Utils.Packet;

namespace sul.Raknet8
{

    public class ClientConnect : Packet
    {

        public const byte Id = 9;

        public const bool Clientbound = false;
        public const bool Serverbound = true;

        public long clientId;
        public long pingId;

        public ClientConnect() {}

        public ClientConnect(long clientId, long pingId)
        {
            this.clientId = clientId;
            this.pingId = pingId;
        }

        public override int GetId()
        {
            return Id;
        }

        public override void EncodeId(Buffer _buffer)
        {
            _buffer.WriteUbyte(Id);
        }

        public override void DecodeId(Buffer _buffer)
        {
            _buffer.ReadUbyte();
        }

        public override void EncodeImpl(Buffer _buffer)
        {
            _buffer.WriteBigEndianLong(clientId);
            _buffer.WriteBigEndianLong(pingId);
        }

        public override void DecodeImpl(Buffer _buffer)
        {


        }

        public static ClientConnect FromBuffer(byte[] buffer)
        {
            var ret = new ClientConnect();
            ret.decode(buffer);
            return ret;
        }

    }

    public class ServerHandshake : Packet
    {

        public const byte Id = 16;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        public Types.Address clientAddress;
        public ushort mtuLength;
        public Types.Address[10] systemAddresses;
        public long pingId;
        public long serverId;

        public ServerHandshake() {}

        public ServerHandshake(Types.Address clientAddress, ushort mtuLength, Types.Address[10] systemAddresses, long pingId, long serverId)
        {
            this.clientAddress = clientAddress;
            this.mtuLength = mtuLength;
            this.systemAddresses = systemAddresses;
            this.pingId = pingId;
            this.serverId = serverId;
        }

        public override int GetId()
        {
            return Id;
        }

        public override void EncodeId(Buffer _buffer)
        {
            _buffer.WriteUbyte(Id);
        }

        public override void DecodeId(Buffer _buffer)
        {
            _buffer.ReadUbyte();
        }

        public override void EncodeImpl(Buffer _buffer)
        {
            clientAddress.EncodeImpl(_buffer);
            _buffer.WriteBigEndianUshort(mtuLength);
            foreach(Types.Address systemAddressesChild in systemAddresses){ systemAddressesChild.EncodeImpl(_buffer); }
            _buffer.WriteBigEndianLong(pingId);
            _buffer.WriteBigEndianLong(serverId);
        }

        public override void DecodeImpl(Buffer _buffer)
        {





        }

        public static ServerHandshake FromBuffer(byte[] buffer)
        {
            var ret = new ServerHandshake();
            ret.decode(buffer);
            return ret;
        }

    }

    public class ClientHandshake : Packet
    {

        public const byte Id = 19;

        public const bool Clientbound = false;
        public const bool Serverbound = true;

        public Types.Address clientAddress;
        public Types.Address[10] systemAddresses;
        public long pingId;
        public long clientId;

        public ClientHandshake() {}

        public ClientHandshake(Types.Address clientAddress, Types.Address[10] systemAddresses, long pingId, long clientId)
        {
            this.clientAddress = clientAddress;
            this.systemAddresses = systemAddresses;
            this.pingId = pingId;
            this.clientId = clientId;
        }

        public override int GetId()
        {
            return Id;
        }

        public override void EncodeId(Buffer _buffer)
        {
            _buffer.WriteUbyte(Id);
        }

        public override void DecodeId(Buffer _buffer)
        {
            _buffer.ReadUbyte();
        }

        public override void EncodeImpl(Buffer _buffer)
        {
            clientAddress.EncodeImpl(_buffer);
            foreach(Types.Address systemAddressesChild in systemAddresses){ systemAddressesChild.EncodeImpl(_buffer); }
            _buffer.WriteBigEndianLong(pingId);
            _buffer.WriteBigEndianLong(clientId);
        }

        public override void DecodeImpl(Buffer _buffer)
        {




        }

        public static ClientHandshake FromBuffer(byte[] buffer)
        {
            var ret = new ClientHandshake();
            ret.decode(buffer);
            return ret;
        }

    }

    public class ClientCancelConnection : Packet
    {

        public const byte Id = 21;

        public const bool Clientbound = false;
        public const bool Serverbound = true;



        public ClientCancelConnection() {}

        public override int GetId()
        {
            return Id;
        }

        public override void EncodeId(Buffer _buffer)
        {
            _buffer.WriteUbyte(Id);
        }

        public override void DecodeId(Buffer _buffer)
        {
            _buffer.ReadUbyte();
        }

        public override void EncodeImpl(Buffer _buffer)
        {

        }

        public override void DecodeImpl(Buffer _buffer)
        {

        }

        public static ClientCancelConnection FromBuffer(byte[] buffer)
        {
            var ret = new ClientCancelConnection();
            ret.decode(buffer);
            return ret;
        }

    }

    public class Ping : Packet
    {

        public const byte Id = 0;

        public const bool Clientbound = false;
        public const bool Serverbound = true;

        public long time;

        public Ping() {}

        public Ping(long time)
        {
            this.time = time;
        }

        public override int GetId()
        {
            return Id;
        }

        public override void EncodeId(Buffer _buffer)
        {
            _buffer.WriteUbyte(Id);
        }

        public override void DecodeId(Buffer _buffer)
        {
            _buffer.ReadUbyte();
        }

        public override void EncodeImpl(Buffer _buffer)
        {
            _buffer.WriteBigEndianLong(time);
        }

        public override void DecodeImpl(Buffer _buffer)
        {

        }

        public static Ping FromBuffer(byte[] buffer)
        {
            var ret = new Ping();
            ret.decode(buffer);
            return ret;
        }

    }

    public class Pong : Packet
    {

        public const byte Id = 3;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        public long time;

        public Pong() {}

        public Pong(long time)
        {
            this.time = time;
        }

        public override int GetId()
        {
            return Id;
        }

        public override void EncodeId(Buffer _buffer)
        {
            _buffer.WriteUbyte(Id);
        }

        public override void DecodeId(Buffer _buffer)
        {
            _buffer.ReadUbyte();
        }

        public override void EncodeImpl(Buffer _buffer)
        {
            _buffer.WriteBigEndianLong(time);
        }

        public override void DecodeImpl(Buffer _buffer)
        {

        }

        public static Pong FromBuffer(byte[] buffer)
        {
            var ret = new Pong();
            ret.decode(buffer);
            return ret;
        }

    }

    public class Mcpe : Packet
    {

        public const byte Id = 254;

        public const bool Clientbound = true;
        public const bool Serverbound = true;

        public byte[] packet;

        public Mcpe() {}

        public Mcpe(byte[] packet)
        {
            this.packet = packet;
        }

        public override int GetId()
        {
            return Id;
        }

        public override void EncodeId(Buffer _buffer)
        {
            _buffer.WriteUbyte(Id);
        }

        public override void DecodeId(Buffer _buffer)
        {
            _buffer.ReadUbyte();
        }

        public override void EncodeImpl(Buffer _buffer)
        {
            _buffer.WriteBytes(packet);
        }

        public override void DecodeImpl(Buffer _buffer)
        {

        }

        public static Mcpe FromBuffer(byte[] buffer)
        {
            var ret = new Mcpe();
            ret.decode(buffer);
            return ret;
        }

    }

}
