/*
 * This file was automatically generated by sel-utils and
 * released under the MIT License.
 * 
 * License: https://github.com/sel-project/sel-utils/blob/master/LICENSE
 * Repository: https://github.com/sel-project/sel-utils
 * Generated from https://github.com/sel-project/sel-utils/blob/master/xml/protocol/raknet8.xml
 */
using System.Text;

using sul.Utils;
using sul.Raknet8.Types;

namespace sul.Raknet8.Encapsulated
{

    public class ClientConnect : sul.Utils.Packet
    {

        public const byte Id = 9;

        public const bool Clientbound = false;
        public const bool Serverbound = true;

        public long clientId;
        public long pingId;

        public ClientConnect() : this(0, 0) {}

        public ClientConnect(long clientId, long pingId)
        {
            this.clientId = clientId;
            this.pingId = pingId;
        }

        public override int GetId()
        {
            return (int)Id;
        }

        public override void EncodeId(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteUbyte(Id);
        }

        public override void DecodeId(sul.Utils.Buffer _buffer)
        {
            //_buffer.ReadUbyte();
        }

        protected override void EncodeImpl(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteBigEndianLong(clientId);
            _buffer.WriteBigEndianLong(pingId);
        }

        protected override void DecodeImpl(sul.Utils.Buffer _buffer)
        {
            //clientId = _buffer.ReadBigEndianLong();
            //pingId = _buffer.ReadBigEndianLong();
        }

        public static ClientConnect FromBuffer(byte[] buffer)
        {
            var ret = new ClientConnect();
            ret.Decode(buffer);
            return ret;
        }

    }

    public class ServerHandshake : sul.Utils.Packet
    {

        public const byte Id = 16;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        public Address clientAddress;
        public ushort mtuLength;
        public Address[] systemAddresses;
        public long pingId;
        public long serverId;

        public ServerHandshake() : this(new Address(), 0, new Address[10], 0, 0) {}

        public ServerHandshake(Address clientAddress, ushort mtuLength, Address[] systemAddresses, long pingId, long serverId)
        {
            this.clientAddress = clientAddress;
            this.mtuLength = mtuLength;
            this.systemAddresses = systemAddresses;
            this.pingId = pingId;
            this.serverId = serverId;
        }

        public override int GetId()
        {
            return (int)Id;
        }

        public override void EncodeId(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteUbyte(Id);
        }

        public override void DecodeId(sul.Utils.Buffer _buffer)
        {
            //_buffer.ReadUbyte();
        }

        protected override void EncodeImpl(sul.Utils.Buffer _buffer)
        {
            clientAddress.EncodeBody(_buffer);
            _buffer.WriteBigEndianUshort(mtuLength);
            foreach (Address systemAddressesChild in systemAddresses){ systemAddressesChild.EncodeBody(_buffer); }
            _buffer.WriteBigEndianLong(pingId);
            _buffer.WriteBigEndianLong(serverId);
        }

        protected override void DecodeImpl(sul.Utils.Buffer _buffer)
        {
            //clientAddress.DecodeBody(_buffer);
            //mtuLength = _buffer.ReadBigEndianUshort();
            //systemAddresses.DecodeBody(_buffer);
            //pingId = _buffer.ReadBigEndianLong();
            //serverId = _buffer.ReadBigEndianLong();
        }

        public static ServerHandshake FromBuffer(byte[] buffer)
        {
            var ret = new ServerHandshake();
            ret.Decode(buffer);
            return ret;
        }

    }

    public class ClientHandshake : sul.Utils.Packet
    {

        public const byte Id = 19;

        public const bool Clientbound = false;
        public const bool Serverbound = true;

        public Address clientAddress;
        public Address[] systemAddresses;
        public long pingId;
        public long clientId;

        public ClientHandshake() : this(new Address(), new Address[10], 0, 0) {}

        public ClientHandshake(Address clientAddress, Address[] systemAddresses, long pingId, long clientId)
        {
            this.clientAddress = clientAddress;
            this.systemAddresses = systemAddresses;
            this.pingId = pingId;
            this.clientId = clientId;
        }

        public override int GetId()
        {
            return (int)Id;
        }

        public override void EncodeId(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteUbyte(Id);
        }

        public override void DecodeId(sul.Utils.Buffer _buffer)
        {
            //_buffer.ReadUbyte();
        }

        protected override void EncodeImpl(sul.Utils.Buffer _buffer)
        {
            clientAddress.EncodeBody(_buffer);
            foreach (Address systemAddressesChild in systemAddresses){ systemAddressesChild.EncodeBody(_buffer); }
            _buffer.WriteBigEndianLong(pingId);
            _buffer.WriteBigEndianLong(clientId);
        }

        protected override void DecodeImpl(sul.Utils.Buffer _buffer)
        {
            //clientAddress.DecodeBody(_buffer);
            //systemAddresses.DecodeBody(_buffer);
            //pingId = _buffer.ReadBigEndianLong();
            //clientId = _buffer.ReadBigEndianLong();
        }

        public static ClientHandshake FromBuffer(byte[] buffer)
        {
            var ret = new ClientHandshake();
            ret.Decode(buffer);
            return ret;
        }

    }

    public class ClientCancelConnection : sul.Utils.Packet
    {

        public const byte Id = 21;

        public const bool Clientbound = false;
        public const bool Serverbound = true;



        public ClientCancelConnection()
        {

        }

        public override int GetId()
        {
            return (int)Id;
        }

        public override void EncodeId(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteUbyte(Id);
        }

        public override void DecodeId(sul.Utils.Buffer _buffer)
        {
            //_buffer.ReadUbyte();
        }

        protected override void EncodeImpl(sul.Utils.Buffer _buffer)
        {

        }

        protected override void DecodeImpl(sul.Utils.Buffer _buffer)
        {

        }

        public static ClientCancelConnection FromBuffer(byte[] buffer)
        {
            var ret = new ClientCancelConnection();
            ret.Decode(buffer);
            return ret;
        }

    }

    public class Ping : sul.Utils.Packet
    {

        public const byte Id = 0;

        public const bool Clientbound = false;
        public const bool Serverbound = true;

        public long time;

        public Ping() : this(0) {}

        public Ping(long time)
        {
            this.time = time;
        }

        public override int GetId()
        {
            return (int)Id;
        }

        public override void EncodeId(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteUbyte(Id);
        }

        public override void DecodeId(sul.Utils.Buffer _buffer)
        {
            //_buffer.ReadUbyte();
        }

        protected override void EncodeImpl(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteBigEndianLong(time);
        }

        protected override void DecodeImpl(sul.Utils.Buffer _buffer)
        {
            //time = _buffer.ReadBigEndianLong();
        }

        public static Ping FromBuffer(byte[] buffer)
        {
            var ret = new Ping();
            ret.Decode(buffer);
            return ret;
        }

    }

    public class Pong : sul.Utils.Packet
    {

        public const byte Id = 3;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        public long time;

        public Pong() : this(0) {}

        public Pong(long time)
        {
            this.time = time;
        }

        public override int GetId()
        {
            return (int)Id;
        }

        public override void EncodeId(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteUbyte(Id);
        }

        public override void DecodeId(sul.Utils.Buffer _buffer)
        {
            //_buffer.ReadUbyte();
        }

        protected override void EncodeImpl(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteBigEndianLong(time);
        }

        protected override void DecodeImpl(sul.Utils.Buffer _buffer)
        {
            //time = _buffer.ReadBigEndianLong();
        }

        public static Pong FromBuffer(byte[] buffer)
        {
            var ret = new Pong();
            ret.Decode(buffer);
            return ret;
        }

    }

    public class Mcpe : sul.Utils.Packet
    {

        public const byte Id = 254;

        public const bool Clientbound = true;
        public const bool Serverbound = true;

        public byte[] packet;

        public Mcpe() : this(new byte[]{}) {}

        public Mcpe(byte[] packet)
        {
            this.packet = packet;
        }

        public override int GetId()
        {
            return (int)Id;
        }

        public override void EncodeId(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteUbyte(Id);
        }

        public override void DecodeId(sul.Utils.Buffer _buffer)
        {
            //_buffer.ReadUbyte();
        }

        protected override void EncodeImpl(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteBytes(packet);
        }

        protected override void DecodeImpl(sul.Utils.Buffer _buffer)
        {
            //packet = _buffer.ReadBytes();
        }

        public static Mcpe FromBuffer(byte[] buffer)
        {
            var ret = new Mcpe();
            ret.Decode(buffer);
            return ret;
        }

    }

}
