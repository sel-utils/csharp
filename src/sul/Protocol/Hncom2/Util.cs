/*
 * This file was automatically generated by sel-utils and
 * released under the MIT License.
 * 
 * License: https://github.com/sel-project/sel-utils/blob/master/LICENSE
 * Repository: https://github.com/sel-project/sel-utils
 * Generated from https://github.com/sel-project/sel-utils/blob/master/xml/protocol/hncom2.xml
 */
using System.Text;

using sul.Utils;
using sul.Protocol.Hncom2.Types;

namespace sul.Protocol.Hncom2.Util
{

    public class Uncompressed : sul.Utils.Packet
    {

        public const byte Id = 1;

        public const bool Clientbound = true;
        public const bool Serverbound = true;

        public byte[][] packets;

        public Uncompressed() : this(new byte[][]{}) {}

        public Uncompressed(byte[][] packets)
        {
            this.packets = packets;
        }

        public override int GetId()
        {
            return (int)Id;
        }

        public override void EncodeId(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteUbyte(Id);
        }

        public override void DecodeId(sul.Utils.Buffer _buffer)
        {
            //_buffer.ReadUbyte();
        }

        protected override void EncodeImpl(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteVaruint(packets.Length); foreach (byte[] packetsChild in packets){ _buffer.WriteVaruint(packetsChild.Length); _buffer.WriteBytes(packetsChild); }
        }

        protected override void DecodeImpl(sul.Utils.Buffer _buffer)
        {
            //packets.DecodeBody(_buffer);
        }

        public static Uncompressed FromBuffer(byte[] buffer)
        {
            var ret = new Uncompressed();
            ret.Decode(buffer);
            return ret;
        }

    }

    public class Compressed : sul.Utils.Packet
    {

        public const byte Id = 2;

        public const bool Clientbound = true;
        public const bool Serverbound = true;

        public uint size;
        public byte[] payload;

        public Compressed() : this(0, new byte[]{}) {}

        public Compressed(uint size, byte[] payload)
        {
            this.size = size;
            this.payload = payload;
        }

        public override int GetId()
        {
            return (int)Id;
        }

        public override void EncodeId(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteUbyte(Id);
        }

        public override void DecodeId(sul.Utils.Buffer _buffer)
        {
            //_buffer.ReadUbyte();
        }

        protected override void EncodeImpl(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteVaruint(size);
            _buffer.WriteBytes(payload);
        }

        protected override void DecodeImpl(sul.Utils.Buffer _buffer)
        {
            //size = _buffer.ReadVaruint();
            //payload = _buffer.ReadBytes();
        }

        public static Compressed FromBuffer(byte[] buffer)
        {
            var ret = new Compressed();
            ret.Decode(buffer);
            return ret;
        }

    }

}
