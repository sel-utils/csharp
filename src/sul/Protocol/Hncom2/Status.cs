/*
 * This file was automatically generated by sel-utils and
 * released under the MIT License.
 * 
 * License: https://github.com/sel-project/sel-utils/blob/master/LICENSE
 * Repository: https://github.com/sel-project/sel-utils
 * Generated from https://github.com/sel-project/sel-utils/blob/master/xml/protocol/hncom2.xml
 */
using Types = sul.Hncom2.Types;

using Utils.Buffer;
using Utils.Packet;

namespace sul.Hncom2
{

    public class AddNode : Packet
    {

        public const byte Id = 7;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        public uint hubId;
        public string name;
        public bool main;
        public Types.Game[] acceptedGames;

        public AddNode() {}

        public AddNode(uint hubId, string name, bool main, Types.Game[] acceptedGames)
        {
            this.hubId = hubId;
            this.name = name;
            this.main = main;
            this.acceptedGames = acceptedGames;
        }

        public override int GetId()
        {
            return Id;
        }

        public override void EncodeId(Buffer _buffer)
        {
            _buffer.WriteUbyte(Id);
        }

        public override void DecodeId(Buffer _buffer)
        {
            _buffer.ReadUbyte();
        }

        public override void EncodeImpl(Buffer _buffer)
        {
            _buffer.WriteVaruint(hubId);
            _buffer.WriteString(name);
            _buffer.WriteBool(main);
            foreach(Types.Game acceptedGamesChild in acceptedGames){ acceptedGamesChild.EncodeImpl(_buffer); }
        }

        public override void DecodeImpl(Buffer _buffer)
        {




        }

        public static AddNode FromBuffer(byte[] buffer)
        {
            var ret = new AddNode();
            ret.decode(buffer);
            return ret;
        }

    }

    public class RemoveNode : Packet
    {

        public const byte Id = 8;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        public uint hubId;

        public RemoveNode() {}

        public RemoveNode(uint hubId)
        {
            this.hubId = hubId;
        }

        public override int GetId()
        {
            return Id;
        }

        public override void EncodeId(Buffer _buffer)
        {
            _buffer.WriteUbyte(Id);
        }

        public override void DecodeId(Buffer _buffer)
        {
            _buffer.ReadUbyte();
        }

        public override void EncodeImpl(Buffer _buffer)
        {
            _buffer.WriteVaruint(hubId);
        }

        public override void DecodeImpl(Buffer _buffer)
        {

        }

        public static RemoveNode FromBuffer(byte[] buffer)
        {
            var ret = new RemoveNode();
            ret.decode(buffer);
            return ret;
        }

    }

    public class MessageServerbound : Packet
    {

        public const byte Id = 9;

        public const bool Clientbound = false;
        public const bool Serverbound = true;

        public uint[] addressees;
        public byte[] payload;

        public MessageServerbound() {}

        public MessageServerbound(uint[] addressees, byte[] payload)
        {
            this.addressees = addressees;
            this.payload = payload;
        }

        public override int GetId()
        {
            return Id;
        }

        public override void EncodeId(Buffer _buffer)
        {
            _buffer.WriteUbyte(Id);
        }

        public override void DecodeId(Buffer _buffer)
        {
            _buffer.ReadUbyte();
        }

        public override void EncodeImpl(Buffer _buffer)
        {
            foreach(uint addresseesChild in addressees){ _buffer.WriteVaruint(addresseesChild); }
            foreach(byte payloadChild in payload){ _buffer.WriteUbyte(payloadChild); }
        }

        public override void DecodeImpl(Buffer _buffer)
        {


        }

        public static MessageServerbound FromBuffer(byte[] buffer)
        {
            var ret = new MessageServerbound();
            ret.decode(buffer);
            return ret;
        }

    }

    public class MessageClientbound : Packet
    {

        public const byte Id = 10;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        public uint sender;
        public byte[] payload;

        public MessageClientbound() {}

        public MessageClientbound(uint sender, byte[] payload)
        {
            this.sender = sender;
            this.payload = payload;
        }

        public override int GetId()
        {
            return Id;
        }

        public override void EncodeId(Buffer _buffer)
        {
            _buffer.WriteUbyte(Id);
        }

        public override void DecodeId(Buffer _buffer)
        {
            _buffer.ReadUbyte();
        }

        public override void EncodeImpl(Buffer _buffer)
        {
            _buffer.WriteVaruint(sender);
            foreach(byte payloadChild in payload){ _buffer.WriteUbyte(payloadChild); }
        }

        public override void DecodeImpl(Buffer _buffer)
        {


        }

        public static MessageClientbound FromBuffer(byte[] buffer)
        {
            var ret = new MessageClientbound();
            ret.decode(buffer);
            return ret;
        }

    }

    public class Players : Packet
    {

        public const byte Id = 11;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        // max
        public const int Unlimited = -1;

        public uint online;
        public int max;

        public Players() {}

        public Players(uint online, int max)
        {
            this.online = online;
            this.max = max;
        }

        public override int GetId()
        {
            return Id;
        }

        public override void EncodeId(Buffer _buffer)
        {
            _buffer.WriteUbyte(Id);
        }

        public override void DecodeId(Buffer _buffer)
        {
            _buffer.ReadUbyte();
        }

        public override void EncodeImpl(Buffer _buffer)
        {
            _buffer.WriteVaruint(online);
            _buffer.WriteVarint(max);
        }

        public override void DecodeImpl(Buffer _buffer)
        {


        }

        public static Players FromBuffer(byte[] buffer)
        {
            var ret = new Players();
            ret.decode(buffer);
            return ret;
        }

    }

    public class ResourcesUsage : Packet
    {

        public const byte Id = 12;

        public const bool Clientbound = false;
        public const bool Serverbound = true;

        public float tps;
        public ulong ram;
        public float cpu;

        public ResourcesUsage() {}

        public ResourcesUsage(float tps, ulong ram, float cpu)
        {
            this.tps = tps;
            this.ram = ram;
            this.cpu = cpu;
        }

        public override int GetId()
        {
            return Id;
        }

        public override void EncodeId(Buffer _buffer)
        {
            _buffer.WriteUbyte(Id);
        }

        public override void DecodeId(Buffer _buffer)
        {
            _buffer.ReadUbyte();
        }

        public override void EncodeImpl(Buffer _buffer)
        {
            _buffer.WriteBigEndianFloat(tps);
            _buffer.WriteVarulong(ram);
            _buffer.WriteBigEndianFloat(cpu);
        }

        public override void DecodeImpl(Buffer _buffer)
        {



        }

        public static ResourcesUsage FromBuffer(byte[] buffer)
        {
            var ret = new ResourcesUsage();
            ret.decode(buffer);
            return ret;
        }

    }

    public class Log : Packet
    {

        public const byte Id = 13;

        public const bool Clientbound = false;
        public const bool Serverbound = true;

        // world
        public const int NoWorld = -1;

        public ulong timestamp;
        public int world;
        public string logger;
        public string message;
        public int commandId;

        public Log() {}

        public Log(ulong timestamp, int world, string logger, string message, int commandId)
        {
            this.timestamp = timestamp;
            this.world = world;
            this.logger = logger;
            this.message = message;
            this.commandId = commandId;
        }

        public override int GetId()
        {
            return Id;
        }

        public override void EncodeId(Buffer _buffer)
        {
            _buffer.WriteUbyte(Id);
        }

        public override void DecodeId(Buffer _buffer)
        {
            _buffer.ReadUbyte();
        }

        public override void EncodeImpl(Buffer _buffer)
        {
            _buffer.WriteVarulong(timestamp);
            _buffer.WriteVarint(world);
            if(world<0){ _buffer.WriteString(logger); }
            _buffer.WriteString(message);
            _buffer.WriteVarint(commandId);
        }

        public override void DecodeImpl(Buffer _buffer)
        {


            if(world<0){  }


        }

        public static Log FromBuffer(byte[] buffer)
        {
            var ret = new Log();
            ret.decode(buffer);
            return ret;
        }

    }

    public class RemoteCommand : Packet
    {

        public const byte Id = 14;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        // origin
        public const byte Hub = 0;
        public const byte ExternalConsole = 1;
        public const byte Rcon = 2;

        public byte origin;
        public Types.Address sender;
        public string command;
        public int commandId;

        public RemoteCommand() {}

        public RemoteCommand(byte origin, Types.Address sender, string command, int commandId)
        {
            this.origin = origin;
            this.sender = sender;
            this.command = command;
            this.commandId = commandId;
        }

        public override int GetId()
        {
            return Id;
        }

        public override void EncodeId(Buffer _buffer)
        {
            _buffer.WriteUbyte(Id);
        }

        public override void DecodeId(Buffer _buffer)
        {
            _buffer.ReadUbyte();
        }

        public override void EncodeImpl(Buffer _buffer)
        {
            _buffer.WriteUbyte(origin);
            if(origin!=0){ sender.EncodeImpl(_buffer); }
            _buffer.WriteString(command);
            _buffer.WriteVarint(commandId);
        }

        public override void DecodeImpl(Buffer _buffer)
        {

            if(origin!=0){  }


        }

        public static RemoteCommand FromBuffer(byte[] buffer)
        {
            var ret = new RemoteCommand();
            ret.decode(buffer);
            return ret;
        }

    }

    public class UpdateList : Packet
    {

        public const byte Id = 15;

        public const bool Clientbound = false;
        public const bool Serverbound = true;

        // list
        public const byte Whitelist = 0;
        public const byte Blacklist = 1;

        // action
        public const byte Add = 0;
        public const byte Remove = 1;

        public byte list;
        public byte action;
        public byte type;

        public UpdateList() {}

        public UpdateList(byte list, byte action, byte type)
        {
            this.list = list;
            this.action = action;
            this.type = type;
        }

        public override int GetId()
        {
            return Id;
        }

        public override void EncodeId(Buffer _buffer)
        {
            _buffer.WriteUbyte(Id);
        }

        public override void DecodeId(Buffer _buffer)
        {
            _buffer.ReadUbyte();
        }

        public override void EncodeImpl(Buffer _buffer)
        {
            _buffer.WriteUbyte(list);
            _buffer.WriteUbyte(action);
            _buffer.WriteUbyte(type);
        }

        public override void DecodeImpl(Buffer _buffer)
        {



        }

        public static UpdateList FromBuffer(byte[] buffer)
        {
            var ret = new UpdateList();
            ret.decode(buffer);
            return ret;
        }

    }

    public class Reload : Packet
    {

        public const byte Id = 16;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        public string displayName;
        public Types.Motd[] motds;
        public string language;
        public string[] acceptedLanguages;
        public string socialJson;

        public Reload() {}

        public Reload(string displayName, Types.Motd[] motds, string language, string[] acceptedLanguages, string socialJson)
        {
            this.displayName = displayName;
            this.motds = motds;
            this.language = language;
            this.acceptedLanguages = acceptedLanguages;
            this.socialJson = socialJson;
        }

        public override int GetId()
        {
            return Id;
        }

        public override void EncodeId(Buffer _buffer)
        {
            _buffer.WriteUbyte(Id);
        }

        public override void DecodeId(Buffer _buffer)
        {
            _buffer.ReadUbyte();
        }

        public override void EncodeImpl(Buffer _buffer)
        {
            _buffer.WriteString(displayName);
            foreach(Types.Motd motdsChild in motds){ motdsChild.EncodeImpl(_buffer); }
            _buffer.WriteString(language);
            foreach(string acceptedLanguagesChild in acceptedLanguages){ _buffer.WriteString(acceptedLanguagesChild); }
            _buffer.WriteString(socialJson);
        }

        public override void DecodeImpl(Buffer _buffer)
        {





        }

        public static Reload FromBuffer(byte[] buffer)
        {
            var ret = new Reload();
            ret.decode(buffer);
            return ret;
        }

    }

}
