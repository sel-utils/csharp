/*
 * This file was automatically generated by sel-utils and
 * released under the MIT License.
 * 
 * License: https://github.com/sel-project/sel-utils/blob/master/LICENSE
 * Repository: https://github.com/sel-project/sel-utils
 * Generated from https://github.com/sel-project/sel-utils/blob/master/xml/protocol/hncom2.xml
 */
using System.Text;

namespace sul.Hncom2.Types
{

    public class Address : sul.Utils.Stream
    {

        public byte[] bytes;
        public ushort port;

        public Address() : this(new byte[]{}, 0) {}

        public Address(byte[] bytes, ushort port)
        {
            this.bytes = bytes;
            this.port = port;
        }

        protected override void EncodeImpl(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteVaruint(bytes.Length); _buffer.WriteBytes(bytes);
            _buffer.WriteBigEndianUshort(port);
        }

        protected override void DecodeImpl(sul.Utils.Buffer _buffer)
        {
            //bytes.DecodeBody(_buffer);
            //port = _buffer.ReadBigEndianUshort();
        }

    }

    public class Game : sul.Utils.Stream
    {

        // type
        public const byte POCKET = 1;
        public const byte MINECRAFT = 2;
        public const byte CONSOLE = 3;

        public byte type;
        public uint[] protocols;

        public Game() : this(0, new uint[]{}) {}

        public Game(byte type, uint[] protocols)
        {
            this.type = type;
            this.protocols = protocols;
        }

        protected override void EncodeImpl(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteUbyte(type);
            _buffer.WriteVaruint(protocols.Length); foreach (uint protocolsChild in protocols){ _buffer.WriteVaruint(protocolsChild); }
        }

        protected override void DecodeImpl(sul.Utils.Buffer _buffer)
        {
            //type = _buffer.ReadUbyte();
            //protocols.DecodeBody(_buffer);
        }

    }

    public class GameInfo : sul.Utils.Stream
    {

        public Game game;
        public string motd;
        public bool onlineMode;
        public ushort port;

        public GameInfo() : this(new Game(), "", false, 0) {}

        public GameInfo(Game game, string motd, bool onlineMode, ushort port)
        {
            this.game = game;
            this.motd = motd;
            this.onlineMode = onlineMode;
            this.port = port;
        }

        protected override void EncodeImpl(sul.Utils.Buffer _buffer)
        {
            game.EncodeBody(_buffer);
            _buffer.WriteVaruint(Encoding.UTF8.GetByteCount(motd)); _buffer.WriteString(motd);
            _buffer.WriteBool(onlineMode);
            _buffer.WriteBigEndianUshort(port);
        }

        protected override void DecodeImpl(sul.Utils.Buffer _buffer)
        {
            //game.DecodeBody(_buffer);
            //motd = _buffer.ReadString();
            //onlineMode = _buffer.ReadBool();
            //port = _buffer.ReadBigEndianUshort();
        }

    }

    public class Plugin : sul.Utils.Stream
    {

        public string name;
        public string version;

        public Plugin() : this("", "") {}

        public Plugin(string name, string version)
        {
            this.name = name;
            this.version = version;
        }

        protected override void EncodeImpl(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteVaruint(Encoding.UTF8.GetByteCount(name)); _buffer.WriteString(name);
            _buffer.WriteVaruint(Encoding.UTF8.GetByteCount(version)); _buffer.WriteString(version);
        }

        protected override void DecodeImpl(sul.Utils.Buffer _buffer)
        {
            //name = _buffer.ReadString();
            //version = _buffer.ReadString();
        }

    }

    public class Motd : sul.Utils.Stream
    {

        // type
        public const byte POCKET = 1;
        public const byte MINECRAFT = 2;
        public const byte CONSOLE = 3;

        public byte type;
        public string motd;

        public Motd() : this(0, "") {}

        public Motd(byte type, string motd)
        {
            this.type = type;
            this.motd = motd;
        }

        protected override void EncodeImpl(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteUbyte(type);
            _buffer.WriteVaruint(Encoding.UTF8.GetByteCount(motd)); _buffer.WriteString(motd);
        }

        protected override void DecodeImpl(sul.Utils.Buffer _buffer)
        {
            //type = _buffer.ReadUbyte();
            //motd = _buffer.ReadString();
        }

    }

    public class Skin : sul.Utils.Stream
    {

        public string name;
        public byte[] data;

        public Skin() : this("", new byte[]{}) {}

        public Skin(string name, byte[] data)
        {
            this.name = name;
            this.data = data;
        }

        protected override void EncodeImpl(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteVaruint(Encoding.UTF8.GetByteCount(name)); _buffer.WriteString(name);
            _buffer.WriteVaruint(data.Length); _buffer.WriteBytes(data);
        }

        protected override void DecodeImpl(sul.Utils.Buffer _buffer)
        {
            //name = _buffer.ReadString();
            //data.DecodeBody(_buffer);
        }

    }

    public class Property : sul.Utils.Stream
    {



        public Property()
        {

        }

        protected override void EncodeImpl(sul.Utils.Buffer _buffer)
        {

        }

        protected override void DecodeImpl(sul.Utils.Buffer _buffer)
        {

        }

    }

}
