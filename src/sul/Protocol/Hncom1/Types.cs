/*
 * This file was automatically generated by sel-utils and
 * released under the MIT License.
 * 
 * License: https://github.com/sel-project/sel-utils/blob/master/LICENSE
 * Repository: https://github.com/sel-project/sel-utils
 * Generated from https://github.com/sel-project/sel-utils/blob/master/xml/protocol/hncom1.xml
 */
using Utils.Buffer;
using Utils.LengthPrefixedType;
using Utils.Stream;

namespace sul.Hncom1.Types
{

    public class Address : Stream
    {

        public byte[] bytes;
        public ushort port;

        public Address() {}

        public Address(byte[] bytes, ushort port)
        {
            this.bytes = bytes;
            this.port = port;
        }

        protected override void EncodeImpl(Buffer buffer)
        {
            _buffer.WriteVaruint(bytes.Length); _buffer.WriteBytes(bytes);
            _buffer.WriteBigEndianUshort(port);
        }

        protected override void DecodeImpl(Buffer buffer)
        {


        }

    }

    public class Game : Stream
    {

        // type
        public const byte Pocket = 1;
        public const byte Minecraft = 2;
        public const byte Console = 3;

        public byte type;
        public uint[] protocols;

        public Game() {}

        public Game(byte type, uint[] protocols)
        {
            this.type = type;
            this.protocols = protocols;
        }

        protected override void EncodeImpl(Buffer buffer)
        {
            _buffer.WriteUbyte(type);
            _buffer.WriteVaruint(protocols.Length); foreach(uint protocolsChild in protocols){ _buffer.WriteVaruint(protocolsChild); }
        }

        protected override void DecodeImpl(Buffer buffer)
        {


        }

    }

    public class GameInfo : Stream
    {

        public Types.Game game;
        public string motd;
        public ushort port;

        public GameInfo() {}

        public GameInfo(Types.Game game, string motd, ushort port)
        {
            this.game = game;
            this.motd = motd;
            this.port = port;
        }

        protected override void EncodeImpl(Buffer buffer)
        {
            game.EncodeBody(_buffer);
            _buffer.WriteVaruint(Encoding.UTF8.GetByteCount(motd)); _buffer.WriteString(motd);
            _buffer.WriteBigEndianUshort(port);
        }

        protected override void DecodeImpl(Buffer buffer)
        {



        }

    }

    public class Plugin : Stream
    {

        public string name;
        public string version;

        public Plugin() {}

        public Plugin(string name, string version)
        {
            this.name = name;
            this.version = version;
        }

        protected override void EncodeImpl(Buffer buffer)
        {
            _buffer.WriteVaruint(Encoding.UTF8.GetByteCount(name)); _buffer.WriteString(name);
            _buffer.WriteVaruint(Encoding.UTF8.GetByteCount(version)); _buffer.WriteString(version);
        }

        protected override void DecodeImpl(Buffer buffer)
        {


        }

    }

    public class Skin : Stream
    {

        public string name;
        public byte[] data;

        public Skin() {}

        public Skin(string name, byte[] data)
        {
            this.name = name;
            this.data = data;
        }

        protected override void EncodeImpl(Buffer buffer)
        {
            _buffer.WriteVaruint(Encoding.UTF8.GetByteCount(name)); _buffer.WriteString(name);
            _buffer.WriteVaruint(data.Length); _buffer.WriteBytes(data);
        }

        protected override void DecodeImpl(Buffer buffer)
        {


        }

    }

}
