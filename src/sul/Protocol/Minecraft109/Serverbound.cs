/*
 * This file was automatically generated by sel-utils and
 * released under the MIT License.
 * 
 * License: https://github.com/sel-project/sel-utils/blob/master/LICENSE
 * Repository: https://github.com/sel-project/sel-utils
 * Generated from https://github.com/sel-project/sel-utils/blob/master/xml/protocol/minecraft109.xml
 */
using System.Text;

using sul.Utils;
using sul.Protocol.Minecraft109.Types;

namespace sul.Protocol.Minecraft109.Serverbound
{

    public class TeleportConfirm : sul.Utils.Packet
    {

        public const uint Id = 0;

        public const bool Clientbound = false;
        public const bool Serverbound = true;

        public uint teleportId;

        public TeleportConfirm() : this(0) {}

        public TeleportConfirm(uint teleportId)
        {
            this.teleportId = teleportId;
        }

        public override int GetId()
        {
            return (int)Id;
        }

        public override void EncodeId(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteVaruint(Id);
        }

        public override void DecodeId(sul.Utils.Buffer _buffer)
        {
            //_buffer.ReadVaruint();
        }

        protected override void EncodeImpl(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteVaruint(teleportId);
        }

        protected override void DecodeImpl(sul.Utils.Buffer _buffer)
        {
            //_buffer.ReadVaruint()
        }

        public static TeleportConfirm FromBuffer(byte[] buffer)
        {
            var ret = new TeleportConfirm();
            ret.Decode(buffer);
            return ret;
        }

    }

    public class TabComplete : sul.Utils.Packet
    {

        public const uint Id = 1;

        public const bool Clientbound = false;
        public const bool Serverbound = true;

        public string text;
        public bool command;
        public bool hasPosition;
        public ulong block;

        public TabComplete() : this("", false, false, 0) {}

        public TabComplete(string text, bool command, bool hasPosition, ulong block)
        {
            this.text = text;
            this.command = command;
            this.hasPosition = hasPosition;
            this.block = block;
        }

        public override int GetId()
        {
            return (int)Id;
        }

        public override void EncodeId(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteVaruint(Id);
        }

        public override void DecodeId(sul.Utils.Buffer _buffer)
        {
            //_buffer.ReadVaruint();
        }

        protected override void EncodeImpl(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteVaruint(Encoding.UTF8.GetByteCount(text)); _buffer.WriteString(text);
            _buffer.WriteBool(command);
            _buffer.WriteBool(hasPosition);
            if(hasPosition==true){ _buffer.WriteBigEndianUlong(block); }
        }

        protected override void DecodeImpl(sul.Utils.Buffer _buffer)
        {
            //_buffer.ReadString()
            //_buffer.ReadBool()
            //_buffer.ReadBool()
            //if(hasPosition==true){ _buffer.ReadBigEndianUlong() }
        }

        public static TabComplete FromBuffer(byte[] buffer)
        {
            var ret = new TabComplete();
            ret.Decode(buffer);
            return ret;
        }

    }

    public class ChatMessage : sul.Utils.Packet
    {

        public const uint Id = 2;

        public const bool Clientbound = false;
        public const bool Serverbound = true;

        public string text;

        public ChatMessage() : this("") {}

        public ChatMessage(string text)
        {
            this.text = text;
        }

        public override int GetId()
        {
            return (int)Id;
        }

        public override void EncodeId(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteVaruint(Id);
        }

        public override void DecodeId(sul.Utils.Buffer _buffer)
        {
            //_buffer.ReadVaruint();
        }

        protected override void EncodeImpl(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteVaruint(Encoding.UTF8.GetByteCount(text)); _buffer.WriteString(text);
        }

        protected override void DecodeImpl(sul.Utils.Buffer _buffer)
        {
            //_buffer.ReadString()
        }

        public static ChatMessage FromBuffer(byte[] buffer)
        {
            var ret = new ChatMessage();
            ret.Decode(buffer);
            return ret;
        }

    }

    public class ClientStatus : sul.Utils.Packet
    {

        public const uint Id = 3;

        public const bool Clientbound = false;
        public const bool Serverbound = true;

        // action
        public const uint RESPAWN = 0;
        public const uint REQUEST_STATS = 1;
        public const uint OPEN_INVENTORY = 2;

        public uint action;

        public ClientStatus() : this(0) {}

        public ClientStatus(uint action)
        {
            this.action = action;
        }

        public override int GetId()
        {
            return (int)Id;
        }

        public override void EncodeId(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteVaruint(Id);
        }

        public override void DecodeId(sul.Utils.Buffer _buffer)
        {
            //_buffer.ReadVaruint();
        }

        protected override void EncodeImpl(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteVaruint(action);
        }

        protected override void DecodeImpl(sul.Utils.Buffer _buffer)
        {
            //_buffer.ReadVaruint()
        }

        public static ClientStatus FromBuffer(byte[] buffer)
        {
            var ret = new ClientStatus();
            ret.Decode(buffer);
            return ret;
        }

    }

    public class ClientSettings : sul.Utils.Packet
    {

        public const uint Id = 4;

        public const bool Clientbound = false;
        public const bool Serverbound = true;

        // chat mode
        public const uint ENABLED = 0;
        public const uint COMMANDS_ONLY = 1;
        public const uint DISABLED = 2;

        // displayed skin parts
        public const byte CAPE = 1;
        public const byte JACKET = 2;
        public const byte LEFT_SLEEVE = 4;
        public const byte RIGHT_SLEEVE = 8;
        public const byte LEFT_PANTS = 16;
        public const byte RIGHT_PANTS = 32;
        public const byte HAT = 64;

        // main hand
        public const byte RIGHT = 0;
        public const byte LEFT = 1;

        public string language;
        public byte viewDistance;
        public uint chatMode;
        public bool chatColors;
        public byte displayedSkinParts;
        public byte mainHand;

        public ClientSettings() : this("", 0, 0, false, 0, 0) {}

        public ClientSettings(string language, byte viewDistance, uint chatMode, bool chatColors, byte displayedSkinParts, byte mainHand)
        {
            this.language = language;
            this.viewDistance = viewDistance;
            this.chatMode = chatMode;
            this.chatColors = chatColors;
            this.displayedSkinParts = displayedSkinParts;
            this.mainHand = mainHand;
        }

        public override int GetId()
        {
            return (int)Id;
        }

        public override void EncodeId(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteVaruint(Id);
        }

        public override void DecodeId(sul.Utils.Buffer _buffer)
        {
            //_buffer.ReadVaruint();
        }

        protected override void EncodeImpl(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteVaruint(Encoding.UTF8.GetByteCount(language)); _buffer.WriteString(language);
            _buffer.WriteUbyte(viewDistance);
            _buffer.WriteVaruint(chatMode);
            _buffer.WriteBool(chatColors);
            _buffer.WriteUbyte(displayedSkinParts);
            _buffer.WriteUbyte(mainHand);
        }

        protected override void DecodeImpl(sul.Utils.Buffer _buffer)
        {
            //_buffer.ReadString()
            //_buffer.ReadUbyte()
            //_buffer.ReadVaruint()
            //_buffer.ReadBool()
            //_buffer.ReadUbyte()
            //_buffer.ReadUbyte()
        }

        public static ClientSettings FromBuffer(byte[] buffer)
        {
            var ret = new ClientSettings();
            ret.Decode(buffer);
            return ret;
        }

    }

    public class ConfirmTransaction : sul.Utils.Packet
    {

        public const uint Id = 5;

        public const bool Clientbound = false;
        public const bool Serverbound = true;

        public byte window;
        public ushort action;
        public bool accepted;

        public ConfirmTransaction() : this(0, 0, false) {}

        public ConfirmTransaction(byte window, ushort action, bool accepted)
        {
            this.window = window;
            this.action = action;
            this.accepted = accepted;
        }

        public override int GetId()
        {
            return (int)Id;
        }

        public override void EncodeId(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteVaruint(Id);
        }

        public override void DecodeId(sul.Utils.Buffer _buffer)
        {
            //_buffer.ReadVaruint();
        }

        protected override void EncodeImpl(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteUbyte(window);
            _buffer.WriteBigEndianUshort(action);
            _buffer.WriteBool(accepted);
        }

        protected override void DecodeImpl(sul.Utils.Buffer _buffer)
        {
            //_buffer.ReadUbyte()
            //_buffer.ReadBigEndianUshort()
            //_buffer.ReadBool()
        }

        public static ConfirmTransaction FromBuffer(byte[] buffer)
        {
            var ret = new ConfirmTransaction();
            ret.Decode(buffer);
            return ret;
        }

    }

    public class EnchantItem : sul.Utils.Packet
    {

        public const uint Id = 6;

        public const bool Clientbound = false;
        public const bool Serverbound = true;

        public byte window;
        public byte enchantment;

        public EnchantItem() : this(0, 0) {}

        public EnchantItem(byte window, byte enchantment)
        {
            this.window = window;
            this.enchantment = enchantment;
        }

        public override int GetId()
        {
            return (int)Id;
        }

        public override void EncodeId(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteVaruint(Id);
        }

        public override void DecodeId(sul.Utils.Buffer _buffer)
        {
            //_buffer.ReadVaruint();
        }

        protected override void EncodeImpl(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteUbyte(window);
            _buffer.WriteUbyte(enchantment);
        }

        protected override void DecodeImpl(sul.Utils.Buffer _buffer)
        {
            //_buffer.ReadUbyte()
            //_buffer.ReadUbyte()
        }

        public static EnchantItem FromBuffer(byte[] buffer)
        {
            var ret = new EnchantItem();
            ret.Decode(buffer);
            return ret;
        }

    }

    public class ClickWindow : sul.Utils.Packet
    {

        public const uint Id = 7;

        public const bool Clientbound = false;
        public const bool Serverbound = true;

        public byte window;
        public ushort slot;
        public byte button;
        public ushort action;
        public uint mode;
        public Slot clickedItem;

        public ClickWindow() : this(0, 0, 0, 0, 0, new Slot()) {}

        public ClickWindow(byte window, ushort slot, byte button, ushort action, uint mode, Slot clickedItem)
        {
            this.window = window;
            this.slot = slot;
            this.button = button;
            this.action = action;
            this.mode = mode;
            this.clickedItem = clickedItem;
        }

        public override int GetId()
        {
            return (int)Id;
        }

        public override void EncodeId(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteVaruint(Id);
        }

        public override void DecodeId(sul.Utils.Buffer _buffer)
        {
            //_buffer.ReadVaruint();
        }

        protected override void EncodeImpl(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteUbyte(window);
            _buffer.WriteBigEndianUshort(slot);
            _buffer.WriteUbyte(button);
            _buffer.WriteBigEndianUshort(action);
            _buffer.WriteVaruint(mode);
            clickedItem.EncodeBody(_buffer);
        }

        protected override void DecodeImpl(sul.Utils.Buffer _buffer)
        {
            //_buffer.ReadUbyte()
            //_buffer.ReadBigEndianUshort()
            //_buffer.ReadUbyte()
            //_buffer.ReadBigEndianUshort()
            //_buffer.ReadVaruint()
            //clickedItem.DecodeBody(_buffer);
        }

        public static ClickWindow FromBuffer(byte[] buffer)
        {
            var ret = new ClickWindow();
            ret.Decode(buffer);
            return ret;
        }

    }

    public class CloseWindow : sul.Utils.Packet
    {

        public const uint Id = 8;

        public const bool Clientbound = false;
        public const bool Serverbound = true;

        public byte window;

        public CloseWindow() : this(0) {}

        public CloseWindow(byte window)
        {
            this.window = window;
        }

        public override int GetId()
        {
            return (int)Id;
        }

        public override void EncodeId(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteVaruint(Id);
        }

        public override void DecodeId(sul.Utils.Buffer _buffer)
        {
            //_buffer.ReadVaruint();
        }

        protected override void EncodeImpl(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteUbyte(window);
        }

        protected override void DecodeImpl(sul.Utils.Buffer _buffer)
        {
            //_buffer.ReadUbyte()
        }

        public static CloseWindow FromBuffer(byte[] buffer)
        {
            var ret = new CloseWindow();
            ret.Decode(buffer);
            return ret;
        }

    }

    public class PluginMessage : sul.Utils.Packet
    {

        public const uint Id = 9;

        public const bool Clientbound = false;
        public const bool Serverbound = true;

        public string channel;
        public byte[] data;

        public PluginMessage() : this("", new byte[]{}) {}

        public PluginMessage(string channel, byte[] data)
        {
            this.channel = channel;
            this.data = data;
        }

        public override int GetId()
        {
            return (int)Id;
        }

        public override void EncodeId(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteVaruint(Id);
        }

        public override void DecodeId(sul.Utils.Buffer _buffer)
        {
            //_buffer.ReadVaruint();
        }

        protected override void EncodeImpl(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteVaruint(Encoding.UTF8.GetByteCount(channel)); _buffer.WriteString(channel);
            _buffer.WriteBytes(data);
        }

        protected override void DecodeImpl(sul.Utils.Buffer _buffer)
        {
            //_buffer.ReadString()
            //_buffer.ReadBytes()
        }

        public static PluginMessage FromBuffer(byte[] buffer)
        {
            var ret = new PluginMessage();
            ret.Decode(buffer);
            return ret;
        }

    }

    public class UseEntity : sul.Utils.Packet
    {

        public const uint Id = 10;

        public const bool Clientbound = false;
        public const bool Serverbound = true;

        // type
        public const uint INTERACT = 0;
        public const uint ATTACK = 1;
        public const uint INTERACT_AT = 2;

        // hand
        public const uint MAIN_HAND = 0;
        public const uint OFF_HAND = 1;

        public uint target;
        public uint type;
        public System.Tuple<float, float, float> targetPosition;
        public uint hand;

        public UseEntity() : this(0, 0, null, 0) {}

        public UseEntity(uint target, uint type, System.Tuple<float, float, float> targetPosition, uint hand)
        {
            this.target = target;
            this.type = type;
            this.targetPosition = targetPosition;
            this.hand = hand;
        }

        public override int GetId()
        {
            return (int)Id;
        }

        public override void EncodeId(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteVaruint(Id);
        }

        public override void DecodeId(sul.Utils.Buffer _buffer)
        {
            //_buffer.ReadVaruint();
        }

        protected override void EncodeImpl(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteVaruint(target);
            _buffer.WriteVaruint(type);
            if(type==2){ _buffer.WriteBigEndianFloat(targetPosition.Item1); _buffer.WriteBigEndianFloat(targetPosition.Item2); _buffer.WriteBigEndianFloat(targetPosition.Item3); }
            if(type==0||type==2){ _buffer.WriteVaruint(hand); }
        }

        protected override void DecodeImpl(sul.Utils.Buffer _buffer)
        {
            //_buffer.ReadVaruint()
            //_buffer.ReadVaruint()
            //if(type==2){ _buffer.ReadBigEndianFloat() _buffer.ReadBigEndianFloat() _buffer.ReadBigEndianFloat() }
            //if(type==0||type==2){ _buffer.ReadVaruint() }
        }

        public static UseEntity FromBuffer(byte[] buffer)
        {
            var ret = new UseEntity();
            ret.Decode(buffer);
            return ret;
        }

    }

    public class KeepAlive : sul.Utils.Packet
    {

        public const uint Id = 11;

        public const bool Clientbound = false;
        public const bool Serverbound = true;

        public uint id;

        public KeepAlive() : this(0) {}

        public KeepAlive(uint id)
        {
            this.id = id;
        }

        public override int GetId()
        {
            return (int)Id;
        }

        public override void EncodeId(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteVaruint(Id);
        }

        public override void DecodeId(sul.Utils.Buffer _buffer)
        {
            //_buffer.ReadVaruint();
        }

        protected override void EncodeImpl(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteVaruint(id);
        }

        protected override void DecodeImpl(sul.Utils.Buffer _buffer)
        {
            //_buffer.ReadVaruint()
        }

        public static KeepAlive FromBuffer(byte[] buffer)
        {
            var ret = new KeepAlive();
            ret.Decode(buffer);
            return ret;
        }

    }

    public class PlayerPosition : sul.Utils.Packet
    {

        public const uint Id = 12;

        public const bool Clientbound = false;
        public const bool Serverbound = true;

        public System.Tuple<double, double, double> position;
        public bool onGround;

        public PlayerPosition() : this(null, false) {}

        public PlayerPosition(System.Tuple<double, double, double> position, bool onGround)
        {
            this.position = position;
            this.onGround = onGround;
        }

        public override int GetId()
        {
            return (int)Id;
        }

        public override void EncodeId(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteVaruint(Id);
        }

        public override void DecodeId(sul.Utils.Buffer _buffer)
        {
            //_buffer.ReadVaruint();
        }

        protected override void EncodeImpl(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteBigEndianDouble(position.Item1); _buffer.WriteBigEndianDouble(position.Item2); _buffer.WriteBigEndianDouble(position.Item3);
            _buffer.WriteBool(onGround);
        }

        protected override void DecodeImpl(sul.Utils.Buffer _buffer)
        {
            //_buffer.ReadBigEndianDouble() _buffer.ReadBigEndianDouble() _buffer.ReadBigEndianDouble()
            //_buffer.ReadBool()
        }

        public static PlayerPosition FromBuffer(byte[] buffer)
        {
            var ret = new PlayerPosition();
            ret.Decode(buffer);
            return ret;
        }

    }

    public class PlayerPositionAndLook : sul.Utils.Packet
    {

        public const uint Id = 13;

        public const bool Clientbound = false;
        public const bool Serverbound = true;

        public System.Tuple<double, double, double> position;
        public float yaw;
        public float pitch;
        public bool onGround;

        public PlayerPositionAndLook() : this(null, 0, 0, false) {}

        public PlayerPositionAndLook(System.Tuple<double, double, double> position, float yaw, float pitch, bool onGround)
        {
            this.position = position;
            this.yaw = yaw;
            this.pitch = pitch;
            this.onGround = onGround;
        }

        public override int GetId()
        {
            return (int)Id;
        }

        public override void EncodeId(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteVaruint(Id);
        }

        public override void DecodeId(sul.Utils.Buffer _buffer)
        {
            //_buffer.ReadVaruint();
        }

        protected override void EncodeImpl(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteBigEndianDouble(position.Item1); _buffer.WriteBigEndianDouble(position.Item2); _buffer.WriteBigEndianDouble(position.Item3);
            _buffer.WriteBigEndianFloat(yaw);
            _buffer.WriteBigEndianFloat(pitch);
            _buffer.WriteBool(onGround);
        }

        protected override void DecodeImpl(sul.Utils.Buffer _buffer)
        {
            //_buffer.ReadBigEndianDouble() _buffer.ReadBigEndianDouble() _buffer.ReadBigEndianDouble()
            //_buffer.ReadBigEndianFloat()
            //_buffer.ReadBigEndianFloat()
            //_buffer.ReadBool()
        }

        public static PlayerPositionAndLook FromBuffer(byte[] buffer)
        {
            var ret = new PlayerPositionAndLook();
            ret.Decode(buffer);
            return ret;
        }

    }

    public class PlayerLook : sul.Utils.Packet
    {

        public const uint Id = 14;

        public const bool Clientbound = false;
        public const bool Serverbound = true;

        public float yaw;
        public float pitch;
        public bool onGround;

        public PlayerLook() : this(0, 0, false) {}

        public PlayerLook(float yaw, float pitch, bool onGround)
        {
            this.yaw = yaw;
            this.pitch = pitch;
            this.onGround = onGround;
        }

        public override int GetId()
        {
            return (int)Id;
        }

        public override void EncodeId(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteVaruint(Id);
        }

        public override void DecodeId(sul.Utils.Buffer _buffer)
        {
            //_buffer.ReadVaruint();
        }

        protected override void EncodeImpl(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteBigEndianFloat(yaw);
            _buffer.WriteBigEndianFloat(pitch);
            _buffer.WriteBool(onGround);
        }

        protected override void DecodeImpl(sul.Utils.Buffer _buffer)
        {
            //_buffer.ReadBigEndianFloat()
            //_buffer.ReadBigEndianFloat()
            //_buffer.ReadBool()
        }

        public static PlayerLook FromBuffer(byte[] buffer)
        {
            var ret = new PlayerLook();
            ret.Decode(buffer);
            return ret;
        }

    }

    public class Player : sul.Utils.Packet
    {

        public const uint Id = 15;

        public const bool Clientbound = false;
        public const bool Serverbound = true;

        public bool onGround;

        public Player() : this(false) {}

        public Player(bool onGround)
        {
            this.onGround = onGround;
        }

        public override int GetId()
        {
            return (int)Id;
        }

        public override void EncodeId(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteVaruint(Id);
        }

        public override void DecodeId(sul.Utils.Buffer _buffer)
        {
            //_buffer.ReadVaruint();
        }

        protected override void EncodeImpl(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteBool(onGround);
        }

        protected override void DecodeImpl(sul.Utils.Buffer _buffer)
        {
            //_buffer.ReadBool()
        }

        public static Player FromBuffer(byte[] buffer)
        {
            var ret = new Player();
            ret.Decode(buffer);
            return ret;
        }

    }

    public class VehicleMove : sul.Utils.Packet
    {

        public const uint Id = 16;

        public const bool Clientbound = false;
        public const bool Serverbound = true;

        public System.Tuple<double, double, double> position;
        public float yaw;
        public float pitch;

        public VehicleMove() : this(null, 0, 0) {}

        public VehicleMove(System.Tuple<double, double, double> position, float yaw, float pitch)
        {
            this.position = position;
            this.yaw = yaw;
            this.pitch = pitch;
        }

        public override int GetId()
        {
            return (int)Id;
        }

        public override void EncodeId(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteVaruint(Id);
        }

        public override void DecodeId(sul.Utils.Buffer _buffer)
        {
            //_buffer.ReadVaruint();
        }

        protected override void EncodeImpl(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteBigEndianDouble(position.Item1); _buffer.WriteBigEndianDouble(position.Item2); _buffer.WriteBigEndianDouble(position.Item3);
            _buffer.WriteBigEndianFloat(yaw);
            _buffer.WriteBigEndianFloat(pitch);
        }

        protected override void DecodeImpl(sul.Utils.Buffer _buffer)
        {
            //_buffer.ReadBigEndianDouble() _buffer.ReadBigEndianDouble() _buffer.ReadBigEndianDouble()
            //_buffer.ReadBigEndianFloat()
            //_buffer.ReadBigEndianFloat()
        }

        public static VehicleMove FromBuffer(byte[] buffer)
        {
            var ret = new VehicleMove();
            ret.Decode(buffer);
            return ret;
        }

    }

    public class SteerBoat : sul.Utils.Packet
    {

        public const uint Id = 17;

        public const bool Clientbound = false;
        public const bool Serverbound = true;

        public bool rightPaddleTurning;
        public bool leftPaddleTurning;

        public SteerBoat() : this(false, false) {}

        public SteerBoat(bool rightPaddleTurning, bool leftPaddleTurning)
        {
            this.rightPaddleTurning = rightPaddleTurning;
            this.leftPaddleTurning = leftPaddleTurning;
        }

        public override int GetId()
        {
            return (int)Id;
        }

        public override void EncodeId(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteVaruint(Id);
        }

        public override void DecodeId(sul.Utils.Buffer _buffer)
        {
            //_buffer.ReadVaruint();
        }

        protected override void EncodeImpl(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteBool(rightPaddleTurning);
            _buffer.WriteBool(leftPaddleTurning);
        }

        protected override void DecodeImpl(sul.Utils.Buffer _buffer)
        {
            //_buffer.ReadBool()
            //_buffer.ReadBool()
        }

        public static SteerBoat FromBuffer(byte[] buffer)
        {
            var ret = new SteerBoat();
            ret.Decode(buffer);
            return ret;
        }

    }

    public class PlayerAbilities : sul.Utils.Packet
    {

        public const uint Id = 18;

        public const bool Clientbound = false;
        public const bool Serverbound = true;

        // flags
        public const byte CREATIVE_MODE = 1;
        public const byte FLYING = 2;
        public const byte ALLOW_FLYING = 4;
        public const byte INVINCIBLE = 8;

        public byte flags;
        public float flyingSpeed;
        public float walkingSpeed;

        public PlayerAbilities() : this(0, 0, 0) {}

        public PlayerAbilities(byte flags, float flyingSpeed, float walkingSpeed)
        {
            this.flags = flags;
            this.flyingSpeed = flyingSpeed;
            this.walkingSpeed = walkingSpeed;
        }

        public override int GetId()
        {
            return (int)Id;
        }

        public override void EncodeId(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteVaruint(Id);
        }

        public override void DecodeId(sul.Utils.Buffer _buffer)
        {
            //_buffer.ReadVaruint();
        }

        protected override void EncodeImpl(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteUbyte(flags);
            _buffer.WriteBigEndianFloat(flyingSpeed);
            _buffer.WriteBigEndianFloat(walkingSpeed);
        }

        protected override void DecodeImpl(sul.Utils.Buffer _buffer)
        {
            //_buffer.ReadUbyte()
            //_buffer.ReadBigEndianFloat()
            //_buffer.ReadBigEndianFloat()
        }

        public static PlayerAbilities FromBuffer(byte[] buffer)
        {
            var ret = new PlayerAbilities();
            ret.Decode(buffer);
            return ret;
        }

    }

    public class PlayerDigging : sul.Utils.Packet
    {

        public const uint Id = 19;

        public const bool Clientbound = false;
        public const bool Serverbound = true;

        // status
        public const uint START_DIGGING = 0;
        public const uint CANCEL_DIGGING = 1;
        public const uint FINISH_DIGGING = 2;
        public const uint DROP_ITEM_STACK = 3;
        public const uint DROP_ITEM = 4;
        public const uint SHOOT_ARROW = 5;
        public const uint FINISH_EATING = 5;
        public const uint SWAP_ITEM_IN_HAND = 6;

        public uint status;
        public ulong position;
        public byte face;

        public PlayerDigging() : this(0, 0, 0) {}

        public PlayerDigging(uint status, ulong position, byte face)
        {
            this.status = status;
            this.position = position;
            this.face = face;
        }

        public override int GetId()
        {
            return (int)Id;
        }

        public override void EncodeId(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteVaruint(Id);
        }

        public override void DecodeId(sul.Utils.Buffer _buffer)
        {
            //_buffer.ReadVaruint();
        }

        protected override void EncodeImpl(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteVaruint(status);
            _buffer.WriteBigEndianUlong(position);
            _buffer.WriteUbyte(face);
        }

        protected override void DecodeImpl(sul.Utils.Buffer _buffer)
        {
            //_buffer.ReadVaruint()
            //_buffer.ReadBigEndianUlong()
            //_buffer.ReadUbyte()
        }

        public static PlayerDigging FromBuffer(byte[] buffer)
        {
            var ret = new PlayerDigging();
            ret.Decode(buffer);
            return ret;
        }

    }

    public class EntityAction : sul.Utils.Packet
    {

        public const uint Id = 20;

        public const bool Clientbound = false;
        public const bool Serverbound = true;

        // action
        public const uint START_SNEAKING = 0;
        public const uint STOP_SNEAKING = 1;
        public const uint LEAVE_BED = 2;
        public const uint START_SPRINTING = 3;
        public const uint STOP_SPRINTING = 4;
        public const uint START_HORSE_JUMP = 5;
        public const uint STOP_HORSE_JUMP = 6;
        public const uint OPEN_HORSE_INVENTORY = 7;
        public const uint START_ELYTRA_FLYING = 8;

        public uint entityId;
        public uint action;
        public uint jumpBoost;

        public EntityAction() : this(0, 0, 0) {}

        public EntityAction(uint entityId, uint action, uint jumpBoost)
        {
            this.entityId = entityId;
            this.action = action;
            this.jumpBoost = jumpBoost;
        }

        public override int GetId()
        {
            return (int)Id;
        }

        public override void EncodeId(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteVaruint(Id);
        }

        public override void DecodeId(sul.Utils.Buffer _buffer)
        {
            //_buffer.ReadVaruint();
        }

        protected override void EncodeImpl(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteVaruint(entityId);
            _buffer.WriteVaruint(action);
            _buffer.WriteVaruint(jumpBoost);
        }

        protected override void DecodeImpl(sul.Utils.Buffer _buffer)
        {
            //_buffer.ReadVaruint()
            //_buffer.ReadVaruint()
            //_buffer.ReadVaruint()
        }

        public static EntityAction FromBuffer(byte[] buffer)
        {
            var ret = new EntityAction();
            ret.Decode(buffer);
            return ret;
        }

    }

    public class SteerVehicle : sul.Utils.Packet
    {

        public const uint Id = 21;

        public const bool Clientbound = false;
        public const bool Serverbound = true;

        // flags
        public const byte JUMP = 1;
        public const byte UNMOUNT = 2;

        public float sideways;
        public float forward;
        public byte flags;

        public SteerVehicle() : this(0, 0, 0) {}

        public SteerVehicle(float sideways, float forward, byte flags)
        {
            this.sideways = sideways;
            this.forward = forward;
            this.flags = flags;
        }

        public override int GetId()
        {
            return (int)Id;
        }

        public override void EncodeId(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteVaruint(Id);
        }

        public override void DecodeId(sul.Utils.Buffer _buffer)
        {
            //_buffer.ReadVaruint();
        }

        protected override void EncodeImpl(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteBigEndianFloat(sideways);
            _buffer.WriteBigEndianFloat(forward);
            _buffer.WriteUbyte(flags);
        }

        protected override void DecodeImpl(sul.Utils.Buffer _buffer)
        {
            //_buffer.ReadBigEndianFloat()
            //_buffer.ReadBigEndianFloat()
            //_buffer.ReadUbyte()
        }

        public static SteerVehicle FromBuffer(byte[] buffer)
        {
            var ret = new SteerVehicle();
            ret.Decode(buffer);
            return ret;
        }

    }

    public class ResourcePackStatus : sul.Utils.Packet
    {

        public const uint Id = 22;

        public const bool Clientbound = false;
        public const bool Serverbound = true;

        // result
        public const uint LOADED = 0;
        public const uint DECLINED = 1;
        public const uint FAILED = 2;
        public const uint ACCEPTED = 3;

        public string hash;
        public uint result;

        public ResourcePackStatus() : this("", 0) {}

        public ResourcePackStatus(string hash, uint result)
        {
            this.hash = hash;
            this.result = result;
        }

        public override int GetId()
        {
            return (int)Id;
        }

        public override void EncodeId(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteVaruint(Id);
        }

        public override void DecodeId(sul.Utils.Buffer _buffer)
        {
            //_buffer.ReadVaruint();
        }

        protected override void EncodeImpl(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteVaruint(Encoding.UTF8.GetByteCount(hash)); _buffer.WriteString(hash);
            _buffer.WriteVaruint(result);
        }

        protected override void DecodeImpl(sul.Utils.Buffer _buffer)
        {
            //_buffer.ReadString()
            //_buffer.ReadVaruint()
        }

        public static ResourcePackStatus FromBuffer(byte[] buffer)
        {
            var ret = new ResourcePackStatus();
            ret.Decode(buffer);
            return ret;
        }

    }

    public class HeldItemChange : sul.Utils.Packet
    {

        public const uint Id = 23;

        public const bool Clientbound = false;
        public const bool Serverbound = true;

        public ushort slot;

        public HeldItemChange() : this(0) {}

        public HeldItemChange(ushort slot)
        {
            this.slot = slot;
        }

        public override int GetId()
        {
            return (int)Id;
        }

        public override void EncodeId(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteVaruint(Id);
        }

        public override void DecodeId(sul.Utils.Buffer _buffer)
        {
            //_buffer.ReadVaruint();
        }

        protected override void EncodeImpl(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteBigEndianUshort(slot);
        }

        protected override void DecodeImpl(sul.Utils.Buffer _buffer)
        {
            //_buffer.ReadBigEndianUshort()
        }

        public static HeldItemChange FromBuffer(byte[] buffer)
        {
            var ret = new HeldItemChange();
            ret.Decode(buffer);
            return ret;
        }

    }

    public class CreativeInventoryAction : sul.Utils.Packet
    {

        public const uint Id = 24;

        public const bool Clientbound = false;
        public const bool Serverbound = true;

        public ushort slot;
        public Slot clickedItem;

        public CreativeInventoryAction() : this(0, new Slot()) {}

        public CreativeInventoryAction(ushort slot, Slot clickedItem)
        {
            this.slot = slot;
            this.clickedItem = clickedItem;
        }

        public override int GetId()
        {
            return (int)Id;
        }

        public override void EncodeId(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteVaruint(Id);
        }

        public override void DecodeId(sul.Utils.Buffer _buffer)
        {
            //_buffer.ReadVaruint();
        }

        protected override void EncodeImpl(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteBigEndianUshort(slot);
            clickedItem.EncodeBody(_buffer);
        }

        protected override void DecodeImpl(sul.Utils.Buffer _buffer)
        {
            //_buffer.ReadBigEndianUshort()
            //clickedItem.DecodeBody(_buffer);
        }

        public static CreativeInventoryAction FromBuffer(byte[] buffer)
        {
            var ret = new CreativeInventoryAction();
            ret.Decode(buffer);
            return ret;
        }

    }

    public class UpdateSign : sul.Utils.Packet
    {

        public const uint Id = 25;

        public const bool Clientbound = false;
        public const bool Serverbound = true;

        public ulong position;
        public string[] lines;

        public UpdateSign() : this(0, new string[4]) {}

        public UpdateSign(ulong position, string[] lines)
        {
            this.position = position;
            this.lines = lines;
        }

        public override int GetId()
        {
            return (int)Id;
        }

        public override void EncodeId(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteVaruint(Id);
        }

        public override void DecodeId(sul.Utils.Buffer _buffer)
        {
            //_buffer.ReadVaruint();
        }

        protected override void EncodeImpl(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteBigEndianUlong(position);
            foreach (string linesChild in lines){ _buffer.WriteVaruint(Encoding.UTF8.GetByteCount(linesChild)); _buffer.WriteString(linesChild); }
        }

        protected override void DecodeImpl(sul.Utils.Buffer _buffer)
        {
            //_buffer.ReadBigEndianUlong()
            //lines.DecodeBody(_buffer);
        }

        public static UpdateSign FromBuffer(byte[] buffer)
        {
            var ret = new UpdateSign();
            ret.Decode(buffer);
            return ret;
        }

    }

    public class Animation : sul.Utils.Packet
    {

        public const uint Id = 26;

        public const bool Clientbound = false;
        public const bool Serverbound = true;

        // hand
        public const uint MAIN_HAND = 0;
        public const uint OFF_HAND = 1;

        public uint hand;

        public Animation() : this(0) {}

        public Animation(uint hand)
        {
            this.hand = hand;
        }

        public override int GetId()
        {
            return (int)Id;
        }

        public override void EncodeId(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteVaruint(Id);
        }

        public override void DecodeId(sul.Utils.Buffer _buffer)
        {
            //_buffer.ReadVaruint();
        }

        protected override void EncodeImpl(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteVaruint(hand);
        }

        protected override void DecodeImpl(sul.Utils.Buffer _buffer)
        {
            //_buffer.ReadVaruint()
        }

        public static Animation FromBuffer(byte[] buffer)
        {
            var ret = new Animation();
            ret.Decode(buffer);
            return ret;
        }

    }

    public class Spectate : sul.Utils.Packet
    {

        public const uint Id = 27;

        public const bool Clientbound = false;
        public const bool Serverbound = true;

        public System.Guid player;

        public Spectate() : this(System.Guid.Empty) {}

        public Spectate(System.Guid player)
        {
            this.player = player;
        }

        public override int GetId()
        {
            return (int)Id;
        }

        public override void EncodeId(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteVaruint(Id);
        }

        public override void DecodeId(sul.Utils.Buffer _buffer)
        {
            //_buffer.ReadVaruint();
        }

        protected override void EncodeImpl(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteUuid(player);
        }

        protected override void DecodeImpl(sul.Utils.Buffer _buffer)
        {
            //_buffer.ReadUuid()
        }

        public static Spectate FromBuffer(byte[] buffer)
        {
            var ret = new Spectate();
            ret.Decode(buffer);
            return ret;
        }

    }

    public class PlayerBlockPlacement : sul.Utils.Packet
    {

        public const uint Id = 28;

        public const bool Clientbound = false;
        public const bool Serverbound = true;

        // hand
        public const uint MAIN_HAND = 0;
        public const uint OFF_HAND = 1;

        public ulong position;
        public uint face;
        public uint hand;
        public System.Tuple<byte, byte, byte> cursorPosition;

        public PlayerBlockPlacement() : this(0, 0, 0, null) {}

        public PlayerBlockPlacement(ulong position, uint face, uint hand, System.Tuple<byte, byte, byte> cursorPosition)
        {
            this.position = position;
            this.face = face;
            this.hand = hand;
            this.cursorPosition = cursorPosition;
        }

        public override int GetId()
        {
            return (int)Id;
        }

        public override void EncodeId(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteVaruint(Id);
        }

        public override void DecodeId(sul.Utils.Buffer _buffer)
        {
            //_buffer.ReadVaruint();
        }

        protected override void EncodeImpl(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteBigEndianUlong(position);
            _buffer.WriteVaruint(face);
            _buffer.WriteVaruint(hand);
            _buffer.WriteUbyte(cursorPosition.Item1); _buffer.WriteUbyte(cursorPosition.Item2); _buffer.WriteUbyte(cursorPosition.Item3);
        }

        protected override void DecodeImpl(sul.Utils.Buffer _buffer)
        {
            //_buffer.ReadBigEndianUlong()
            //_buffer.ReadVaruint()
            //_buffer.ReadVaruint()
            //_buffer.ReadUbyte() _buffer.ReadUbyte() _buffer.ReadUbyte()
        }

        public static PlayerBlockPlacement FromBuffer(byte[] buffer)
        {
            var ret = new PlayerBlockPlacement();
            ret.Decode(buffer);
            return ret;
        }

    }

    public class UseItem : sul.Utils.Packet
    {

        public const uint Id = 29;

        public const bool Clientbound = false;
        public const bool Serverbound = true;

        // hand
        public const uint MAIN_HAND = 0;
        public const uint OFF_HAND = 1;

        public uint hand;

        public UseItem() : this(0) {}

        public UseItem(uint hand)
        {
            this.hand = hand;
        }

        public override int GetId()
        {
            return (int)Id;
        }

        public override void EncodeId(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteVaruint(Id);
        }

        public override void DecodeId(sul.Utils.Buffer _buffer)
        {
            //_buffer.ReadVaruint();
        }

        protected override void EncodeImpl(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteVaruint(hand);
        }

        protected override void DecodeImpl(sul.Utils.Buffer _buffer)
        {
            //_buffer.ReadVaruint()
        }

        public static UseItem FromBuffer(byte[] buffer)
        {
            var ret = new UseItem();
            ret.Decode(buffer);
            return ret;
        }

    }

}
