/*
 * This file was automatically generated by sel-utils and
 * released under the MIT License.
 * 
 * License: https://github.com/sel-project/sel-utils/blob/master/LICENSE
 * Repository: https://github.com/sel-project/sel-utils
 * Generated from https://github.com/sel-project/sel-utils/blob/master/xml/protocol/minecraft333.xml
 */
using System.Text;

using sul.Utils;
using sul.Protocol.Minecraft333.Types;

namespace sul.Protocol.Minecraft333.Clientbound
{

    public class SpawnObject : sul.Utils.Packet
    {

        public const uint Id = 0;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        public uint entityId;
        public System.Guid uuid;
        public byte type;
        public System.Tuple<double, double, double> position;
        public byte pitch;
        public byte yaw;
        public int data;
        public System.Tuple<short, short, short> velocity;

        public SpawnObject() : this(0, System.Guid.Empty, 0, null, 0, 0, 0, null) {}

        public SpawnObject(uint entityId, System.Guid uuid, byte type, System.Tuple<double, double, double> position, byte pitch, byte yaw, int data, System.Tuple<short, short, short> velocity)
        {
            this.entityId = entityId;
            this.uuid = uuid;
            this.type = type;
            this.position = position;
            this.pitch = pitch;
            this.yaw = yaw;
            this.data = data;
            this.velocity = velocity;
        }

        public override int GetId()
        {
            return (int)Id;
        }

        public override void EncodeId(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteVaruint(Id);
        }

        public override void DecodeId(sul.Utils.Buffer _buffer)
        {
            //_buffer.ReadVaruint();
        }

        protected override void EncodeImpl(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteVaruint(entityId);
            _buffer.WriteUuid(uuid);
            _buffer.WriteUbyte(type);
            _buffer.WriteBigEndianDouble(position.Item1); _buffer.WriteBigEndianDouble(position.Item2); _buffer.WriteBigEndianDouble(position.Item3);
            _buffer.WriteUbyte(pitch);
            _buffer.WriteUbyte(yaw);
            _buffer.WriteBigEndianInt(data);
            _buffer.WriteBigEndianShort(velocity.Item1); _buffer.WriteBigEndianShort(velocity.Item2); _buffer.WriteBigEndianShort(velocity.Item3);
        }

        protected override void DecodeImpl(sul.Utils.Buffer _buffer)
        {
            //entityId = _buffer.ReadVaruint();
            //uuid = _buffer.ReadUuid();
            //type = _buffer.ReadUbyte();
            //position.Item1 = _buffer.ReadBigEndianDouble(); position.Item2 = _buffer.ReadBigEndianDouble(); position.Item3 = _buffer.ReadBigEndianDouble();
            //pitch = _buffer.ReadUbyte();
            //yaw = _buffer.ReadUbyte();
            //data = _buffer.ReadBigEndianInt();
            //velocity.Item1 = _buffer.ReadBigEndianShort(); velocity.Item2 = _buffer.ReadBigEndianShort(); velocity.Item3 = _buffer.ReadBigEndianShort();
        }

        public static SpawnObject FromBuffer(byte[] buffer)
        {
            var ret = new SpawnObject();
            ret.Decode(buffer);
            return ret;
        }

    }

    public class SpawnExperienceOrb : sul.Utils.Packet
    {

        public const uint Id = 1;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        public uint entityId;
        public System.Tuple<double, double, double> position;
        public ushort count;

        public SpawnExperienceOrb() : this(0, null, 0) {}

        public SpawnExperienceOrb(uint entityId, System.Tuple<double, double, double> position, ushort count)
        {
            this.entityId = entityId;
            this.position = position;
            this.count = count;
        }

        public override int GetId()
        {
            return (int)Id;
        }

        public override void EncodeId(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteVaruint(Id);
        }

        public override void DecodeId(sul.Utils.Buffer _buffer)
        {
            //_buffer.ReadVaruint();
        }

        protected override void EncodeImpl(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteVaruint(entityId);
            _buffer.WriteBigEndianDouble(position.Item1); _buffer.WriteBigEndianDouble(position.Item2); _buffer.WriteBigEndianDouble(position.Item3);
            _buffer.WriteBigEndianUshort(count);
        }

        protected override void DecodeImpl(sul.Utils.Buffer _buffer)
        {
            //entityId = _buffer.ReadVaruint();
            //position.Item1 = _buffer.ReadBigEndianDouble(); position.Item2 = _buffer.ReadBigEndianDouble(); position.Item3 = _buffer.ReadBigEndianDouble();
            //count = _buffer.ReadBigEndianUshort();
        }

        public static SpawnExperienceOrb FromBuffer(byte[] buffer)
        {
            var ret = new SpawnExperienceOrb();
            ret.Decode(buffer);
            return ret;
        }

    }

    public class SpawnGlobalEntity : sul.Utils.Packet
    {

        public const uint Id = 2;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        // type
        public const byte THUNDERBOLT = 1;

        public uint entityId;
        public byte type;
        public System.Tuple<double, double, double> position;

        public SpawnGlobalEntity() : this(0, 0, null) {}

        public SpawnGlobalEntity(uint entityId, byte type, System.Tuple<double, double, double> position)
        {
            this.entityId = entityId;
            this.type = type;
            this.position = position;
        }

        public override int GetId()
        {
            return (int)Id;
        }

        public override void EncodeId(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteVaruint(Id);
        }

        public override void DecodeId(sul.Utils.Buffer _buffer)
        {
            //_buffer.ReadVaruint();
        }

        protected override void EncodeImpl(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteVaruint(entityId);
            _buffer.WriteUbyte(type);
            _buffer.WriteBigEndianDouble(position.Item1); _buffer.WriteBigEndianDouble(position.Item2); _buffer.WriteBigEndianDouble(position.Item3);
        }

        protected override void DecodeImpl(sul.Utils.Buffer _buffer)
        {
            //entityId = _buffer.ReadVaruint();
            //type = _buffer.ReadUbyte();
            //position.Item1 = _buffer.ReadBigEndianDouble(); position.Item2 = _buffer.ReadBigEndianDouble(); position.Item3 = _buffer.ReadBigEndianDouble();
        }

        public static SpawnGlobalEntity FromBuffer(byte[] buffer)
        {
            var ret = new SpawnGlobalEntity();
            ret.Decode(buffer);
            return ret;
        }

    }

    public class SpawnMob : sul.Utils.Packet
    {

        public const uint Id = 3;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        public uint entityId;
        public System.Guid uuid;
        public uint type;
        public System.Tuple<double, double, double> position;
        public byte yaw;
        public byte pitch;
        public byte headPitch;
        public System.Tuple<short, short, short> velocity;
        public Metadata metadata;

        public SpawnMob() : this(0, System.Guid.Empty, 0, null, 0, 0, 0, null, new Metadata()) {}

        public SpawnMob(uint entityId, System.Guid uuid, uint type, System.Tuple<double, double, double> position, byte yaw, byte pitch, byte headPitch, System.Tuple<short, short, short> velocity, Metadata metadata)
        {
            this.entityId = entityId;
            this.uuid = uuid;
            this.type = type;
            this.position = position;
            this.yaw = yaw;
            this.pitch = pitch;
            this.headPitch = headPitch;
            this.velocity = velocity;
            this.metadata = metadata;
        }

        public override int GetId()
        {
            return (int)Id;
        }

        public override void EncodeId(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteVaruint(Id);
        }

        public override void DecodeId(sul.Utils.Buffer _buffer)
        {
            //_buffer.ReadVaruint();
        }

        protected override void EncodeImpl(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteVaruint(entityId);
            _buffer.WriteUuid(uuid);
            _buffer.WriteVaruint(type);
            _buffer.WriteBigEndianDouble(position.Item1); _buffer.WriteBigEndianDouble(position.Item2); _buffer.WriteBigEndianDouble(position.Item3);
            _buffer.WriteUbyte(yaw);
            _buffer.WriteUbyte(pitch);
            _buffer.WriteUbyte(headPitch);
            _buffer.WriteBigEndianShort(velocity.Item1); _buffer.WriteBigEndianShort(velocity.Item2); _buffer.WriteBigEndianShort(velocity.Item3);
            metadata.EncodeBody(_buffer);
        }

        protected override void DecodeImpl(sul.Utils.Buffer _buffer)
        {
            //entityId = _buffer.ReadVaruint();
            //uuid = _buffer.ReadUuid();
            //type = _buffer.ReadVaruint();
            //position.Item1 = _buffer.ReadBigEndianDouble(); position.Item2 = _buffer.ReadBigEndianDouble(); position.Item3 = _buffer.ReadBigEndianDouble();
            //yaw = _buffer.ReadUbyte();
            //pitch = _buffer.ReadUbyte();
            //headPitch = _buffer.ReadUbyte();
            //velocity.Item1 = _buffer.ReadBigEndianShort(); velocity.Item2 = _buffer.ReadBigEndianShort(); velocity.Item3 = _buffer.ReadBigEndianShort();
            //metadata.DecodeBody(_buffer);
        }

        public static SpawnMob FromBuffer(byte[] buffer)
        {
            var ret = new SpawnMob();
            ret.Decode(buffer);
            return ret;
        }

    }

    public class SpawnPainting : sul.Utils.Packet
    {

        public const uint Id = 4;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        // direction
        public const byte SOUTH = 0;
        public const byte WEST = 1;
        public const byte NORTH = 2;
        public const byte EAST = 3;

        public uint entityId;
        public System.Guid uuid;
        public string title;
        public ulong position;
        public byte direction;

        public SpawnPainting() : this(0, System.Guid.Empty, "", 0, 0) {}

        public SpawnPainting(uint entityId, System.Guid uuid, string title, ulong position, byte direction)
        {
            this.entityId = entityId;
            this.uuid = uuid;
            this.title = title;
            this.position = position;
            this.direction = direction;
        }

        public override int GetId()
        {
            return (int)Id;
        }

        public override void EncodeId(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteVaruint(Id);
        }

        public override void DecodeId(sul.Utils.Buffer _buffer)
        {
            //_buffer.ReadVaruint();
        }

        protected override void EncodeImpl(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteVaruint(entityId);
            _buffer.WriteUuid(uuid);
            _buffer.WriteVaruint(Encoding.UTF8.GetByteCount(title)); _buffer.WriteString(title);
            _buffer.WriteBigEndianUlong(position);
            _buffer.WriteUbyte(direction);
        }

        protected override void DecodeImpl(sul.Utils.Buffer _buffer)
        {
            //entityId = _buffer.ReadVaruint();
            //uuid = _buffer.ReadUuid();
            //title = _buffer.ReadString();
            //position = _buffer.ReadBigEndianUlong();
            //direction = _buffer.ReadUbyte();
        }

        public static SpawnPainting FromBuffer(byte[] buffer)
        {
            var ret = new SpawnPainting();
            ret.Decode(buffer);
            return ret;
        }

    }

    public class SpawnPlayer : sul.Utils.Packet
    {

        public const uint Id = 5;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        public uint entityId;
        public System.Guid uuid;
        public System.Tuple<double, double, double> position;
        public byte yaw;
        public byte pitch;
        public Metadata metadata;

        public SpawnPlayer() : this(0, System.Guid.Empty, null, 0, 0, new Metadata()) {}

        public SpawnPlayer(uint entityId, System.Guid uuid, System.Tuple<double, double, double> position, byte yaw, byte pitch, Metadata metadata)
        {
            this.entityId = entityId;
            this.uuid = uuid;
            this.position = position;
            this.yaw = yaw;
            this.pitch = pitch;
            this.metadata = metadata;
        }

        public override int GetId()
        {
            return (int)Id;
        }

        public override void EncodeId(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteVaruint(Id);
        }

        public override void DecodeId(sul.Utils.Buffer _buffer)
        {
            //_buffer.ReadVaruint();
        }

        protected override void EncodeImpl(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteVaruint(entityId);
            _buffer.WriteUuid(uuid);
            _buffer.WriteBigEndianDouble(position.Item1); _buffer.WriteBigEndianDouble(position.Item2); _buffer.WriteBigEndianDouble(position.Item3);
            _buffer.WriteUbyte(yaw);
            _buffer.WriteUbyte(pitch);
            metadata.EncodeBody(_buffer);
        }

        protected override void DecodeImpl(sul.Utils.Buffer _buffer)
        {
            //entityId = _buffer.ReadVaruint();
            //uuid = _buffer.ReadUuid();
            //position.Item1 = _buffer.ReadBigEndianDouble(); position.Item2 = _buffer.ReadBigEndianDouble(); position.Item3 = _buffer.ReadBigEndianDouble();
            //yaw = _buffer.ReadUbyte();
            //pitch = _buffer.ReadUbyte();
            //metadata.DecodeBody(_buffer);
        }

        public static SpawnPlayer FromBuffer(byte[] buffer)
        {
            var ret = new SpawnPlayer();
            ret.Decode(buffer);
            return ret;
        }

    }

    public class Animation : sul.Utils.Packet
    {

        public const uint Id = 6;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        // animation
        public const byte SWING_MAIN_ARM = 0;
        public const byte TAKE_DAMAGE = 1;
        public const byte LEAVE_BED = 2;
        public const byte SWING_OFFHAND = 3;
        public const byte CRITICAL_EFFECT = 4;
        public const byte MAGICAL_CRITICAL_EFFECT = 5;

        public uint entityId;
        public byte animation;

        public Animation() : this(0, 0) {}

        public Animation(uint entityId, byte animation)
        {
            this.entityId = entityId;
            this.animation = animation;
        }

        public override int GetId()
        {
            return (int)Id;
        }

        public override void EncodeId(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteVaruint(Id);
        }

        public override void DecodeId(sul.Utils.Buffer _buffer)
        {
            //_buffer.ReadVaruint();
        }

        protected override void EncodeImpl(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteVaruint(entityId);
            _buffer.WriteUbyte(animation);
        }

        protected override void DecodeImpl(sul.Utils.Buffer _buffer)
        {
            //entityId = _buffer.ReadVaruint();
            //animation = _buffer.ReadUbyte();
        }

        public static Animation FromBuffer(byte[] buffer)
        {
            var ret = new Animation();
            ret.Decode(buffer);
            return ret;
        }

    }

    public class Statistics : sul.Utils.Packet
    {

        public const uint Id = 7;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        public Statistic[] statistics;

        public Statistics() : this(new Statistic[]{}) {}

        public Statistics(Statistic[] statistics)
        {
            this.statistics = statistics;
        }

        public override int GetId()
        {
            return (int)Id;
        }

        public override void EncodeId(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteVaruint(Id);
        }

        public override void DecodeId(sul.Utils.Buffer _buffer)
        {
            //_buffer.ReadVaruint();
        }

        protected override void EncodeImpl(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteVaruint(statistics.Length); foreach (Statistic statisticsChild in statistics){ statisticsChild.EncodeBody(_buffer); }
        }

        protected override void DecodeImpl(sul.Utils.Buffer _buffer)
        {
            //statistics.DecodeBody(_buffer);
        }

        public static Statistics FromBuffer(byte[] buffer)
        {
            var ret = new Statistics();
            ret.Decode(buffer);
            return ret;
        }

    }

    public class BlockBreakAnimation : sul.Utils.Packet
    {

        public const uint Id = 8;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        public uint entityId;
        public ulong position;
        public byte stage;

        public BlockBreakAnimation() : this(0, 0, 0) {}

        public BlockBreakAnimation(uint entityId, ulong position, byte stage)
        {
            this.entityId = entityId;
            this.position = position;
            this.stage = stage;
        }

        public override int GetId()
        {
            return (int)Id;
        }

        public override void EncodeId(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteVaruint(Id);
        }

        public override void DecodeId(sul.Utils.Buffer _buffer)
        {
            //_buffer.ReadVaruint();
        }

        protected override void EncodeImpl(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteVaruint(entityId);
            _buffer.WriteBigEndianUlong(position);
            _buffer.WriteUbyte(stage);
        }

        protected override void DecodeImpl(sul.Utils.Buffer _buffer)
        {
            //entityId = _buffer.ReadVaruint();
            //position = _buffer.ReadBigEndianUlong();
            //stage = _buffer.ReadUbyte();
        }

        public static BlockBreakAnimation FromBuffer(byte[] buffer)
        {
            var ret = new BlockBreakAnimation();
            ret.Decode(buffer);
            return ret;
        }

    }

    public class UpdateBlockEntity : sul.Utils.Packet
    {

        public const uint Id = 9;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        // action
        public const byte MOB_SPAWNER_DATA = 1;
        public const byte COMMAND_BLOCK_TEXT = 2;
        public const byte BEACON_POWERS = 3;
        public const byte MOB_HEAD_DATA = 4;
        public const byte FLOWER_POT_FLOWER = 5;
        public const byte BANNER_DATA = 6;
        public const byte STRUCTURE_DATA = 7;
        public const byte END_GATEWAY_DESTINATION = 8;
        public const byte SIGN_TEXT = 9;
        public const byte SHULKER_BOX_DECLARATION = 10;
        public const byte BED_COLOR = 11;

        public ulong position;
        public byte action;
        public byte[] nbt;

        public UpdateBlockEntity() : this(0, 0, new byte[]{}) {}

        public UpdateBlockEntity(ulong position, byte action, byte[] nbt)
        {
            this.position = position;
            this.action = action;
            this.nbt = nbt;
        }

        public override int GetId()
        {
            return (int)Id;
        }

        public override void EncodeId(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteVaruint(Id);
        }

        public override void DecodeId(sul.Utils.Buffer _buffer)
        {
            //_buffer.ReadVaruint();
        }

        protected override void EncodeImpl(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteBigEndianUlong(position);
            _buffer.WriteUbyte(action);
            _buffer.WriteBytes(nbt);
        }

        protected override void DecodeImpl(sul.Utils.Buffer _buffer)
        {
            //position = _buffer.ReadBigEndianUlong();
            //action = _buffer.ReadUbyte();
            //nbt = _buffer.ReadBytes();
        }

        public static UpdateBlockEntity FromBuffer(byte[] buffer)
        {
            var ret = new UpdateBlockEntity();
            ret.Decode(buffer);
            return ret;
        }

    }

    public class BlockAction : sul.Utils.Packet
    {

        public const uint Id = 10;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        // action
        public const byte NOTE_BLOCK_HARP = 0;
        public const byte NOTE_BLOCK_BASS_DRUM = 1;
        public const byte NOTE_BLOCK_SNARE_DRUM = 2;
        public const byte NOTE_BLOCK_CLICKS = 3;
        public const byte NOTE_BLOCK_STICKS = 3;
        public const byte NOTE_BLOCK_BASS_GUITAR = 4;
        public const byte PISTON_EXTEND = 0;
        public const byte PISTON_RETRACT = 1;
        public const byte CHEST_WATCHERS = 1;
        public const byte BEACON_RECALCULATE = 1;
        public const byte MOB_SPAWNER_RESET_DELAY = 1;
        public const byte END_GATEWAY_YELLOW_BEAM = 1;

        // parameter
        public const byte PISTON_DOWN = 0;
        public const byte PISTON_UP = 1;
        public const byte PISTON_SOUTH = 2;
        public const byte PISTON_WEST = 3;
        public const byte PISTON_NORTH = 4;
        public const byte PISTON_EAST = 5;

        public ulong position;
        public byte action;
        public byte parameter;
        public uint blockType;

        public BlockAction() : this(0, 0, 0, 0) {}

        public BlockAction(ulong position, byte action, byte parameter, uint blockType)
        {
            this.position = position;
            this.action = action;
            this.parameter = parameter;
            this.blockType = blockType;
        }

        public override int GetId()
        {
            return (int)Id;
        }

        public override void EncodeId(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteVaruint(Id);
        }

        public override void DecodeId(sul.Utils.Buffer _buffer)
        {
            //_buffer.ReadVaruint();
        }

        protected override void EncodeImpl(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteBigEndianUlong(position);
            _buffer.WriteUbyte(action);
            _buffer.WriteUbyte(parameter);
            _buffer.WriteVaruint(blockType);
        }

        protected override void DecodeImpl(sul.Utils.Buffer _buffer)
        {
            //position = _buffer.ReadBigEndianUlong();
            //action = _buffer.ReadUbyte();
            //parameter = _buffer.ReadUbyte();
            //blockType = _buffer.ReadVaruint();
        }

        public static BlockAction FromBuffer(byte[] buffer)
        {
            var ret = new BlockAction();
            ret.Decode(buffer);
            return ret;
        }

    }

    public class BlockChange : sul.Utils.Packet
    {

        public const uint Id = 11;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        public ulong position;
        public uint block;

        public BlockChange() : this(0, 0) {}

        public BlockChange(ulong position, uint block)
        {
            this.position = position;
            this.block = block;
        }

        public override int GetId()
        {
            return (int)Id;
        }

        public override void EncodeId(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteVaruint(Id);
        }

        public override void DecodeId(sul.Utils.Buffer _buffer)
        {
            //_buffer.ReadVaruint();
        }

        protected override void EncodeImpl(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteBigEndianUlong(position);
            _buffer.WriteVaruint(block);
        }

        protected override void DecodeImpl(sul.Utils.Buffer _buffer)
        {
            //position = _buffer.ReadBigEndianUlong();
            //block = _buffer.ReadVaruint();
        }

        public static BlockChange FromBuffer(byte[] buffer)
        {
            var ret = new BlockChange();
            ret.Decode(buffer);
            return ret;
        }

    }

    public class BossBar : sul.Utils.Packet
    {

        public const uint Id = 12;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        public System.Guid uuid;
        public uint action;

        public BossBar() : this(System.Guid.Empty, 0) {}

        public BossBar(System.Guid uuid, uint action)
        {
            this.uuid = uuid;
            this.action = action;
        }

        public override int GetId()
        {
            return (int)Id;
        }

        public override void EncodeId(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteVaruint(Id);
        }

        public override void DecodeId(sul.Utils.Buffer _buffer)
        {
            //_buffer.ReadVaruint();
        }

        protected override void EncodeImpl(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteUuid(uuid);
            _buffer.WriteVaruint(action);
        }

        protected override void DecodeImpl(sul.Utils.Buffer _buffer)
        {
            //uuid = _buffer.ReadUuid();
            //action = _buffer.ReadVaruint();
        }

        public static BossBar FromBuffer(byte[] buffer)
        {
            var ret = new BossBar();
            ret.Decode(buffer);
            return ret;
        }

        public AddVariant Add(string title, float health, uint color, uint division, byte flags)
        {
            var _variant = new AddVariant(this);
            _variant.title = title;
            _variant.health = health;
            _variant.color = color;
            _variant.division = division;
            _variant.flags = flags;
            return _variant;
        }

        public sealed class AddVariant : sul.Utils.Variant
        {

            private BossBar _parent;

            public string title;
            public float health;
            public uint color;
            public uint division;
            public byte flags;

            public AddVariant(BossBar parent) : base(parent)
            {
                this._parent = parent;
                this._parent.action = 0;
            }

            protected override void EncodeImpl(sul.Utils.Buffer _buffer)
            {
                _parent.EncodeImpl(_buffer);
                _buffer.WriteVaruint(Encoding.UTF8.GetByteCount(title)); _buffer.WriteString(title);
                _buffer.WriteBigEndianFloat(health);
                _buffer.WriteVaruint(color);
                _buffer.WriteVaruint(division);
                _buffer.WriteUbyte(flags);
            }

            protected override void DecodeImpl(sul.Utils.Buffer _buffer)
            {
                //TODO
            }

        }

        public RemoveVariant Remove()
        {
            var _variant = new RemoveVariant(this);

            return _variant;
        }

        public sealed class RemoveVariant : sul.Utils.Variant
        {

            private BossBar _parent;



            public RemoveVariant(BossBar parent) : base(parent)
            {
                this._parent = parent;
                this._parent.action = 1;
            }

            protected override void EncodeImpl(sul.Utils.Buffer _buffer)
            {
                _parent.EncodeImpl(_buffer);

            }

            protected override void DecodeImpl(sul.Utils.Buffer _buffer)
            {
                //TODO
            }

        }

        public UpdateHealthVariant UpdateHealth(float health)
        {
            var _variant = new UpdateHealthVariant(this);
            _variant.health = health;
            return _variant;
        }

        public sealed class UpdateHealthVariant : sul.Utils.Variant
        {

            private BossBar _parent;

            public float health;

            public UpdateHealthVariant(BossBar parent) : base(parent)
            {
                this._parent = parent;
                this._parent.action = 2;
            }

            protected override void EncodeImpl(sul.Utils.Buffer _buffer)
            {
                _parent.EncodeImpl(_buffer);
                _buffer.WriteBigEndianFloat(health);
            }

            protected override void DecodeImpl(sul.Utils.Buffer _buffer)
            {
                //TODO
            }

        }

        public UpdateTitleVariant UpdateTitle(string title)
        {
            var _variant = new UpdateTitleVariant(this);
            _variant.title = title;
            return _variant;
        }

        public sealed class UpdateTitleVariant : sul.Utils.Variant
        {

            private BossBar _parent;

            public string title;

            public UpdateTitleVariant(BossBar parent) : base(parent)
            {
                this._parent = parent;
                this._parent.action = 3;
            }

            protected override void EncodeImpl(sul.Utils.Buffer _buffer)
            {
                _parent.EncodeImpl(_buffer);
                _buffer.WriteVaruint(Encoding.UTF8.GetByteCount(title)); _buffer.WriteString(title);
            }

            protected override void DecodeImpl(sul.Utils.Buffer _buffer)
            {
                //TODO
            }

        }

        public UpdateStyleVariant UpdateStyle(uint color, uint division)
        {
            var _variant = new UpdateStyleVariant(this);
            _variant.color = color;
            _variant.division = division;
            return _variant;
        }

        public sealed class UpdateStyleVariant : sul.Utils.Variant
        {

            private BossBar _parent;

            public uint color;
            public uint division;

            public UpdateStyleVariant(BossBar parent) : base(parent)
            {
                this._parent = parent;
                this._parent.action = 4;
            }

            protected override void EncodeImpl(sul.Utils.Buffer _buffer)
            {
                _parent.EncodeImpl(_buffer);
                _buffer.WriteVaruint(color);
                _buffer.WriteVaruint(division);
            }

            protected override void DecodeImpl(sul.Utils.Buffer _buffer)
            {
                //TODO
            }

        }

        public UpdateFlagsVariant UpdateFlags(byte flags)
        {
            var _variant = new UpdateFlagsVariant(this);
            _variant.flags = flags;
            return _variant;
        }

        public sealed class UpdateFlagsVariant : sul.Utils.Variant
        {

            private BossBar _parent;

            public byte flags;

            public UpdateFlagsVariant(BossBar parent) : base(parent)
            {
                this._parent = parent;
                this._parent.action = 5;
            }

            protected override void EncodeImpl(sul.Utils.Buffer _buffer)
            {
                _parent.EncodeImpl(_buffer);
                _buffer.WriteUbyte(flags);
            }

            protected override void DecodeImpl(sul.Utils.Buffer _buffer)
            {
                //TODO
            }

        }



    }

    public class ServerDifficulty : sul.Utils.Packet
    {

        public const uint Id = 13;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        // difficulty
        public const byte PEACEFUL = 0;
        public const byte EASY = 1;
        public const byte NORMAL = 2;
        public const byte HARD = 3;

        public byte difficulty;

        public ServerDifficulty() : this(0) {}

        public ServerDifficulty(byte difficulty)
        {
            this.difficulty = difficulty;
        }

        public override int GetId()
        {
            return (int)Id;
        }

        public override void EncodeId(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteVaruint(Id);
        }

        public override void DecodeId(sul.Utils.Buffer _buffer)
        {
            //_buffer.ReadVaruint();
        }

        protected override void EncodeImpl(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteUbyte(difficulty);
        }

        protected override void DecodeImpl(sul.Utils.Buffer _buffer)
        {
            //difficulty = _buffer.ReadUbyte();
        }

        public static ServerDifficulty FromBuffer(byte[] buffer)
        {
            var ret = new ServerDifficulty();
            ret.Decode(buffer);
            return ret;
        }

    }

    public class TabComplete : sul.Utils.Packet
    {

        public const uint Id = 14;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        public string[] matches;

        public TabComplete() : this(new string[]{}) {}

        public TabComplete(string[] matches)
        {
            this.matches = matches;
        }

        public override int GetId()
        {
            return (int)Id;
        }

        public override void EncodeId(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteVaruint(Id);
        }

        public override void DecodeId(sul.Utils.Buffer _buffer)
        {
            //_buffer.ReadVaruint();
        }

        protected override void EncodeImpl(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteVaruint(matches.Length); foreach (string matchesChild in matches){ _buffer.WriteVaruint(Encoding.UTF8.GetByteCount(matchesChild)); _buffer.WriteString(matchesChild); }
        }

        protected override void DecodeImpl(sul.Utils.Buffer _buffer)
        {
            //matches.DecodeBody(_buffer);
        }

        public static TabComplete FromBuffer(byte[] buffer)
        {
            var ret = new TabComplete();
            ret.Decode(buffer);
            return ret;
        }

    }

    public class ChatMessage : sul.Utils.Packet
    {

        public const uint Id = 15;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        // position
        public const byte CHAT = 0;
        public const byte SYSTEM_MESSAGE = 1;
        public const byte ABOVE_HOTBAR = 2;

        public string message;
        public byte position;

        public ChatMessage() : this("", 0) {}

        public ChatMessage(string message, byte position)
        {
            this.message = message;
            this.position = position;
        }

        public override int GetId()
        {
            return (int)Id;
        }

        public override void EncodeId(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteVaruint(Id);
        }

        public override void DecodeId(sul.Utils.Buffer _buffer)
        {
            //_buffer.ReadVaruint();
        }

        protected override void EncodeImpl(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteVaruint(Encoding.UTF8.GetByteCount(message)); _buffer.WriteString(message);
            _buffer.WriteUbyte(position);
        }

        protected override void DecodeImpl(sul.Utils.Buffer _buffer)
        {
            //message = _buffer.ReadString();
            //position = _buffer.ReadUbyte();
        }

        public static ChatMessage FromBuffer(byte[] buffer)
        {
            var ret = new ChatMessage();
            ret.Decode(buffer);
            return ret;
        }

    }

    public class MultiBlockChange : sul.Utils.Packet
    {

        public const uint Id = 16;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        public System.Tuple<int, int> chunk;
        public BlockChange[] changes;

        public MultiBlockChange() : this(null, new BlockChange[]{}) {}

        public MultiBlockChange(System.Tuple<int, int> chunk, BlockChange[] changes)
        {
            this.chunk = chunk;
            this.changes = changes;
        }

        public override int GetId()
        {
            return (int)Id;
        }

        public override void EncodeId(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteVaruint(Id);
        }

        public override void DecodeId(sul.Utils.Buffer _buffer)
        {
            //_buffer.ReadVaruint();
        }

        protected override void EncodeImpl(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteBigEndianInt(chunk.Item1); _buffer.WriteBigEndianInt(chunk.Item2);
            _buffer.WriteVaruint(changes.Length); foreach (BlockChange changesChild in changes){ changesChild.EncodeBody(_buffer); }
        }

        protected override void DecodeImpl(sul.Utils.Buffer _buffer)
        {
            //chunk.Item1 = _buffer.ReadBigEndianInt(); chunk.Item2 = _buffer.ReadBigEndianInt();
            //changes.DecodeBody(_buffer);
        }

        public static MultiBlockChange FromBuffer(byte[] buffer)
        {
            var ret = new MultiBlockChange();
            ret.Decode(buffer);
            return ret;
        }

    }

    public class ConfirmTransaction : sul.Utils.Packet
    {

        public const uint Id = 17;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        public byte window;
        public ushort action;
        public bool accepted;

        public ConfirmTransaction() : this(0, 0, false) {}

        public ConfirmTransaction(byte window, ushort action, bool accepted)
        {
            this.window = window;
            this.action = action;
            this.accepted = accepted;
        }

        public override int GetId()
        {
            return (int)Id;
        }

        public override void EncodeId(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteVaruint(Id);
        }

        public override void DecodeId(sul.Utils.Buffer _buffer)
        {
            //_buffer.ReadVaruint();
        }

        protected override void EncodeImpl(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteUbyte(window);
            _buffer.WriteBigEndianUshort(action);
            _buffer.WriteBool(accepted);
        }

        protected override void DecodeImpl(sul.Utils.Buffer _buffer)
        {
            //window = _buffer.ReadUbyte();
            //action = _buffer.ReadBigEndianUshort();
            //accepted = _buffer.ReadBool();
        }

        public static ConfirmTransaction FromBuffer(byte[] buffer)
        {
            var ret = new ConfirmTransaction();
            ret.Decode(buffer);
            return ret;
        }

    }

    public class CloseWindow : sul.Utils.Packet
    {

        public const uint Id = 18;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        public byte window;

        public CloseWindow() : this(0) {}

        public CloseWindow(byte window)
        {
            this.window = window;
        }

        public override int GetId()
        {
            return (int)Id;
        }

        public override void EncodeId(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteVaruint(Id);
        }

        public override void DecodeId(sul.Utils.Buffer _buffer)
        {
            //_buffer.ReadVaruint();
        }

        protected override void EncodeImpl(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteUbyte(window);
        }

        protected override void DecodeImpl(sul.Utils.Buffer _buffer)
        {
            //window = _buffer.ReadUbyte();
        }

        public static CloseWindow FromBuffer(byte[] buffer)
        {
            var ret = new CloseWindow();
            ret.Decode(buffer);
            return ret;
        }

    }

    public class OpenWindow : sul.Utils.Packet
    {

        public const uint Id = 19;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        public byte window;
        public string type;
        public string title;
        public byte slots;

        public OpenWindow() : this(0, "", "", 0) {}

        public OpenWindow(byte window, string type, string title, byte slots)
        {
            this.window = window;
            this.type = type;
            this.title = title;
            this.slots = slots;
        }

        public override int GetId()
        {
            return (int)Id;
        }

        public override void EncodeId(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteVaruint(Id);
        }

        public override void DecodeId(sul.Utils.Buffer _buffer)
        {
            //_buffer.ReadVaruint();
        }

        protected override void EncodeImpl(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteUbyte(window);
            _buffer.WriteVaruint(Encoding.UTF8.GetByteCount(type)); _buffer.WriteString(type);
            _buffer.WriteVaruint(Encoding.UTF8.GetByteCount(title)); _buffer.WriteString(title);
            _buffer.WriteUbyte(slots);
        }

        protected override void DecodeImpl(sul.Utils.Buffer _buffer)
        {
            //window = _buffer.ReadUbyte();
            //type = _buffer.ReadString();
            //title = _buffer.ReadString();
            //slots = _buffer.ReadUbyte();
        }

        public static OpenWindow FromBuffer(byte[] buffer)
        {
            var ret = new OpenWindow();
            ret.Decode(buffer);
            return ret;
        }

    }

    public class WindowItems : sul.Utils.Packet
    {

        public const uint Id = 20;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        public byte window;
        public Slot[] slots;

        public WindowItems() : this(0, new Slot[]{}) {}

        public WindowItems(byte window, Slot[] slots)
        {
            this.window = window;
            this.slots = slots;
        }

        public override int GetId()
        {
            return (int)Id;
        }

        public override void EncodeId(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteVaruint(Id);
        }

        public override void DecodeId(sul.Utils.Buffer _buffer)
        {
            //_buffer.ReadVaruint();
        }

        protected override void EncodeImpl(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteUbyte(window);
            _buffer.WriteBigEndianUshort(slots.Length); foreach (Slot slotsChild in slots){ slotsChild.EncodeBody(_buffer); }
        }

        protected override void DecodeImpl(sul.Utils.Buffer _buffer)
        {
            //window = _buffer.ReadUbyte();
            //slots.DecodeBody(_buffer);
        }

        public static WindowItems FromBuffer(byte[] buffer)
        {
            var ret = new WindowItems();
            ret.Decode(buffer);
            return ret;
        }

    }

    public class WindowProperty : sul.Utils.Packet
    {

        public const uint Id = 21;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        // property
        public const ushort FURNANCE_FIRE_ICON = 0;
        public const ushort FURNACE_MAX_FUEL_BURN_TIME = 1;
        public const ushort FURNACE_PROGRESS_ARROW = 2;
        public const ushort FURNCE_MAX_PROGRESS = 3;
        public const ushort ENCHANTMENT_LEVEL_REQUIREMENT_TOP = 0;
        public const ushort ENCHANTMENT_LEVEL_REQUIREMENT_MIDDLE = 1;
        public const ushort ENCHANTMENT_LEVEL_REQUIREMENT_BOTTOM = 2;
        public const ushort ENCHANTMENT_SEED = 3;
        public const ushort ENCHANTMENT_ID_TOP = 4;
        public const ushort ENCHANTMENT_ID_MIDDLE = 5;
        public const ushort ENCHANTMENT_ID_BOTTOM = 6;
        public const ushort ENCHANTMENT_LEVEL_TOP = 7;
        public const ushort ENCHANTMENT_LEVEL_MIDDLE = 8;
        public const ushort ENCHANTMENT_LEVEL_BOTTOM = 9;
        public const ushort BEACON_POWER_LEVEL = 0;
        public const ushort BEACON_FIRST_EFFECT = 1;
        public const ushort BEACON_SECOND_EFFECT = 2;
        public const ushort ANVIL_REPAIR_COST = 0;
        public const ushort BREWING_STAND_BREW_TIME = 0;

        public byte window;
        public ushort property;
        public short @value;

        public WindowProperty() : this(0, 0, 0) {}

        public WindowProperty(byte window, ushort property, short @value)
        {
            this.window = window;
            this.property = property;
            this.@value = @value;
        }

        public override int GetId()
        {
            return (int)Id;
        }

        public override void EncodeId(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteVaruint(Id);
        }

        public override void DecodeId(sul.Utils.Buffer _buffer)
        {
            //_buffer.ReadVaruint();
        }

        protected override void EncodeImpl(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteUbyte(window);
            _buffer.WriteBigEndianUshort(property);
            _buffer.WriteBigEndianShort(@value);
        }

        protected override void DecodeImpl(sul.Utils.Buffer _buffer)
        {
            //window = _buffer.ReadUbyte();
            //property = _buffer.ReadBigEndianUshort();
            //@value = _buffer.ReadBigEndianShort();
        }

        public static WindowProperty FromBuffer(byte[] buffer)
        {
            var ret = new WindowProperty();
            ret.Decode(buffer);
            return ret;
        }

    }

    public class SetSlot : sul.Utils.Packet
    {

        public const uint Id = 22;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        public byte window;
        public ushort slot;
        public Slot item;

        public SetSlot() : this(0, 0, new Slot()) {}

        public SetSlot(byte window, ushort slot, Slot item)
        {
            this.window = window;
            this.slot = slot;
            this.item = item;
        }

        public override int GetId()
        {
            return (int)Id;
        }

        public override void EncodeId(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteVaruint(Id);
        }

        public override void DecodeId(sul.Utils.Buffer _buffer)
        {
            //_buffer.ReadVaruint();
        }

        protected override void EncodeImpl(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteUbyte(window);
            _buffer.WriteBigEndianUshort(slot);
            item.EncodeBody(_buffer);
        }

        protected override void DecodeImpl(sul.Utils.Buffer _buffer)
        {
            //window = _buffer.ReadUbyte();
            //slot = _buffer.ReadBigEndianUshort();
            //item.DecodeBody(_buffer);
        }

        public static SetSlot FromBuffer(byte[] buffer)
        {
            var ret = new SetSlot();
            ret.Decode(buffer);
            return ret;
        }

    }

    public class SetCooldown : sul.Utils.Packet
    {

        public const uint Id = 23;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        public uint item;
        public uint cooldown;

        public SetCooldown() : this(0, 0) {}

        public SetCooldown(uint item, uint cooldown)
        {
            this.item = item;
            this.cooldown = cooldown;
        }

        public override int GetId()
        {
            return (int)Id;
        }

        public override void EncodeId(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteVaruint(Id);
        }

        public override void DecodeId(sul.Utils.Buffer _buffer)
        {
            //_buffer.ReadVaruint();
        }

        protected override void EncodeImpl(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteVaruint(item);
            _buffer.WriteVaruint(cooldown);
        }

        protected override void DecodeImpl(sul.Utils.Buffer _buffer)
        {
            //item = _buffer.ReadVaruint();
            //cooldown = _buffer.ReadVaruint();
        }

        public static SetCooldown FromBuffer(byte[] buffer)
        {
            var ret = new SetCooldown();
            ret.Decode(buffer);
            return ret;
        }

    }

    public class PluginMessage : sul.Utils.Packet
    {

        public const uint Id = 24;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        public string channel;
        public byte[] data;

        public PluginMessage() : this("", new byte[]{}) {}

        public PluginMessage(string channel, byte[] data)
        {
            this.channel = channel;
            this.data = data;
        }

        public override int GetId()
        {
            return (int)Id;
        }

        public override void EncodeId(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteVaruint(Id);
        }

        public override void DecodeId(sul.Utils.Buffer _buffer)
        {
            //_buffer.ReadVaruint();
        }

        protected override void EncodeImpl(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteVaruint(Encoding.UTF8.GetByteCount(channel)); _buffer.WriteString(channel);
            _buffer.WriteBytes(data);
        }

        protected override void DecodeImpl(sul.Utils.Buffer _buffer)
        {
            //channel = _buffer.ReadString();
            //data = _buffer.ReadBytes();
        }

        public static PluginMessage FromBuffer(byte[] buffer)
        {
            var ret = new PluginMessage();
            ret.Decode(buffer);
            return ret;
        }

    }

    public class NamedSoundEffect : sul.Utils.Packet
    {

        public const uint Id = 25;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        public string name;
        public uint category;
        public System.Tuple<int, int, int> position;
        public float volume;
        public float pitch;

        public NamedSoundEffect() : this("", 0, null, 0, 0) {}

        public NamedSoundEffect(string name, uint category, System.Tuple<int, int, int> position, float volume, float pitch)
        {
            this.name = name;
            this.category = category;
            this.position = position;
            this.volume = volume;
            this.pitch = pitch;
        }

        public override int GetId()
        {
            return (int)Id;
        }

        public override void EncodeId(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteVaruint(Id);
        }

        public override void DecodeId(sul.Utils.Buffer _buffer)
        {
            //_buffer.ReadVaruint();
        }

        protected override void EncodeImpl(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteVaruint(Encoding.UTF8.GetByteCount(name)); _buffer.WriteString(name);
            _buffer.WriteVaruint(category);
            _buffer.WriteBigEndianInt(position.Item1); _buffer.WriteBigEndianInt(position.Item2); _buffer.WriteBigEndianInt(position.Item3);
            _buffer.WriteBigEndianFloat(volume);
            _buffer.WriteBigEndianFloat(pitch);
        }

        protected override void DecodeImpl(sul.Utils.Buffer _buffer)
        {
            //name = _buffer.ReadString();
            //category = _buffer.ReadVaruint();
            //position.Item1 = _buffer.ReadBigEndianInt(); position.Item2 = _buffer.ReadBigEndianInt(); position.Item3 = _buffer.ReadBigEndianInt();
            //volume = _buffer.ReadBigEndianFloat();
            //pitch = _buffer.ReadBigEndianFloat();
        }

        public static NamedSoundEffect FromBuffer(byte[] buffer)
        {
            var ret = new NamedSoundEffect();
            ret.Decode(buffer);
            return ret;
        }

    }

    public class Disconnect : sul.Utils.Packet
    {

        public const uint Id = 26;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        public string reason;

        public Disconnect() : this("") {}

        public Disconnect(string reason)
        {
            this.reason = reason;
        }

        public override int GetId()
        {
            return (int)Id;
        }

        public override void EncodeId(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteVaruint(Id);
        }

        public override void DecodeId(sul.Utils.Buffer _buffer)
        {
            //_buffer.ReadVaruint();
        }

        protected override void EncodeImpl(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteVaruint(Encoding.UTF8.GetByteCount(reason)); _buffer.WriteString(reason);
        }

        protected override void DecodeImpl(sul.Utils.Buffer _buffer)
        {
            //reason = _buffer.ReadString();
        }

        public static Disconnect FromBuffer(byte[] buffer)
        {
            var ret = new Disconnect();
            ret.Decode(buffer);
            return ret;
        }

    }

    public class EntityStatus : sul.Utils.Packet
    {

        public const uint Id = 27;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        // status
        public const byte SPAWN_TIPPED_ARROW_PARTICLE_EFFECTS = 0;
        public const byte PLAY_JUMPING_ANIMATION_AND_PARTICLES = 1;
        public const byte RESET_SPAWNER_DELAY = 1;
        public const byte PLAY_HURT_ANIMATION_AND_SOUND = 2;
        public const byte PLAY_DEATH_ANIMATION_AND_SOUND = 3;
        public const byte PLAY_ATTACK_ANIMATION_AND_SOUND = 4;
        public const byte SPAWN_SMOKE_PARTICLES = 6;
        public const byte SPAWN_HEART_PARTICLES = 7;
        public const byte PLAY_SHAKING_WATER_ANIMATION = 8;
        public const byte FINISHED_CONSUMING = 9;
        public const byte PLAY_EATING_GRASS_ANIMATION = 10;
        public const byte IGNITE_MINECART_TNT = 10;
        public const byte HOLD_POPPY = 11;
        public const byte SPAWN_VILLAGER_MATING_HEART_PARTICLES = 12;
        public const byte SPAWN_VILLAGER_ANGRY_PARTICLES = 13;
        public const byte SPAWN_VILLAGER_HAPPY_PARTICLES = 14;
        public const byte SPAWN_WITCH_MAGIC_PARTICLES = 15;
        public const byte PLAY_ZOMBIE_CURE_FINISHED_SOUND = 16;
        public const byte SPAWN_FIREWORK_EXPLOSION_EFFECT = 17;
        public const byte SPAWN_LOVE_PARTICLES = 18;
        public const byte RESET_SQUID_ROTATION = 19;
        public const byte SPAWN_EXPLOSION_PARTICLES = 20;
        public const byte PLAY_GUARDIAN_SOUND_EFFECT = 21;
        public const byte ENABLE_REDUCED_DEBUG_SCREEN = 22;
        public const byte DISABLE_REDUCED_DEBUG_SCREEN = 23;
        public const byte SET_OP_PERMISSION_LEVEL_0 = 24;
        public const byte SET_OP_PERMISSION_LEVEL_1 = 25;
        public const byte SET_OP_PERMISSION_LEVEL_2 = 26;
        public const byte SET_OP_PERMISSION_LEVEL_3 = 27;
        public const byte SET_OP_PERMISSION_LEVEL_4 = 28;
        public const byte PLAY_SHIELD_BLOCK_SOUND = 29;
        public const byte PLAY_SHIELD_BREAK_SOUND = 30;
        public const byte HOOK_KNOCKBACK = 31;
        public const byte PLAY_HIT_SOUND = 32;
        public const byte PLAY_THORNS_HURT_ANIMATION_AND_SOUND = 33;
        public const byte REMOVE_POPPY = 34;
        public const byte PLAY_TOTEM_UNDYING_ANIMATION = 35;

        public uint entityId;
        public byte status;

        public EntityStatus() : this(0, 0) {}

        public EntityStatus(uint entityId, byte status)
        {
            this.entityId = entityId;
            this.status = status;
        }

        public override int GetId()
        {
            return (int)Id;
        }

        public override void EncodeId(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteVaruint(Id);
        }

        public override void DecodeId(sul.Utils.Buffer _buffer)
        {
            //_buffer.ReadVaruint();
        }

        protected override void EncodeImpl(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteBigEndianUint(entityId);
            _buffer.WriteUbyte(status);
        }

        protected override void DecodeImpl(sul.Utils.Buffer _buffer)
        {
            //entityId = _buffer.ReadBigEndianUint();
            //status = _buffer.ReadUbyte();
        }

        public static EntityStatus FromBuffer(byte[] buffer)
        {
            var ret = new EntityStatus();
            ret.Decode(buffer);
            return ret;
        }

    }

    public class Explosion : sul.Utils.Packet
    {

        public const uint Id = 28;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        public System.Tuple<float, float, float> position;
        public float radius;
        public System.Tuple<sbyte, sbyte, sbyte>[] records;
        public System.Tuple<float, float, float> motion;

        public Explosion() : this(null, 0, new System.Tuple<sbyte, sbyte, sbyte>[]{}, null) {}

        public Explosion(System.Tuple<float, float, float> position, float radius, System.Tuple<sbyte, sbyte, sbyte>[] records, System.Tuple<float, float, float> motion)
        {
            this.position = position;
            this.radius = radius;
            this.records = records;
            this.motion = motion;
        }

        public override int GetId()
        {
            return (int)Id;
        }

        public override void EncodeId(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteVaruint(Id);
        }

        public override void DecodeId(sul.Utils.Buffer _buffer)
        {
            //_buffer.ReadVaruint();
        }

        protected override void EncodeImpl(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteBigEndianFloat(position.Item1); _buffer.WriteBigEndianFloat(position.Item2); _buffer.WriteBigEndianFloat(position.Item3);
            _buffer.WriteBigEndianFloat(radius);
            _buffer.WriteBigEndianUint(records.Length); foreach (System.Tuple<sbyte, sbyte, sbyte> recordsChild in records){ _buffer.WriteByte(recordsChild.Item1); _buffer.WriteByte(recordsChild.Item2); _buffer.WriteByte(recordsChild.Item3); }
            _buffer.WriteBigEndianFloat(motion.Item1); _buffer.WriteBigEndianFloat(motion.Item2); _buffer.WriteBigEndianFloat(motion.Item3);
        }

        protected override void DecodeImpl(sul.Utils.Buffer _buffer)
        {
            //position.Item1 = _buffer.ReadBigEndianFloat(); position.Item2 = _buffer.ReadBigEndianFloat(); position.Item3 = _buffer.ReadBigEndianFloat();
            //radius = _buffer.ReadBigEndianFloat();
            //records.DecodeBody(_buffer);
            //motion.Item1 = _buffer.ReadBigEndianFloat(); motion.Item2 = _buffer.ReadBigEndianFloat(); motion.Item3 = _buffer.ReadBigEndianFloat();
        }

        public static Explosion FromBuffer(byte[] buffer)
        {
            var ret = new Explosion();
            ret.Decode(buffer);
            return ret;
        }

    }

    public class UnloadChunk : sul.Utils.Packet
    {

        public const uint Id = 29;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        public System.Tuple<int, int> position;

        public UnloadChunk() : this(null) {}

        public UnloadChunk(System.Tuple<int, int> position)
        {
            this.position = position;
        }

        public override int GetId()
        {
            return (int)Id;
        }

        public override void EncodeId(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteVaruint(Id);
        }

        public override void DecodeId(sul.Utils.Buffer _buffer)
        {
            //_buffer.ReadVaruint();
        }

        protected override void EncodeImpl(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteBigEndianInt(position.Item1); _buffer.WriteBigEndianInt(position.Item2);
        }

        protected override void DecodeImpl(sul.Utils.Buffer _buffer)
        {
            //position.Item1 = _buffer.ReadBigEndianInt(); position.Item2 = _buffer.ReadBigEndianInt();
        }

        public static UnloadChunk FromBuffer(byte[] buffer)
        {
            var ret = new UnloadChunk();
            ret.Decode(buffer);
            return ret;
        }

    }

    public class ChangeGameState : sul.Utils.Packet
    {

        public const uint Id = 30;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        // reason
        public const byte INVALID_BED = 0;
        public const byte END_RAINING = 1;
        public const byte BEGIN_RAINING = 2;
        public const byte CHANGE_GAMEMODE = 3;
        public const byte EXIT_END = 4;
        public const byte DEMO_MESSAGE = 5;
        public const byte ARROW_HITTING_PLAYER = 6;
        public const byte FADE_VALUE = 7;
        public const byte FADE_TIME = 8;
        public const byte PLAY_ELDER_GUARDIAN_MOB_APPEARANCE = 10;

        // value
        public const float SURVIVAL = 0;
        public const float CREATIVE = 1;
        public const float ADVENTURE = 2;
        public const float SPECTATOR = 3;
        public const float RESPAWN_IMMEDIATELY = 0;
        public const float RESPAWN_AFTER_CREDITS = 1;
        public const float SHOW_DEMO_SCREEN = 0;
        public const float TELL_MOVEMENT_CONTROLS = 101;
        public const float TELL_JUMP_CONTROLS = 102;
        public const float TELL_INVENTORY_CONTROLS = 103;
        public const float BRIGHT = 0;
        public const float DARK = 1;

        public byte reason;
        public float @value;

        public ChangeGameState() : this(0, 0) {}

        public ChangeGameState(byte reason, float @value)
        {
            this.reason = reason;
            this.@value = @value;
        }

        public override int GetId()
        {
            return (int)Id;
        }

        public override void EncodeId(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteVaruint(Id);
        }

        public override void DecodeId(sul.Utils.Buffer _buffer)
        {
            //_buffer.ReadVaruint();
        }

        protected override void EncodeImpl(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteUbyte(reason);
            _buffer.WriteBigEndianFloat(@value);
        }

        protected override void DecodeImpl(sul.Utils.Buffer _buffer)
        {
            //reason = _buffer.ReadUbyte();
            //@value = _buffer.ReadBigEndianFloat();
        }

        public static ChangeGameState FromBuffer(byte[] buffer)
        {
            var ret = new ChangeGameState();
            ret.Decode(buffer);
            return ret;
        }

    }

    public class KeepAlive : sul.Utils.Packet
    {

        public const uint Id = 31;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        public uint id;

        public KeepAlive() : this(0) {}

        public KeepAlive(uint id)
        {
            this.id = id;
        }

        public override int GetId()
        {
            return (int)Id;
        }

        public override void EncodeId(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteVaruint(Id);
        }

        public override void DecodeId(sul.Utils.Buffer _buffer)
        {
            //_buffer.ReadVaruint();
        }

        protected override void EncodeImpl(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteVaruint(id);
        }

        protected override void DecodeImpl(sul.Utils.Buffer _buffer)
        {
            //id = _buffer.ReadVaruint();
        }

        public static KeepAlive FromBuffer(byte[] buffer)
        {
            var ret = new KeepAlive();
            ret.Decode(buffer);
            return ret;
        }

    }

    public class ChunkData : sul.Utils.Packet
    {

        public const uint Id = 32;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        public System.Tuple<int, int> position;
        public bool full;
        public uint sections;
        public byte[] data;
        public uint tilesCount;
        public byte[] tiles;

        public ChunkData() : this(null, false, 0, new byte[]{}, 0, new byte[]{}) {}

        public ChunkData(System.Tuple<int, int> position, bool full, uint sections, byte[] data, uint tilesCount, byte[] tiles)
        {
            this.position = position;
            this.full = full;
            this.sections = sections;
            this.data = data;
            this.tilesCount = tilesCount;
            this.tiles = tiles;
        }

        public override int GetId()
        {
            return (int)Id;
        }

        public override void EncodeId(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteVaruint(Id);
        }

        public override void DecodeId(sul.Utils.Buffer _buffer)
        {
            //_buffer.ReadVaruint();
        }

        protected override void EncodeImpl(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteBigEndianInt(position.Item1); _buffer.WriteBigEndianInt(position.Item2);
            _buffer.WriteBool(full);
            _buffer.WriteVaruint(sections);
            _buffer.WriteVaruint(data.Length); _buffer.WriteBytes(data);
            _buffer.WriteVaruint(tilesCount);
            _buffer.WriteBytes(tiles);
        }

        protected override void DecodeImpl(sul.Utils.Buffer _buffer)
        {
            //position.Item1 = _buffer.ReadBigEndianInt(); position.Item2 = _buffer.ReadBigEndianInt();
            //full = _buffer.ReadBool();
            //sections = _buffer.ReadVaruint();
            //data.DecodeBody(_buffer);
            //tilesCount = _buffer.ReadVaruint();
            //tiles = _buffer.ReadBytes();
        }

        public static ChunkData FromBuffer(byte[] buffer)
        {
            var ret = new ChunkData();
            ret.Decode(buffer);
            return ret;
        }

    }

    public class Effect : sul.Utils.Packet
    {

        public const uint Id = 33;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        // effect id
        public const uint DISPENSER_DISPENSE = 1000;
        public const uint DISPENSER_FAIL_DISPENSE = 1001;
        public const uint DISPENSER_SHOOT = 1002;
        public const uint ENDER_EYE_LAUNCH = 1003;
        public const uint FIREWORK_SHOT = 1004;
        public const uint IRON_DOOR_OPEN = 1005;
        public const uint WOODEN_DOOR_OPEN = 1006;
        public const uint WOODEN_TRAPDOOR_OPEN = 1007;
        public const uint FENCE_GATE_OPEN = 1008;
        public const uint FIRE_EXTINGUISH = 1009;
        public const uint PLAY_RECORD = 1010;
        public const uint IRON_DOOR_CLOSE = 1011;
        public const uint WOODEN_DOOR_CLOSE = 1012;
        public const uint WOODEN_TRAPDOOR_CLOSE = 1013;
        public const uint FENCE_GATE_CLOSE = 1014;
        public const uint GHAST_WARN = 1015;
        public const uint GHAST_SHOOT = 1016;
        public const uint ENDERDRAGON_SHOOT = 1017;
        public const uint BLAZE_SHOOT = 1018;
        public const uint ZOMBIE_ATTACK_WOOD_DOOR = 1019;
        public const uint ZOMBIE_ATTACK_IRON_DOOR = 1020;
        public const uint ZOMBIE_BREAK_WOOD_DOOR = 1021;
        public const uint WITHER_BREAK_BLOCK = 1022;
        public const uint WITHER_SPAWN = 1023;
        public const uint WITHER_SHOOT = 1024;
        public const uint BAT_TAKE_OFF = 1025;
        public const uint ZOMBIE_INFECT_VILLAGER = 1026;
        public const uint ZOMBIE_VILLAGER_CONVERT = 1027;
        public const uint ENDER_DRAGON_BREATH = 1028;
        public const uint ANVIL_BREAK = 1029;
        public const uint ANVIL_USE = 1030;
        public const uint ANVIL_LAND = 1031;
        public const uint PORTAL_TRAVEL = 1032;
        public const uint CHORUS_FLOWER_GROW = 1033;
        public const uint CHORUS_FLOWER_DIE = 1034;
        public const uint BREWING_STAND_BREW = 1035;
        public const uint IRON_TRAPDOOR_OPEN = 1036;
        public const uint IRON_TRAPDOOR_CLOSE = 1037;
        public const uint SPAWN_10_SMOKE_PARTICLES = 2000;
        public const uint BREAK_BREAK_PARTICLES_AND_SOUND = 2001;
        public const uint SPLASH_POTION_PARTICLES_AND_SOUND = 2002;
        public const uint ENDER_EYE_BREAK_PARTICLES_AND_SOUND = 2003;
        public const uint MOB_SPAWN_PARTICLES = 2004;
        public const uint BONEMEAL_PARTICLES = 2005;
        public const uint DRAGON_BREATH = 2006;
        public const uint END_GATEWAY_SPAWN = 3000;
        public const uint ENDERDRAGON_GROWL = 3001;

        public uint effectId;
        public ulong position;
        public uint data;
        public bool disableVolume;

        public Effect() : this(0, 0, 0, false) {}

        public Effect(uint effectId, ulong position, uint data, bool disableVolume)
        {
            this.effectId = effectId;
            this.position = position;
            this.data = data;
            this.disableVolume = disableVolume;
        }

        public override int GetId()
        {
            return (int)Id;
        }

        public override void EncodeId(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteVaruint(Id);
        }

        public override void DecodeId(sul.Utils.Buffer _buffer)
        {
            //_buffer.ReadVaruint();
        }

        protected override void EncodeImpl(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteBigEndianUint(effectId);
            _buffer.WriteBigEndianUlong(position);
            _buffer.WriteBigEndianUint(data);
            _buffer.WriteBool(disableVolume);
        }

        protected override void DecodeImpl(sul.Utils.Buffer _buffer)
        {
            //effectId = _buffer.ReadBigEndianUint();
            //position = _buffer.ReadBigEndianUlong();
            //data = _buffer.ReadBigEndianUint();
            //disableVolume = _buffer.ReadBool();
        }

        public static Effect FromBuffer(byte[] buffer)
        {
            var ret = new Effect();
            ret.Decode(buffer);
            return ret;
        }

    }

    public class Particle : sul.Utils.Packet
    {

        public const uint Id = 34;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        // particle id
        public const uint EXPLODE = 0;
        public const uint LARGE_EXPLOSION = 1;
        public const uint HUGE_EXPLOSION = 2;
        public const uint FIREWORK_SPARK = 3;
        public const uint BUBBLE = 4;
        public const uint SPLASH = 5;
        public const uint WAKE = 6;
        public const uint SUSPENDED = 7;
        public const uint DEPTH_SUSPEND = 8;
        public const uint CRIT = 9;
        public const uint MAGIC_CRIT = 10;
        public const uint SMOKE = 11;
        public const uint LARGE_SMOKE = 12;
        public const uint SPELL = 13;
        public const uint INSTANT_SPELL = 14;
        public const uint MOB_SPELL = 15;
        public const uint MOB_SPELL_AMBIENT = 16;
        public const uint WITCH_MAGIC = 17;
        public const uint DRIP_WATER = 18;
        public const uint DRIP_LAVA = 19;
        public const uint ANGRY_VILLAGER = 20;
        public const uint HAPPY_VILLAGER = 21;
        public const uint TOWN_AURA = 22;
        public const uint NOTE = 23;
        public const uint PORTAL = 24;
        public const uint ENCHANTMENT_TABLE = 25;
        public const uint FLAME = 26;
        public const uint LAVA = 27;
        public const uint FOOTSTEP = 28;
        public const uint CLOUD = 29;
        public const uint RED_DUST = 30;
        public const uint SNOWBALL_POOF = 31;
        public const uint SNOW_SHOVEL = 32;
        public const uint SLIME = 33;
        public const uint HEART = 34;
        public const uint BARRIER = 35;
        public const uint ITEM_CRACK = 36;
        public const uint BLOCK_CRACK = 37;
        public const uint BLOCK_DUST = 38;
        public const uint DROPLET = 39;
        public const uint TAKE = 40;
        public const uint MOB_APPEARANCE = 41;
        public const uint DRAGON_BREATH = 42;
        public const uint ENDROD = 43;
        public const uint DAMAGE_INDICATOR = 44;
        public const uint SWEEP_ATTACK = 45;
        public const uint FALLING_DUST = 46;

        public uint particleId;
        public bool longDistance;
        public System.Tuple<float, float, float> position;
        public System.Tuple<float, float, float> offset;
        public float data;
        public uint count;
        public uint[] additionalData;

        public Particle() : this(0, false, null, null, 0, 0, new uint[2]) {}

        public Particle(uint particleId, bool longDistance, System.Tuple<float, float, float> position, System.Tuple<float, float, float> offset, float data, uint count, uint[] additionalData)
        {
            this.particleId = particleId;
            this.longDistance = longDistance;
            this.position = position;
            this.offset = offset;
            this.data = data;
            this.count = count;
            this.additionalData = additionalData;
        }

        public override int GetId()
        {
            return (int)Id;
        }

        public override void EncodeId(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteVaruint(Id);
        }

        public override void DecodeId(sul.Utils.Buffer _buffer)
        {
            //_buffer.ReadVaruint();
        }

        protected override void EncodeImpl(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteBigEndianUint(particleId);
            _buffer.WriteBool(longDistance);
            _buffer.WriteBigEndianFloat(position.Item1); _buffer.WriteBigEndianFloat(position.Item2); _buffer.WriteBigEndianFloat(position.Item3);
            _buffer.WriteBigEndianFloat(offset.Item1); _buffer.WriteBigEndianFloat(offset.Item2); _buffer.WriteBigEndianFloat(offset.Item3);
            _buffer.WriteBigEndianFloat(data);
            _buffer.WriteBigEndianUint(count);
            foreach (uint additionalDataChild in additionalData){ _buffer.WriteVaruint(additionalDataChild); }
        }

        protected override void DecodeImpl(sul.Utils.Buffer _buffer)
        {
            //particleId = _buffer.ReadBigEndianUint();
            //longDistance = _buffer.ReadBool();
            //position.Item1 = _buffer.ReadBigEndianFloat(); position.Item2 = _buffer.ReadBigEndianFloat(); position.Item3 = _buffer.ReadBigEndianFloat();
            //offset.Item1 = _buffer.ReadBigEndianFloat(); offset.Item2 = _buffer.ReadBigEndianFloat(); offset.Item3 = _buffer.ReadBigEndianFloat();
            //data = _buffer.ReadBigEndianFloat();
            //count = _buffer.ReadBigEndianUint();
            //additionalData.DecodeBody(_buffer);
        }

        public static Particle FromBuffer(byte[] buffer)
        {
            var ret = new Particle();
            ret.Decode(buffer);
            return ret;
        }

    }

    public class JoinGame : sul.Utils.Packet
    {

        public const uint Id = 35;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        // gamemode
        public const byte SURVIVAL = 0;
        public const byte CREATIVE = 1;
        public const byte ADVENTURE = 2;
        public const byte SPECTATOR = 3;

        // dimension
        public const int NETHER = -1;
        public const int OVERWORLD = 0;
        public const int END = 1;

        // difficulty
        public const byte PEACEFUL = 0;
        public const byte EASY = 1;
        public const byte NORMAL = 2;
        public const byte HARD = 3;

        // level type
        public const string INFINITY = "default";
        public const string FLAT = "flat";
        public const string AMPLIFIED = "amplified";
        public const string LARGE_BIOMES = "largeBiomes";

        public uint entityId;
        public byte gamemode;
        public int dimension;
        public byte difficulty;
        public byte maxPlayers;
        public string levelType;
        public bool reducedDebug;

        public JoinGame() : this(0, 0, 0, 0, 0, "", false) {}

        public JoinGame(uint entityId, byte gamemode, int dimension, byte difficulty, byte maxPlayers, string levelType, bool reducedDebug)
        {
            this.entityId = entityId;
            this.gamemode = gamemode;
            this.dimension = dimension;
            this.difficulty = difficulty;
            this.maxPlayers = maxPlayers;
            this.levelType = levelType;
            this.reducedDebug = reducedDebug;
        }

        public override int GetId()
        {
            return (int)Id;
        }

        public override void EncodeId(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteVaruint(Id);
        }

        public override void DecodeId(sul.Utils.Buffer _buffer)
        {
            //_buffer.ReadVaruint();
        }

        protected override void EncodeImpl(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteBigEndianUint(entityId);
            _buffer.WriteUbyte(gamemode);
            _buffer.WriteBigEndianInt(dimension);
            _buffer.WriteUbyte(difficulty);
            _buffer.WriteUbyte(maxPlayers);
            _buffer.WriteVaruint(Encoding.UTF8.GetByteCount(levelType)); _buffer.WriteString(levelType);
            _buffer.WriteBool(reducedDebug);
        }

        protected override void DecodeImpl(sul.Utils.Buffer _buffer)
        {
            //entityId = _buffer.ReadBigEndianUint();
            //gamemode = _buffer.ReadUbyte();
            //dimension = _buffer.ReadBigEndianInt();
            //difficulty = _buffer.ReadUbyte();
            //maxPlayers = _buffer.ReadUbyte();
            //levelType = _buffer.ReadString();
            //reducedDebug = _buffer.ReadBool();
        }

        public static JoinGame FromBuffer(byte[] buffer)
        {
            var ret = new JoinGame();
            ret.Decode(buffer);
            return ret;
        }

    }

    public class Map : sul.Utils.Packet
    {

        public const uint Id = 36;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        public uint mapId;
        public byte scale;
        public bool showIcons;
        public Icon[] icons;
        public byte colums;
        public byte rows;
        public System.Tuple<byte, byte> offset;
        public byte[] data;

        public Map() : this(0, 0, false, new Icon[]{}, 0, 0, null, new byte[]{}) {}

        public Map(uint mapId, byte scale, bool showIcons, Icon[] icons, byte colums, byte rows, System.Tuple<byte, byte> offset, byte[] data)
        {
            this.mapId = mapId;
            this.scale = scale;
            this.showIcons = showIcons;
            this.icons = icons;
            this.colums = colums;
            this.rows = rows;
            this.offset = offset;
            this.data = data;
        }

        public override int GetId()
        {
            return (int)Id;
        }

        public override void EncodeId(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteVaruint(Id);
        }

        public override void DecodeId(sul.Utils.Buffer _buffer)
        {
            //_buffer.ReadVaruint();
        }

        protected override void EncodeImpl(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteVaruint(mapId);
            _buffer.WriteUbyte(scale);
            _buffer.WriteBool(showIcons);
            _buffer.WriteVaruint(icons.Length); foreach (Icon iconsChild in icons){ iconsChild.EncodeBody(_buffer); }
            _buffer.WriteUbyte(colums);
            _buffer.WriteUbyte(rows);
            _buffer.WriteUbyte(offset.Item1); _buffer.WriteUbyte(offset.Item2);
            _buffer.WriteVaruint(data.Length); _buffer.WriteBytes(data);
        }

        protected override void DecodeImpl(sul.Utils.Buffer _buffer)
        {
            //mapId = _buffer.ReadVaruint();
            //scale = _buffer.ReadUbyte();
            //showIcons = _buffer.ReadBool();
            //icons.DecodeBody(_buffer);
            //colums = _buffer.ReadUbyte();
            //rows = _buffer.ReadUbyte();
            //offset.Item1 = _buffer.ReadUbyte(); offset.Item2 = _buffer.ReadUbyte();
            //data.DecodeBody(_buffer);
        }

        public static Map FromBuffer(byte[] buffer)
        {
            var ret = new Map();
            ret.Decode(buffer);
            return ret;
        }

    }

    public class Entity : sul.Utils.Packet
    {

        public const uint Id = 37;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        public uint entityId;

        public Entity() : this(0) {}

        public Entity(uint entityId)
        {
            this.entityId = entityId;
        }

        public override int GetId()
        {
            return (int)Id;
        }

        public override void EncodeId(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteVaruint(Id);
        }

        public override void DecodeId(sul.Utils.Buffer _buffer)
        {
            //_buffer.ReadVaruint();
        }

        protected override void EncodeImpl(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteVaruint(entityId);
        }

        protected override void DecodeImpl(sul.Utils.Buffer _buffer)
        {
            //entityId = _buffer.ReadVaruint();
        }

        public static Entity FromBuffer(byte[] buffer)
        {
            var ret = new Entity();
            ret.Decode(buffer);
            return ret;
        }

    }

    public class EntityRelativeMove : sul.Utils.Packet
    {

        public const uint Id = 38;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        public uint entityId;
        public System.Tuple<short, short, short> delta;
        public bool onGround;

        public EntityRelativeMove() : this(0, null, false) {}

        public EntityRelativeMove(uint entityId, System.Tuple<short, short, short> delta, bool onGround)
        {
            this.entityId = entityId;
            this.delta = delta;
            this.onGround = onGround;
        }

        public override int GetId()
        {
            return (int)Id;
        }

        public override void EncodeId(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteVaruint(Id);
        }

        public override void DecodeId(sul.Utils.Buffer _buffer)
        {
            //_buffer.ReadVaruint();
        }

        protected override void EncodeImpl(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteVaruint(entityId);
            _buffer.WriteBigEndianShort(delta.Item1); _buffer.WriteBigEndianShort(delta.Item2); _buffer.WriteBigEndianShort(delta.Item3);
            _buffer.WriteBool(onGround);
        }

        protected override void DecodeImpl(sul.Utils.Buffer _buffer)
        {
            //entityId = _buffer.ReadVaruint();
            //delta.Item1 = _buffer.ReadBigEndianShort(); delta.Item2 = _buffer.ReadBigEndianShort(); delta.Item3 = _buffer.ReadBigEndianShort();
            //onGround = _buffer.ReadBool();
        }

        public static EntityRelativeMove FromBuffer(byte[] buffer)
        {
            var ret = new EntityRelativeMove();
            ret.Decode(buffer);
            return ret;
        }

    }

    public class EntityLookAndRelativeMove : sul.Utils.Packet
    {

        public const uint Id = 39;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        public uint entityId;
        public System.Tuple<short, short, short> delta;
        public byte yaw;
        public byte pitch;
        public bool onGround;

        public EntityLookAndRelativeMove() : this(0, null, 0, 0, false) {}

        public EntityLookAndRelativeMove(uint entityId, System.Tuple<short, short, short> delta, byte yaw, byte pitch, bool onGround)
        {
            this.entityId = entityId;
            this.delta = delta;
            this.yaw = yaw;
            this.pitch = pitch;
            this.onGround = onGround;
        }

        public override int GetId()
        {
            return (int)Id;
        }

        public override void EncodeId(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteVaruint(Id);
        }

        public override void DecodeId(sul.Utils.Buffer _buffer)
        {
            //_buffer.ReadVaruint();
        }

        protected override void EncodeImpl(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteVaruint(entityId);
            _buffer.WriteBigEndianShort(delta.Item1); _buffer.WriteBigEndianShort(delta.Item2); _buffer.WriteBigEndianShort(delta.Item3);
            _buffer.WriteUbyte(yaw);
            _buffer.WriteUbyte(pitch);
            _buffer.WriteBool(onGround);
        }

        protected override void DecodeImpl(sul.Utils.Buffer _buffer)
        {
            //entityId = _buffer.ReadVaruint();
            //delta.Item1 = _buffer.ReadBigEndianShort(); delta.Item2 = _buffer.ReadBigEndianShort(); delta.Item3 = _buffer.ReadBigEndianShort();
            //yaw = _buffer.ReadUbyte();
            //pitch = _buffer.ReadUbyte();
            //onGround = _buffer.ReadBool();
        }

        public static EntityLookAndRelativeMove FromBuffer(byte[] buffer)
        {
            var ret = new EntityLookAndRelativeMove();
            ret.Decode(buffer);
            return ret;
        }

    }

    public class EntityLook : sul.Utils.Packet
    {

        public const uint Id = 40;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        public uint entityId;
        public byte yaw;
        public byte pitch;
        public bool onGround;

        public EntityLook() : this(0, 0, 0, false) {}

        public EntityLook(uint entityId, byte yaw, byte pitch, bool onGround)
        {
            this.entityId = entityId;
            this.yaw = yaw;
            this.pitch = pitch;
            this.onGround = onGround;
        }

        public override int GetId()
        {
            return (int)Id;
        }

        public override void EncodeId(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteVaruint(Id);
        }

        public override void DecodeId(sul.Utils.Buffer _buffer)
        {
            //_buffer.ReadVaruint();
        }

        protected override void EncodeImpl(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteVaruint(entityId);
            _buffer.WriteUbyte(yaw);
            _buffer.WriteUbyte(pitch);
            _buffer.WriteBool(onGround);
        }

        protected override void DecodeImpl(sul.Utils.Buffer _buffer)
        {
            //entityId = _buffer.ReadVaruint();
            //yaw = _buffer.ReadUbyte();
            //pitch = _buffer.ReadUbyte();
            //onGround = _buffer.ReadBool();
        }

        public static EntityLook FromBuffer(byte[] buffer)
        {
            var ret = new EntityLook();
            ret.Decode(buffer);
            return ret;
        }

    }

    public class VehicleMove : sul.Utils.Packet
    {

        public const uint Id = 41;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        public System.Tuple<double, double, double> position;
        public float yaw;
        public float pitch;

        public VehicleMove() : this(null, 0, 0) {}

        public VehicleMove(System.Tuple<double, double, double> position, float yaw, float pitch)
        {
            this.position = position;
            this.yaw = yaw;
            this.pitch = pitch;
        }

        public override int GetId()
        {
            return (int)Id;
        }

        public override void EncodeId(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteVaruint(Id);
        }

        public override void DecodeId(sul.Utils.Buffer _buffer)
        {
            //_buffer.ReadVaruint();
        }

        protected override void EncodeImpl(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteBigEndianDouble(position.Item1); _buffer.WriteBigEndianDouble(position.Item2); _buffer.WriteBigEndianDouble(position.Item3);
            _buffer.WriteBigEndianFloat(yaw);
            _buffer.WriteBigEndianFloat(pitch);
        }

        protected override void DecodeImpl(sul.Utils.Buffer _buffer)
        {
            //position.Item1 = _buffer.ReadBigEndianDouble(); position.Item2 = _buffer.ReadBigEndianDouble(); position.Item3 = _buffer.ReadBigEndianDouble();
            //yaw = _buffer.ReadBigEndianFloat();
            //pitch = _buffer.ReadBigEndianFloat();
        }

        public static VehicleMove FromBuffer(byte[] buffer)
        {
            var ret = new VehicleMove();
            ret.Decode(buffer);
            return ret;
        }

    }

    public class OpenSignEditor : sul.Utils.Packet
    {

        public const uint Id = 42;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        public ulong position;

        public OpenSignEditor() : this(0) {}

        public OpenSignEditor(ulong position)
        {
            this.position = position;
        }

        public override int GetId()
        {
            return (int)Id;
        }

        public override void EncodeId(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteVaruint(Id);
        }

        public override void DecodeId(sul.Utils.Buffer _buffer)
        {
            //_buffer.ReadVaruint();
        }

        protected override void EncodeImpl(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteBigEndianUlong(position);
        }

        protected override void DecodeImpl(sul.Utils.Buffer _buffer)
        {
            //position = _buffer.ReadBigEndianUlong();
        }

        public static OpenSignEditor FromBuffer(byte[] buffer)
        {
            var ret = new OpenSignEditor();
            ret.Decode(buffer);
            return ret;
        }

    }

    public class PlayerAbilities : sul.Utils.Packet
    {

        public const uint Id = 43;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        // flags
        public const byte INVULNERABLE = 1;
        public const byte FLYING = 2;
        public const byte ALLOW_FLYING = 4;
        public const byte CREATIVE_MODE = 8;

        public byte flags;
        public float flyingSpeed;
        public float fovModifier;

        public PlayerAbilities() : this(0, 0, 0) {}

        public PlayerAbilities(byte flags, float flyingSpeed, float fovModifier)
        {
            this.flags = flags;
            this.flyingSpeed = flyingSpeed;
            this.fovModifier = fovModifier;
        }

        public override int GetId()
        {
            return (int)Id;
        }

        public override void EncodeId(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteVaruint(Id);
        }

        public override void DecodeId(sul.Utils.Buffer _buffer)
        {
            //_buffer.ReadVaruint();
        }

        protected override void EncodeImpl(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteUbyte(flags);
            _buffer.WriteBigEndianFloat(flyingSpeed);
            _buffer.WriteBigEndianFloat(fovModifier);
        }

        protected override void DecodeImpl(sul.Utils.Buffer _buffer)
        {
            //flags = _buffer.ReadUbyte();
            //flyingSpeed = _buffer.ReadBigEndianFloat();
            //fovModifier = _buffer.ReadBigEndianFloat();
        }

        public static PlayerAbilities FromBuffer(byte[] buffer)
        {
            var ret = new PlayerAbilities();
            ret.Decode(buffer);
            return ret;
        }

    }

    public class CombatEvent : sul.Utils.Packet
    {

        public const uint Id = 44;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        public byte eventId;

        public CombatEvent() : this(0) {}

        public CombatEvent(byte eventId)
        {
            this.eventId = eventId;
        }

        public override int GetId()
        {
            return (int)Id;
        }

        public override void EncodeId(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteVaruint(Id);
        }

        public override void DecodeId(sul.Utils.Buffer _buffer)
        {
            //_buffer.ReadVaruint();
        }

        protected override void EncodeImpl(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteUbyte(eventId);
        }

        protected override void DecodeImpl(sul.Utils.Buffer _buffer)
        {
            //eventId = _buffer.ReadUbyte();
        }

        public static CombatEvent FromBuffer(byte[] buffer)
        {
            var ret = new CombatEvent();
            ret.Decode(buffer);
            return ret;
        }

        public EnterCombatVariant EnterCombat()
        {
            var _variant = new EnterCombatVariant(this);

            return _variant;
        }

        public sealed class EnterCombatVariant : sul.Utils.Variant
        {

            private CombatEvent _parent;



            public EnterCombatVariant(CombatEvent parent) : base(parent)
            {
                this._parent = parent;
                this._parent.eventId = 0;
            }

            protected override void EncodeImpl(sul.Utils.Buffer _buffer)
            {
                _parent.EncodeImpl(_buffer);

            }

            protected override void DecodeImpl(sul.Utils.Buffer _buffer)
            {
                //TODO
            }

        }

        public EndCombatVariant EndCombat(uint duration, uint entityId)
        {
            var _variant = new EndCombatVariant(this);
            _variant.duration = duration;
            _variant.entityId = entityId;
            return _variant;
        }

        public sealed class EndCombatVariant : sul.Utils.Variant
        {

            private CombatEvent _parent;

            public uint duration;
            public uint entityId;

            public EndCombatVariant(CombatEvent parent) : base(parent)
            {
                this._parent = parent;
                this._parent.eventId = 1;
            }

            protected override void EncodeImpl(sul.Utils.Buffer _buffer)
            {
                _parent.EncodeImpl(_buffer);
                _buffer.WriteVaruint(duration);
                _buffer.WriteBigEndianUint(entityId);
            }

            protected override void DecodeImpl(sul.Utils.Buffer _buffer)
            {
                //TODO
            }

        }

        public EntityDeadVariant EntityDead(uint playerId, uint entityId, string message)
        {
            var _variant = new EntityDeadVariant(this);
            _variant.playerId = playerId;
            _variant.entityId = entityId;
            _variant.message = message;
            return _variant;
        }

        public sealed class EntityDeadVariant : sul.Utils.Variant
        {

            private CombatEvent _parent;

            public uint playerId;
            public uint entityId;
            public string message;

            public EntityDeadVariant(CombatEvent parent) : base(parent)
            {
                this._parent = parent;
                this._parent.eventId = 2;
            }

            protected override void EncodeImpl(sul.Utils.Buffer _buffer)
            {
                _parent.EncodeImpl(_buffer);
                _buffer.WriteVaruint(playerId);
                _buffer.WriteBigEndianUint(entityId);
                _buffer.WriteVaruint(Encoding.UTF8.GetByteCount(message)); _buffer.WriteString(message);
            }

            protected override void DecodeImpl(sul.Utils.Buffer _buffer)
            {
                //TODO
            }

        }



    }

    public class PlayerListItem : sul.Utils.Packet
    {

        public const uint Id = 45;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        public uint action;

        public PlayerListItem() : this(0) {}

        public PlayerListItem(uint action)
        {
            this.action = action;
        }

        public override int GetId()
        {
            return (int)Id;
        }

        public override void EncodeId(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteVaruint(Id);
        }

        public override void DecodeId(sul.Utils.Buffer _buffer)
        {
            //_buffer.ReadVaruint();
        }

        protected override void EncodeImpl(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteVaruint(action);
        }

        protected override void DecodeImpl(sul.Utils.Buffer _buffer)
        {
            //action = _buffer.ReadVaruint();
        }

        public static PlayerListItem FromBuffer(byte[] buffer)
        {
            var ret = new PlayerListItem();
            ret.Decode(buffer);
            return ret;
        }

        public AddPlayerVariant AddPlayer(ListAddPlayer[] players)
        {
            var _variant = new AddPlayerVariant(this);
            _variant.players = players;
            return _variant;
        }

        public sealed class AddPlayerVariant : sul.Utils.Variant
        {

            private PlayerListItem _parent;

            public ListAddPlayer[] players;

            public AddPlayerVariant(PlayerListItem parent) : base(parent)
            {
                this._parent = parent;
                this._parent.action = 0;
            }

            protected override void EncodeImpl(sul.Utils.Buffer _buffer)
            {
                _parent.EncodeImpl(_buffer);
                _buffer.WriteVaruint(players.Length); foreach (ListAddPlayer playersChild in players){ playersChild.EncodeBody(_buffer); }
            }

            protected override void DecodeImpl(sul.Utils.Buffer _buffer)
            {
                //TODO
            }

        }

        public UpdateGamemodeVariant UpdateGamemode(ListUpdateGamemode[] players)
        {
            var _variant = new UpdateGamemodeVariant(this);
            _variant.players = players;
            return _variant;
        }

        public sealed class UpdateGamemodeVariant : sul.Utils.Variant
        {

            private PlayerListItem _parent;

            public ListUpdateGamemode[] players;

            public UpdateGamemodeVariant(PlayerListItem parent) : base(parent)
            {
                this._parent = parent;
                this._parent.action = 1;
            }

            protected override void EncodeImpl(sul.Utils.Buffer _buffer)
            {
                _parent.EncodeImpl(_buffer);
                _buffer.WriteVaruint(players.Length); foreach (ListUpdateGamemode playersChild in players){ playersChild.EncodeBody(_buffer); }
            }

            protected override void DecodeImpl(sul.Utils.Buffer _buffer)
            {
                //TODO
            }

        }

        public UpdateLatencyVariant UpdateLatency(ListUpdateLatency[] players)
        {
            var _variant = new UpdateLatencyVariant(this);
            _variant.players = players;
            return _variant;
        }

        public sealed class UpdateLatencyVariant : sul.Utils.Variant
        {

            private PlayerListItem _parent;

            public ListUpdateLatency[] players;

            public UpdateLatencyVariant(PlayerListItem parent) : base(parent)
            {
                this._parent = parent;
                this._parent.action = 2;
            }

            protected override void EncodeImpl(sul.Utils.Buffer _buffer)
            {
                _parent.EncodeImpl(_buffer);
                _buffer.WriteVaruint(players.Length); foreach (ListUpdateLatency playersChild in players){ playersChild.EncodeBody(_buffer); }
            }

            protected override void DecodeImpl(sul.Utils.Buffer _buffer)
            {
                //TODO
            }

        }

        public UpdateDisplayNameVariant UpdateDisplayName(ListUpdateDisplayName[] players)
        {
            var _variant = new UpdateDisplayNameVariant(this);
            _variant.players = players;
            return _variant;
        }

        public sealed class UpdateDisplayNameVariant : sul.Utils.Variant
        {

            private PlayerListItem _parent;

            public ListUpdateDisplayName[] players;

            public UpdateDisplayNameVariant(PlayerListItem parent) : base(parent)
            {
                this._parent = parent;
                this._parent.action = 3;
            }

            protected override void EncodeImpl(sul.Utils.Buffer _buffer)
            {
                _parent.EncodeImpl(_buffer);
                _buffer.WriteVaruint(players.Length); foreach (ListUpdateDisplayName playersChild in players){ playersChild.EncodeBody(_buffer); }
            }

            protected override void DecodeImpl(sul.Utils.Buffer _buffer)
            {
                //TODO
            }

        }

        public RemovePlayerVariant RemovePlayer(System.Guid[] players)
        {
            var _variant = new RemovePlayerVariant(this);
            _variant.players = players;
            return _variant;
        }

        public sealed class RemovePlayerVariant : sul.Utils.Variant
        {

            private PlayerListItem _parent;

            public System.Guid[] players;

            public RemovePlayerVariant(PlayerListItem parent) : base(parent)
            {
                this._parent = parent;
                this._parent.action = 4;
            }

            protected override void EncodeImpl(sul.Utils.Buffer _buffer)
            {
                _parent.EncodeImpl(_buffer);
                _buffer.WriteVaruint(players.Length); foreach (System.Guid playersChild in players){ _buffer.WriteUuid(playersChild); }
            }

            protected override void DecodeImpl(sul.Utils.Buffer _buffer)
            {
                //TODO
            }

        }



    }

    public class PlayerPositionAndLook : sul.Utils.Packet
    {

        public const uint Id = 46;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        // flags
        public const byte X = 1;
        public const byte Y = 2;
        public const byte Z = 4;
        public const byte Y_ROTATION = 8;
        public const byte X_ROTATION = 16;

        public System.Tuple<double, double, double> position;
        public float yaw;
        public float pitch;
        public byte flags;
        public uint teleportId;

        public PlayerPositionAndLook() : this(null, 0, 0, 0, 0) {}

        public PlayerPositionAndLook(System.Tuple<double, double, double> position, float yaw, float pitch, byte flags, uint teleportId)
        {
            this.position = position;
            this.yaw = yaw;
            this.pitch = pitch;
            this.flags = flags;
            this.teleportId = teleportId;
        }

        public override int GetId()
        {
            return (int)Id;
        }

        public override void EncodeId(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteVaruint(Id);
        }

        public override void DecodeId(sul.Utils.Buffer _buffer)
        {
            //_buffer.ReadVaruint();
        }

        protected override void EncodeImpl(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteBigEndianDouble(position.Item1); _buffer.WriteBigEndianDouble(position.Item2); _buffer.WriteBigEndianDouble(position.Item3);
            _buffer.WriteBigEndianFloat(yaw);
            _buffer.WriteBigEndianFloat(pitch);
            _buffer.WriteUbyte(flags);
            _buffer.WriteVaruint(teleportId);
        }

        protected override void DecodeImpl(sul.Utils.Buffer _buffer)
        {
            //position.Item1 = _buffer.ReadBigEndianDouble(); position.Item2 = _buffer.ReadBigEndianDouble(); position.Item3 = _buffer.ReadBigEndianDouble();
            //yaw = _buffer.ReadBigEndianFloat();
            //pitch = _buffer.ReadBigEndianFloat();
            //flags = _buffer.ReadUbyte();
            //teleportId = _buffer.ReadVaruint();
        }

        public static PlayerPositionAndLook FromBuffer(byte[] buffer)
        {
            var ret = new PlayerPositionAndLook();
            ret.Decode(buffer);
            return ret;
        }

    }

    public class UseBed : sul.Utils.Packet
    {

        public const uint Id = 47;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        public uint entityId;
        public ulong position;

        public UseBed() : this(0, 0) {}

        public UseBed(uint entityId, ulong position)
        {
            this.entityId = entityId;
            this.position = position;
        }

        public override int GetId()
        {
            return (int)Id;
        }

        public override void EncodeId(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteVaruint(Id);
        }

        public override void DecodeId(sul.Utils.Buffer _buffer)
        {
            //_buffer.ReadVaruint();
        }

        protected override void EncodeImpl(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteVaruint(entityId);
            _buffer.WriteBigEndianUlong(position);
        }

        protected override void DecodeImpl(sul.Utils.Buffer _buffer)
        {
            //entityId = _buffer.ReadVaruint();
            //position = _buffer.ReadBigEndianUlong();
        }

        public static UseBed FromBuffer(byte[] buffer)
        {
            var ret = new UseBed();
            ret.Decode(buffer);
            return ret;
        }

    }

    public class UnlockRecipes : sul.Utils.Packet
    {

        public const uint Id = 48;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        // action
        public const uint ADD = 1;
        public const uint REMOVE = 2;
        public const uint ADD_WITHOUT_NOTIFICATION = 3;

        public uint action;
        public bool openBook;
        public bool filtering;
        public uint[] recipes;
        public uint[] bookRecipes;

        public UnlockRecipes() : this(0, false, false, new uint[]{}, new uint[]{}) {}

        public UnlockRecipes(uint action, bool openBook, bool filtering, uint[] recipes, uint[] bookRecipes)
        {
            this.action = action;
            this.openBook = openBook;
            this.filtering = filtering;
            this.recipes = recipes;
            this.bookRecipes = bookRecipes;
        }

        public override int GetId()
        {
            return (int)Id;
        }

        public override void EncodeId(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteVaruint(Id);
        }

        public override void DecodeId(sul.Utils.Buffer _buffer)
        {
            //_buffer.ReadVaruint();
        }

        protected override void EncodeImpl(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteVaruint(action);
            _buffer.WriteBool(openBook);
            _buffer.WriteBool(filtering);
            _buffer.WriteVaruint(recipes.Length); foreach (uint recipesChild in recipes){ _buffer.WriteVaruint(recipesChild); }
            if(action==1||action==3){ _buffer.WriteVaruint(bookRecipes.Length); foreach (uint bookRecipesChild in bookRecipes){ _buffer.WriteVaruint(bookRecipesChild); } }
        }

        protected override void DecodeImpl(sul.Utils.Buffer _buffer)
        {
            //action = _buffer.ReadVaruint();
            //openBook = _buffer.ReadBool();
            //filtering = _buffer.ReadBool();
            //recipes.DecodeBody(_buffer);
            //if(action==1||action==3){ bookRecipes.DecodeBody(_buffer); }
        }

        public static UnlockRecipes FromBuffer(byte[] buffer)
        {
            var ret = new UnlockRecipes();
            ret.Decode(buffer);
            return ret;
        }

    }

    public class DestroyEntities : sul.Utils.Packet
    {

        public const uint Id = 49;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        public uint[] entityIds;

        public DestroyEntities() : this(new uint[]{}) {}

        public DestroyEntities(uint[] entityIds)
        {
            this.entityIds = entityIds;
        }

        public override int GetId()
        {
            return (int)Id;
        }

        public override void EncodeId(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteVaruint(Id);
        }

        public override void DecodeId(sul.Utils.Buffer _buffer)
        {
            //_buffer.ReadVaruint();
        }

        protected override void EncodeImpl(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteVaruint(entityIds.Length); foreach (uint entityIdsChild in entityIds){ _buffer.WriteVaruint(entityIdsChild); }
        }

        protected override void DecodeImpl(sul.Utils.Buffer _buffer)
        {
            //entityIds.DecodeBody(_buffer);
        }

        public static DestroyEntities FromBuffer(byte[] buffer)
        {
            var ret = new DestroyEntities();
            ret.Decode(buffer);
            return ret;
        }

    }

    public class RemoveEntityEffect : sul.Utils.Packet
    {

        public const uint Id = 50;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        public uint entityId;
        public byte effectId;

        public RemoveEntityEffect() : this(0, 0) {}

        public RemoveEntityEffect(uint entityId, byte effectId)
        {
            this.entityId = entityId;
            this.effectId = effectId;
        }

        public override int GetId()
        {
            return (int)Id;
        }

        public override void EncodeId(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteVaruint(Id);
        }

        public override void DecodeId(sul.Utils.Buffer _buffer)
        {
            //_buffer.ReadVaruint();
        }

        protected override void EncodeImpl(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteVaruint(entityId);
            _buffer.WriteUbyte(effectId);
        }

        protected override void DecodeImpl(sul.Utils.Buffer _buffer)
        {
            //entityId = _buffer.ReadVaruint();
            //effectId = _buffer.ReadUbyte();
        }

        public static RemoveEntityEffect FromBuffer(byte[] buffer)
        {
            var ret = new RemoveEntityEffect();
            ret.Decode(buffer);
            return ret;
        }

    }

    public class ResourcePackSend : sul.Utils.Packet
    {

        public const uint Id = 51;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        public string url;
        public string hash;

        public ResourcePackSend() : this("", "") {}

        public ResourcePackSend(string url, string hash)
        {
            this.url = url;
            this.hash = hash;
        }

        public override int GetId()
        {
            return (int)Id;
        }

        public override void EncodeId(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteVaruint(Id);
        }

        public override void DecodeId(sul.Utils.Buffer _buffer)
        {
            //_buffer.ReadVaruint();
        }

        protected override void EncodeImpl(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteVaruint(Encoding.UTF8.GetByteCount(url)); _buffer.WriteString(url);
            _buffer.WriteVaruint(Encoding.UTF8.GetByteCount(hash)); _buffer.WriteString(hash);
        }

        protected override void DecodeImpl(sul.Utils.Buffer _buffer)
        {
            //url = _buffer.ReadString();
            //hash = _buffer.ReadString();
        }

        public static ResourcePackSend FromBuffer(byte[] buffer)
        {
            var ret = new ResourcePackSend();
            ret.Decode(buffer);
            return ret;
        }

    }

    public class Respawn : sul.Utils.Packet
    {

        public const uint Id = 52;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        // dimension
        public const int NETHER = -1;
        public const int OVERWORLD = 0;
        public const int END = 1;

        // difficulty
        public const byte PEACEFUL = 0;
        public const byte EASY = 1;
        public const byte NORMAL = 2;
        public const byte HARD = 3;

        // gamemode
        public const byte SURVIVAL = 0;
        public const byte CREATIVE = 1;
        public const byte ADVENTURE = 2;
        public const byte SPECTATOR = 3;

        // level type
        public const string INFINITY = "default";
        public const string FLAT = "flat";
        public const string AMPLIFIED = "amplified";
        public const string LARGE_BIOMES = "largeBiomes";

        public int dimension;
        public byte difficulty;
        public byte gamemode;
        public string levelType;

        public Respawn() : this(0, 0, 0, "") {}

        public Respawn(int dimension, byte difficulty, byte gamemode, string levelType)
        {
            this.dimension = dimension;
            this.difficulty = difficulty;
            this.gamemode = gamemode;
            this.levelType = levelType;
        }

        public override int GetId()
        {
            return (int)Id;
        }

        public override void EncodeId(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteVaruint(Id);
        }

        public override void DecodeId(sul.Utils.Buffer _buffer)
        {
            //_buffer.ReadVaruint();
        }

        protected override void EncodeImpl(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteBigEndianInt(dimension);
            _buffer.WriteUbyte(difficulty);
            _buffer.WriteUbyte(gamemode);
            _buffer.WriteVaruint(Encoding.UTF8.GetByteCount(levelType)); _buffer.WriteString(levelType);
        }

        protected override void DecodeImpl(sul.Utils.Buffer _buffer)
        {
            //dimension = _buffer.ReadBigEndianInt();
            //difficulty = _buffer.ReadUbyte();
            //gamemode = _buffer.ReadUbyte();
            //levelType = _buffer.ReadString();
        }

        public static Respawn FromBuffer(byte[] buffer)
        {
            var ret = new Respawn();
            ret.Decode(buffer);
            return ret;
        }

    }

    public class EntityHeadLook : sul.Utils.Packet
    {

        public const uint Id = 53;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        public uint entityId;
        public byte headYaw;

        public EntityHeadLook() : this(0, 0) {}

        public EntityHeadLook(uint entityId, byte headYaw)
        {
            this.entityId = entityId;
            this.headYaw = headYaw;
        }

        public override int GetId()
        {
            return (int)Id;
        }

        public override void EncodeId(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteVaruint(Id);
        }

        public override void DecodeId(sul.Utils.Buffer _buffer)
        {
            //_buffer.ReadVaruint();
        }

        protected override void EncodeImpl(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteVaruint(entityId);
            _buffer.WriteUbyte(headYaw);
        }

        protected override void DecodeImpl(sul.Utils.Buffer _buffer)
        {
            //entityId = _buffer.ReadVaruint();
            //headYaw = _buffer.ReadUbyte();
        }

        public static EntityHeadLook FromBuffer(byte[] buffer)
        {
            var ret = new EntityHeadLook();
            ret.Decode(buffer);
            return ret;
        }

    }

    public class AdvancementProgress : sul.Utils.Packet
    {

        public const uint Id = 54;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        public bool notEmpty;
        public string identifier;

        public AdvancementProgress() : this(false, "") {}

        public AdvancementProgress(bool notEmpty, string identifier)
        {
            this.notEmpty = notEmpty;
            this.identifier = identifier;
        }

        public override int GetId()
        {
            return (int)Id;
        }

        public override void EncodeId(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteVaruint(Id);
        }

        public override void DecodeId(sul.Utils.Buffer _buffer)
        {
            //_buffer.ReadVaruint();
        }

        protected override void EncodeImpl(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteBool(notEmpty);
            if(notEmpty==true){ _buffer.WriteVaruint(Encoding.UTF8.GetByteCount(identifier)); _buffer.WriteString(identifier); }
        }

        protected override void DecodeImpl(sul.Utils.Buffer _buffer)
        {
            //notEmpty = _buffer.ReadBool();
            //if(notEmpty==true){ identifier = _buffer.ReadString(); }
        }

        public static AdvancementProgress FromBuffer(byte[] buffer)
        {
            var ret = new AdvancementProgress();
            ret.Decode(buffer);
            return ret;
        }

    }

    public class WorldBorder : sul.Utils.Packet
    {

        public const uint Id = 55;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        public uint action;

        public WorldBorder() : this(0) {}

        public WorldBorder(uint action)
        {
            this.action = action;
        }

        public override int GetId()
        {
            return (int)Id;
        }

        public override void EncodeId(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteVaruint(Id);
        }

        public override void DecodeId(sul.Utils.Buffer _buffer)
        {
            //_buffer.ReadVaruint();
        }

        protected override void EncodeImpl(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteVaruint(action);
        }

        protected override void DecodeImpl(sul.Utils.Buffer _buffer)
        {
            //action = _buffer.ReadVaruint();
        }

        public static WorldBorder FromBuffer(byte[] buffer)
        {
            var ret = new WorldBorder();
            ret.Decode(buffer);
            return ret;
        }

        public SetSizeVariant SetSize(double diameter)
        {
            var _variant = new SetSizeVariant(this);
            _variant.diameter = diameter;
            return _variant;
        }

        public sealed class SetSizeVariant : sul.Utils.Variant
        {

            private WorldBorder _parent;

            public double diameter;

            public SetSizeVariant(WorldBorder parent) : base(parent)
            {
                this._parent = parent;
                this._parent.action = 0;
            }

            protected override void EncodeImpl(sul.Utils.Buffer _buffer)
            {
                _parent.EncodeImpl(_buffer);
                _buffer.WriteBigEndianDouble(diameter);
            }

            protected override void DecodeImpl(sul.Utils.Buffer _buffer)
            {
                //TODO
            }

        }

        public LerpSizeVariant LerpSize(double oldDiameter, double newDiameter, ulong speed)
        {
            var _variant = new LerpSizeVariant(this);
            _variant.oldDiameter = oldDiameter;
            _variant.newDiameter = newDiameter;
            _variant.speed = speed;
            return _variant;
        }

        public sealed class LerpSizeVariant : sul.Utils.Variant
        {

            private WorldBorder _parent;

            public double oldDiameter;
            public double newDiameter;
            public ulong speed;

            public LerpSizeVariant(WorldBorder parent) : base(parent)
            {
                this._parent = parent;
                this._parent.action = 1;
            }

            protected override void EncodeImpl(sul.Utils.Buffer _buffer)
            {
                _parent.EncodeImpl(_buffer);
                _buffer.WriteBigEndianDouble(oldDiameter);
                _buffer.WriteBigEndianDouble(newDiameter);
                _buffer.WriteVarulong(speed);
            }

            protected override void DecodeImpl(sul.Utils.Buffer _buffer)
            {
                //TODO
            }

        }

        public SetCenterVariant SetCenter(System.Tuple<double, double, double> center)
        {
            var _variant = new SetCenterVariant(this);
            _variant.center = center;
            return _variant;
        }

        public sealed class SetCenterVariant : sul.Utils.Variant
        {

            private WorldBorder _parent;

            public System.Tuple<double, double, double> center;

            public SetCenterVariant(WorldBorder parent) : base(parent)
            {
                this._parent = parent;
                this._parent.action = 2;
            }

            protected override void EncodeImpl(sul.Utils.Buffer _buffer)
            {
                _parent.EncodeImpl(_buffer);
                _buffer.WriteBigEndianDouble(center.Item1); _buffer.WriteBigEndianDouble(center.Item2); _buffer.WriteBigEndianDouble(center.Item3);
            }

            protected override void DecodeImpl(sul.Utils.Buffer _buffer)
            {
                //TODO
            }

        }

        public InitializeVariant Initialize(System.Tuple<double, double, double> center, double oldDiameter, double newDiameter, ulong speed, uint portalTeleportBoundary, uint warningTime, uint warningBlocks)
        {
            var _variant = new InitializeVariant(this);
            _variant.center = center;
            _variant.oldDiameter = oldDiameter;
            _variant.newDiameter = newDiameter;
            _variant.speed = speed;
            _variant.portalTeleportBoundary = portalTeleportBoundary;
            _variant.warningTime = warningTime;
            _variant.warningBlocks = warningBlocks;
            return _variant;
        }

        public sealed class InitializeVariant : sul.Utils.Variant
        {

            private WorldBorder _parent;

            public System.Tuple<double, double, double> center;
            public double oldDiameter;
            public double newDiameter;
            public ulong speed;
            public uint portalTeleportBoundary;
            public uint warningTime;
            public uint warningBlocks;

            public InitializeVariant(WorldBorder parent) : base(parent)
            {
                this._parent = parent;
                this._parent.action = 3;
            }

            protected override void EncodeImpl(sul.Utils.Buffer _buffer)
            {
                _parent.EncodeImpl(_buffer);
                _buffer.WriteBigEndianDouble(center.Item1); _buffer.WriteBigEndianDouble(center.Item2); _buffer.WriteBigEndianDouble(center.Item3);
                _buffer.WriteBigEndianDouble(oldDiameter);
                _buffer.WriteBigEndianDouble(newDiameter);
                _buffer.WriteVarulong(speed);
                _buffer.WriteVaruint(portalTeleportBoundary);
                _buffer.WriteVaruint(warningTime);
                _buffer.WriteVaruint(warningBlocks);
            }

            protected override void DecodeImpl(sul.Utils.Buffer _buffer)
            {
                //TODO
            }

        }

        public SetWarningTimeVariant SetWarningTime(uint warningTime)
        {
            var _variant = new SetWarningTimeVariant(this);
            _variant.warningTime = warningTime;
            return _variant;
        }

        public sealed class SetWarningTimeVariant : sul.Utils.Variant
        {

            private WorldBorder _parent;

            public uint warningTime;

            public SetWarningTimeVariant(WorldBorder parent) : base(parent)
            {
                this._parent = parent;
                this._parent.action = 4;
            }

            protected override void EncodeImpl(sul.Utils.Buffer _buffer)
            {
                _parent.EncodeImpl(_buffer);
                _buffer.WriteVaruint(warningTime);
            }

            protected override void DecodeImpl(sul.Utils.Buffer _buffer)
            {
                //TODO
            }

        }

        public SetWarningBlocksVariant SetWarningBlocks(uint warningBlocks)
        {
            var _variant = new SetWarningBlocksVariant(this);
            _variant.warningBlocks = warningBlocks;
            return _variant;
        }

        public sealed class SetWarningBlocksVariant : sul.Utils.Variant
        {

            private WorldBorder _parent;

            public uint warningBlocks;

            public SetWarningBlocksVariant(WorldBorder parent) : base(parent)
            {
                this._parent = parent;
                this._parent.action = 5;
            }

            protected override void EncodeImpl(sul.Utils.Buffer _buffer)
            {
                _parent.EncodeImpl(_buffer);
                _buffer.WriteVaruint(warningBlocks);
            }

            protected override void DecodeImpl(sul.Utils.Buffer _buffer)
            {
                //TODO
            }

        }



    }

    public class Camera : sul.Utils.Packet
    {

        public const uint Id = 56;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        public uint entityId;

        public Camera() : this(0) {}

        public Camera(uint entityId)
        {
            this.entityId = entityId;
        }

        public override int GetId()
        {
            return (int)Id;
        }

        public override void EncodeId(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteVaruint(Id);
        }

        public override void DecodeId(sul.Utils.Buffer _buffer)
        {
            //_buffer.ReadVaruint();
        }

        protected override void EncodeImpl(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteVaruint(entityId);
        }

        protected override void DecodeImpl(sul.Utils.Buffer _buffer)
        {
            //entityId = _buffer.ReadVaruint();
        }

        public static Camera FromBuffer(byte[] buffer)
        {
            var ret = new Camera();
            ret.Decode(buffer);
            return ret;
        }

    }

    public class HeldItemChange : sul.Utils.Packet
    {

        public const uint Id = 57;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        public byte slot;

        public HeldItemChange() : this(0) {}

        public HeldItemChange(byte slot)
        {
            this.slot = slot;
        }

        public override int GetId()
        {
            return (int)Id;
        }

        public override void EncodeId(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteVaruint(Id);
        }

        public override void DecodeId(sul.Utils.Buffer _buffer)
        {
            //_buffer.ReadVaruint();
        }

        protected override void EncodeImpl(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteUbyte(slot);
        }

        protected override void DecodeImpl(sul.Utils.Buffer _buffer)
        {
            //slot = _buffer.ReadUbyte();
        }

        public static HeldItemChange FromBuffer(byte[] buffer)
        {
            var ret = new HeldItemChange();
            ret.Decode(buffer);
            return ret;
        }

    }

    public class DisplayScoreboard : sul.Utils.Packet
    {

        public const uint Id = 58;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        // position
        public const byte LIST = 0;
        public const byte SIDEBAR = 1;
        public const byte BELOW_NAME = 2;

        public byte position;
        public string scoreName;

        public DisplayScoreboard() : this(0, "") {}

        public DisplayScoreboard(byte position, string scoreName)
        {
            this.position = position;
            this.scoreName = scoreName;
        }

        public override int GetId()
        {
            return (int)Id;
        }

        public override void EncodeId(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteVaruint(Id);
        }

        public override void DecodeId(sul.Utils.Buffer _buffer)
        {
            //_buffer.ReadVaruint();
        }

        protected override void EncodeImpl(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteUbyte(position);
            _buffer.WriteVaruint(Encoding.UTF8.GetByteCount(scoreName)); _buffer.WriteString(scoreName);
        }

        protected override void DecodeImpl(sul.Utils.Buffer _buffer)
        {
            //position = _buffer.ReadUbyte();
            //scoreName = _buffer.ReadString();
        }

        public static DisplayScoreboard FromBuffer(byte[] buffer)
        {
            var ret = new DisplayScoreboard();
            ret.Decode(buffer);
            return ret;
        }

    }

    public class EntityMetadata : sul.Utils.Packet
    {

        public const uint Id = 59;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        public uint entityId;
        public Metadata metadata;

        public EntityMetadata() : this(0, new Metadata()) {}

        public EntityMetadata(uint entityId, Metadata metadata)
        {
            this.entityId = entityId;
            this.metadata = metadata;
        }

        public override int GetId()
        {
            return (int)Id;
        }

        public override void EncodeId(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteVaruint(Id);
        }

        public override void DecodeId(sul.Utils.Buffer _buffer)
        {
            //_buffer.ReadVaruint();
        }

        protected override void EncodeImpl(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteVaruint(entityId);
            metadata.EncodeBody(_buffer);
        }

        protected override void DecodeImpl(sul.Utils.Buffer _buffer)
        {
            //entityId = _buffer.ReadVaruint();
            //metadata.DecodeBody(_buffer);
        }

        public static EntityMetadata FromBuffer(byte[] buffer)
        {
            var ret = new EntityMetadata();
            ret.Decode(buffer);
            return ret;
        }

    }

    public class AttachEntity : sul.Utils.Packet
    {

        public const uint Id = 60;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        public uint target;
        public uint holder;

        public AttachEntity() : this(0, 0) {}

        public AttachEntity(uint target, uint holder)
        {
            this.target = target;
            this.holder = holder;
        }

        public override int GetId()
        {
            return (int)Id;
        }

        public override void EncodeId(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteVaruint(Id);
        }

        public override void DecodeId(sul.Utils.Buffer _buffer)
        {
            //_buffer.ReadVaruint();
        }

        protected override void EncodeImpl(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteBigEndianUint(target);
            _buffer.WriteBigEndianUint(holder);
        }

        protected override void DecodeImpl(sul.Utils.Buffer _buffer)
        {
            //target = _buffer.ReadBigEndianUint();
            //holder = _buffer.ReadBigEndianUint();
        }

        public static AttachEntity FromBuffer(byte[] buffer)
        {
            var ret = new AttachEntity();
            ret.Decode(buffer);
            return ret;
        }

    }

    public class EntityVelocity : sul.Utils.Packet
    {

        public const uint Id = 61;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        public uint entityId;
        public System.Tuple<short, short, short> velocity;

        public EntityVelocity() : this(0, null) {}

        public EntityVelocity(uint entityId, System.Tuple<short, short, short> velocity)
        {
            this.entityId = entityId;
            this.velocity = velocity;
        }

        public override int GetId()
        {
            return (int)Id;
        }

        public override void EncodeId(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteVaruint(Id);
        }

        public override void DecodeId(sul.Utils.Buffer _buffer)
        {
            //_buffer.ReadVaruint();
        }

        protected override void EncodeImpl(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteVaruint(entityId);
            _buffer.WriteBigEndianShort(velocity.Item1); _buffer.WriteBigEndianShort(velocity.Item2); _buffer.WriteBigEndianShort(velocity.Item3);
        }

        protected override void DecodeImpl(sul.Utils.Buffer _buffer)
        {
            //entityId = _buffer.ReadVaruint();
            //velocity.Item1 = _buffer.ReadBigEndianShort(); velocity.Item2 = _buffer.ReadBigEndianShort(); velocity.Item3 = _buffer.ReadBigEndianShort();
        }

        public static EntityVelocity FromBuffer(byte[] buffer)
        {
            var ret = new EntityVelocity();
            ret.Decode(buffer);
            return ret;
        }

    }

    public class EntityEquipment : sul.Utils.Packet
    {

        public const uint Id = 62;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        public uint entityId;
        public uint slot;
        public Slot item;

        public EntityEquipment() : this(0, 0, new Slot()) {}

        public EntityEquipment(uint entityId, uint slot, Slot item)
        {
            this.entityId = entityId;
            this.slot = slot;
            this.item = item;
        }

        public override int GetId()
        {
            return (int)Id;
        }

        public override void EncodeId(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteVaruint(Id);
        }

        public override void DecodeId(sul.Utils.Buffer _buffer)
        {
            //_buffer.ReadVaruint();
        }

        protected override void EncodeImpl(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteVaruint(entityId);
            _buffer.WriteVaruint(slot);
            item.EncodeBody(_buffer);
        }

        protected override void DecodeImpl(sul.Utils.Buffer _buffer)
        {
            //entityId = _buffer.ReadVaruint();
            //slot = _buffer.ReadVaruint();
            //item.DecodeBody(_buffer);
        }

        public static EntityEquipment FromBuffer(byte[] buffer)
        {
            var ret = new EntityEquipment();
            ret.Decode(buffer);
            return ret;
        }

    }

    public class SetExperience : sul.Utils.Packet
    {

        public const uint Id = 63;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        public float experience;
        public uint level;
        public uint totalExperience;

        public SetExperience() : this(0, 0, 0) {}

        public SetExperience(float experience, uint level, uint totalExperience)
        {
            this.experience = experience;
            this.level = level;
            this.totalExperience = totalExperience;
        }

        public override int GetId()
        {
            return (int)Id;
        }

        public override void EncodeId(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteVaruint(Id);
        }

        public override void DecodeId(sul.Utils.Buffer _buffer)
        {
            //_buffer.ReadVaruint();
        }

        protected override void EncodeImpl(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteBigEndianFloat(experience);
            _buffer.WriteVaruint(level);
            _buffer.WriteVaruint(totalExperience);
        }

        protected override void DecodeImpl(sul.Utils.Buffer _buffer)
        {
            //experience = _buffer.ReadBigEndianFloat();
            //level = _buffer.ReadVaruint();
            //totalExperience = _buffer.ReadVaruint();
        }

        public static SetExperience FromBuffer(byte[] buffer)
        {
            var ret = new SetExperience();
            ret.Decode(buffer);
            return ret;
        }

    }

    public class UpdateHealth : sul.Utils.Packet
    {

        public const uint Id = 64;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        public float health;
        public uint hunger;
        public float saturation;

        public UpdateHealth() : this(0, 0, 0) {}

        public UpdateHealth(float health, uint hunger, float saturation)
        {
            this.health = health;
            this.hunger = hunger;
            this.saturation = saturation;
        }

        public override int GetId()
        {
            return (int)Id;
        }

        public override void EncodeId(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteVaruint(Id);
        }

        public override void DecodeId(sul.Utils.Buffer _buffer)
        {
            //_buffer.ReadVaruint();
        }

        protected override void EncodeImpl(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteBigEndianFloat(health);
            _buffer.WriteVaruint(hunger);
            _buffer.WriteBigEndianFloat(saturation);
        }

        protected override void DecodeImpl(sul.Utils.Buffer _buffer)
        {
            //health = _buffer.ReadBigEndianFloat();
            //hunger = _buffer.ReadVaruint();
            //saturation = _buffer.ReadBigEndianFloat();
        }

        public static UpdateHealth FromBuffer(byte[] buffer)
        {
            var ret = new UpdateHealth();
            ret.Decode(buffer);
            return ret;
        }

    }

    public class ScoreboardObjective : sul.Utils.Packet
    {

        public const uint Id = 65;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        // mode
        public const byte CREATE = 0;
        public const byte REMOVE = 1;
        public const byte UPDATE = 2;

        // type
        public const string NUMERIC = "integer";
        public const string GRAPHIC = "hearts";

        public string name;
        public byte mode;
        public string @value;
        public string type;

        public ScoreboardObjective() : this("", 0, "", "") {}

        public ScoreboardObjective(string name, byte mode, string @value, string type)
        {
            this.name = name;
            this.mode = mode;
            this.@value = @value;
            this.type = type;
        }

        public override int GetId()
        {
            return (int)Id;
        }

        public override void EncodeId(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteVaruint(Id);
        }

        public override void DecodeId(sul.Utils.Buffer _buffer)
        {
            //_buffer.ReadVaruint();
        }

        protected override void EncodeImpl(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteVaruint(Encoding.UTF8.GetByteCount(name)); _buffer.WriteString(name);
            _buffer.WriteUbyte(mode);
            if(mode!=1){ _buffer.WriteVaruint(Encoding.UTF8.GetByteCount(@value)); _buffer.WriteString(@value); }
            if(mode!=1){ _buffer.WriteVaruint(Encoding.UTF8.GetByteCount(type)); _buffer.WriteString(type); }
        }

        protected override void DecodeImpl(sul.Utils.Buffer _buffer)
        {
            //name = _buffer.ReadString();
            //mode = _buffer.ReadUbyte();
            //if(mode!=1){ @value = _buffer.ReadString(); }
            //if(mode!=1){ type = _buffer.ReadString(); }
        }

        public static ScoreboardObjective FromBuffer(byte[] buffer)
        {
            var ret = new ScoreboardObjective();
            ret.Decode(buffer);
            return ret;
        }

    }

    public class SetPassengers : sul.Utils.Packet
    {

        public const uint Id = 66;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        public uint entityId;
        public uint[] passengers;

        public SetPassengers() : this(0, new uint[]{}) {}

        public SetPassengers(uint entityId, uint[] passengers)
        {
            this.entityId = entityId;
            this.passengers = passengers;
        }

        public override int GetId()
        {
            return (int)Id;
        }

        public override void EncodeId(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteVaruint(Id);
        }

        public override void DecodeId(sul.Utils.Buffer _buffer)
        {
            //_buffer.ReadVaruint();
        }

        protected override void EncodeImpl(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteVaruint(entityId);
            _buffer.WriteVaruint(passengers.Length); foreach (uint passengersChild in passengers){ _buffer.WriteVaruint(passengersChild); }
        }

        protected override void DecodeImpl(sul.Utils.Buffer _buffer)
        {
            //entityId = _buffer.ReadVaruint();
            //passengers.DecodeBody(_buffer);
        }

        public static SetPassengers FromBuffer(byte[] buffer)
        {
            var ret = new SetPassengers();
            ret.Decode(buffer);
            return ret;
        }

    }

    public class Teams : sul.Utils.Packet
    {

        public const uint Id = 67;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        public string name;
        public byte mode;

        public Teams() : this("", 0) {}

        public Teams(string name, byte mode)
        {
            this.name = name;
            this.mode = mode;
        }

        public override int GetId()
        {
            return (int)Id;
        }

        public override void EncodeId(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteVaruint(Id);
        }

        public override void DecodeId(sul.Utils.Buffer _buffer)
        {
            //_buffer.ReadVaruint();
        }

        protected override void EncodeImpl(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteVaruint(Encoding.UTF8.GetByteCount(name)); _buffer.WriteString(name);
            _buffer.WriteUbyte(mode);
        }

        protected override void DecodeImpl(sul.Utils.Buffer _buffer)
        {
            //name = _buffer.ReadString();
            //mode = _buffer.ReadUbyte();
        }

        public static Teams FromBuffer(byte[] buffer)
        {
            var ret = new Teams();
            ret.Decode(buffer);
            return ret;
        }

        public CreateTeamVariant CreateTeam(string displayName, string prefix, string suffix, byte friendlyFlags, string nametagVisibility, string collisionRule, byte color, string[] players)
        {
            var _variant = new CreateTeamVariant(this);
            _variant.displayName = displayName;
            _variant.prefix = prefix;
            _variant.suffix = suffix;
            _variant.friendlyFlags = friendlyFlags;
            _variant.nametagVisibility = nametagVisibility;
            _variant.collisionRule = collisionRule;
            _variant.color = color;
            _variant.players = players;
            return _variant;
        }

        public sealed class CreateTeamVariant : sul.Utils.Variant
        {

            private Teams _parent;

            public string displayName;
            public string prefix;
            public string suffix;
            public byte friendlyFlags;
            public string nametagVisibility;
            public string collisionRule;
            public byte color;
            public string[] players;

            public CreateTeamVariant(Teams parent) : base(parent)
            {
                this._parent = parent;
                this._parent.mode = 0;
            }

            protected override void EncodeImpl(sul.Utils.Buffer _buffer)
            {
                _parent.EncodeImpl(_buffer);
                _buffer.WriteVaruint(Encoding.UTF8.GetByteCount(displayName)); _buffer.WriteString(displayName);
                _buffer.WriteVaruint(Encoding.UTF8.GetByteCount(prefix)); _buffer.WriteString(prefix);
                _buffer.WriteVaruint(Encoding.UTF8.GetByteCount(suffix)); _buffer.WriteString(suffix);
                _buffer.WriteUbyte(friendlyFlags);
                _buffer.WriteVaruint(Encoding.UTF8.GetByteCount(nametagVisibility)); _buffer.WriteString(nametagVisibility);
                _buffer.WriteVaruint(Encoding.UTF8.GetByteCount(collisionRule)); _buffer.WriteString(collisionRule);
                _buffer.WriteUbyte(color);
                _buffer.WriteVaruint(players.Length); foreach (string playersChild in players){ _buffer.WriteVaruint(Encoding.UTF8.GetByteCount(playersChild)); _buffer.WriteString(playersChild); }
            }

            protected override void DecodeImpl(sul.Utils.Buffer _buffer)
            {
                //TODO
            }

        }

        public RemoveTeamVariant RemoveTeam()
        {
            var _variant = new RemoveTeamVariant(this);

            return _variant;
        }

        public sealed class RemoveTeamVariant : sul.Utils.Variant
        {

            private Teams _parent;



            public RemoveTeamVariant(Teams parent) : base(parent)
            {
                this._parent = parent;
                this._parent.mode = 1;
            }

            protected override void EncodeImpl(sul.Utils.Buffer _buffer)
            {
                _parent.EncodeImpl(_buffer);

            }

            protected override void DecodeImpl(sul.Utils.Buffer _buffer)
            {
                //TODO
            }

        }

        public UpdateTeamInfoVariant UpdateTeamInfo(string displayName, string prefix, string suffix, byte friendlyFlags, string nametagVisibility, string collisionRule, byte color)
        {
            var _variant = new UpdateTeamInfoVariant(this);
            _variant.displayName = displayName;
            _variant.prefix = prefix;
            _variant.suffix = suffix;
            _variant.friendlyFlags = friendlyFlags;
            _variant.nametagVisibility = nametagVisibility;
            _variant.collisionRule = collisionRule;
            _variant.color = color;
            return _variant;
        }

        public sealed class UpdateTeamInfoVariant : sul.Utils.Variant
        {

            private Teams _parent;

            public string displayName;
            public string prefix;
            public string suffix;
            public byte friendlyFlags;
            public string nametagVisibility;
            public string collisionRule;
            public byte color;

            public UpdateTeamInfoVariant(Teams parent) : base(parent)
            {
                this._parent = parent;
                this._parent.mode = 2;
            }

            protected override void EncodeImpl(sul.Utils.Buffer _buffer)
            {
                _parent.EncodeImpl(_buffer);
                _buffer.WriteVaruint(Encoding.UTF8.GetByteCount(displayName)); _buffer.WriteString(displayName);
                _buffer.WriteVaruint(Encoding.UTF8.GetByteCount(prefix)); _buffer.WriteString(prefix);
                _buffer.WriteVaruint(Encoding.UTF8.GetByteCount(suffix)); _buffer.WriteString(suffix);
                _buffer.WriteUbyte(friendlyFlags);
                _buffer.WriteVaruint(Encoding.UTF8.GetByteCount(nametagVisibility)); _buffer.WriteString(nametagVisibility);
                _buffer.WriteVaruint(Encoding.UTF8.GetByteCount(collisionRule)); _buffer.WriteString(collisionRule);
                _buffer.WriteUbyte(color);
            }

            protected override void DecodeImpl(sul.Utils.Buffer _buffer)
            {
                //TODO
            }

        }

        public AddPlayersVariant AddPlayers(string[] players)
        {
            var _variant = new AddPlayersVariant(this);
            _variant.players = players;
            return _variant;
        }

        public sealed class AddPlayersVariant : sul.Utils.Variant
        {

            private Teams _parent;

            public string[] players;

            public AddPlayersVariant(Teams parent) : base(parent)
            {
                this._parent = parent;
                this._parent.mode = 3;
            }

            protected override void EncodeImpl(sul.Utils.Buffer _buffer)
            {
                _parent.EncodeImpl(_buffer);
                _buffer.WriteVaruint(players.Length); foreach (string playersChild in players){ _buffer.WriteVaruint(Encoding.UTF8.GetByteCount(playersChild)); _buffer.WriteString(playersChild); }
            }

            protected override void DecodeImpl(sul.Utils.Buffer _buffer)
            {
                //TODO
            }

        }

        public RemovePlayersVariant RemovePlayers(string[] players)
        {
            var _variant = new RemovePlayersVariant(this);
            _variant.players = players;
            return _variant;
        }

        public sealed class RemovePlayersVariant : sul.Utils.Variant
        {

            private Teams _parent;

            public string[] players;

            public RemovePlayersVariant(Teams parent) : base(parent)
            {
                this._parent = parent;
                this._parent.mode = 4;
            }

            protected override void EncodeImpl(sul.Utils.Buffer _buffer)
            {
                _parent.EncodeImpl(_buffer);
                _buffer.WriteVaruint(players.Length); foreach (string playersChild in players){ _buffer.WriteVaruint(Encoding.UTF8.GetByteCount(playersChild)); _buffer.WriteString(playersChild); }
            }

            protected override void DecodeImpl(sul.Utils.Buffer _buffer)
            {
                //TODO
            }

        }



    }

    public class UpdateScore : sul.Utils.Packet
    {

        public const uint Id = 68;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        // action
        public const byte UPDATE = 0;
        public const byte REMOVE = 1;

        public string scoreName;
        public byte action;
        public string objectiveName;
        public uint @value;

        public UpdateScore() : this("", 0, "", 0) {}

        public UpdateScore(string scoreName, byte action, string objectiveName, uint @value)
        {
            this.scoreName = scoreName;
            this.action = action;
            this.objectiveName = objectiveName;
            this.@value = @value;
        }

        public override int GetId()
        {
            return (int)Id;
        }

        public override void EncodeId(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteVaruint(Id);
        }

        public override void DecodeId(sul.Utils.Buffer _buffer)
        {
            //_buffer.ReadVaruint();
        }

        protected override void EncodeImpl(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteVaruint(Encoding.UTF8.GetByteCount(scoreName)); _buffer.WriteString(scoreName);
            _buffer.WriteUbyte(action);
            _buffer.WriteVaruint(Encoding.UTF8.GetByteCount(objectiveName)); _buffer.WriteString(objectiveName);
            if(action==0){ _buffer.WriteVaruint(@value); }
        }

        protected override void DecodeImpl(sul.Utils.Buffer _buffer)
        {
            //scoreName = _buffer.ReadString();
            //action = _buffer.ReadUbyte();
            //objectiveName = _buffer.ReadString();
            //if(action==0){ @value = _buffer.ReadVaruint(); }
        }

        public static UpdateScore FromBuffer(byte[] buffer)
        {
            var ret = new UpdateScore();
            ret.Decode(buffer);
            return ret;
        }

    }

    public class SpawnPosition : sul.Utils.Packet
    {

        public const uint Id = 69;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        public ulong position;

        public SpawnPosition() : this(0) {}

        public SpawnPosition(ulong position)
        {
            this.position = position;
        }

        public override int GetId()
        {
            return (int)Id;
        }

        public override void EncodeId(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteVaruint(Id);
        }

        public override void DecodeId(sul.Utils.Buffer _buffer)
        {
            //_buffer.ReadVaruint();
        }

        protected override void EncodeImpl(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteBigEndianUlong(position);
        }

        protected override void DecodeImpl(sul.Utils.Buffer _buffer)
        {
            //position = _buffer.ReadBigEndianUlong();
        }

        public static SpawnPosition FromBuffer(byte[] buffer)
        {
            var ret = new SpawnPosition();
            ret.Decode(buffer);
            return ret;
        }

    }

    public class TimeUpdate : sul.Utils.Packet
    {

        public const uint Id = 70;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        public ulong worldAge;
        public long time;

        public TimeUpdate() : this(0, 0) {}

        public TimeUpdate(ulong worldAge, long time)
        {
            this.worldAge = worldAge;
            this.time = time;
        }

        public override int GetId()
        {
            return (int)Id;
        }

        public override void EncodeId(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteVaruint(Id);
        }

        public override void DecodeId(sul.Utils.Buffer _buffer)
        {
            //_buffer.ReadVaruint();
        }

        protected override void EncodeImpl(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteBigEndianUlong(worldAge);
            _buffer.WriteBigEndianLong(time);
        }

        protected override void DecodeImpl(sul.Utils.Buffer _buffer)
        {
            //worldAge = _buffer.ReadBigEndianUlong();
            //time = _buffer.ReadBigEndianLong();
        }

        public static TimeUpdate FromBuffer(byte[] buffer)
        {
            var ret = new TimeUpdate();
            ret.Decode(buffer);
            return ret;
        }

    }

    public class Title : sul.Utils.Packet
    {

        public const uint Id = 71;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        public uint action;

        public Title() : this(0) {}

        public Title(uint action)
        {
            this.action = action;
        }

        public override int GetId()
        {
            return (int)Id;
        }

        public override void EncodeId(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteVaruint(Id);
        }

        public override void DecodeId(sul.Utils.Buffer _buffer)
        {
            //_buffer.ReadVaruint();
        }

        protected override void EncodeImpl(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteVaruint(action);
        }

        protected override void DecodeImpl(sul.Utils.Buffer _buffer)
        {
            //action = _buffer.ReadVaruint();
        }

        public static Title FromBuffer(byte[] buffer)
        {
            var ret = new Title();
            ret.Decode(buffer);
            return ret;
        }

        public SetTitleVariant SetTitle(string text)
        {
            var _variant = new SetTitleVariant(this);
            _variant.text = text;
            return _variant;
        }

        public sealed class SetTitleVariant : sul.Utils.Variant
        {

            private Title _parent;

            public string text;

            public SetTitleVariant(Title parent) : base(parent)
            {
                this._parent = parent;
                this._parent.action = 0;
            }

            protected override void EncodeImpl(sul.Utils.Buffer _buffer)
            {
                _parent.EncodeImpl(_buffer);
                _buffer.WriteVaruint(Encoding.UTF8.GetByteCount(text)); _buffer.WriteString(text);
            }

            protected override void DecodeImpl(sul.Utils.Buffer _buffer)
            {
                //TODO
            }

        }

        public SetSubtitleVariant SetSubtitle(string text)
        {
            var _variant = new SetSubtitleVariant(this);
            _variant.text = text;
            return _variant;
        }

        public sealed class SetSubtitleVariant : sul.Utils.Variant
        {

            private Title _parent;

            public string text;

            public SetSubtitleVariant(Title parent) : base(parent)
            {
                this._parent = parent;
                this._parent.action = 1;
            }

            protected override void EncodeImpl(sul.Utils.Buffer _buffer)
            {
                _parent.EncodeImpl(_buffer);
                _buffer.WriteVaruint(Encoding.UTF8.GetByteCount(text)); _buffer.WriteString(text);
            }

            protected override void DecodeImpl(sul.Utils.Buffer _buffer)
            {
                //TODO
            }

        }

        public SetActionBarVariant SetActionBar(string text)
        {
            var _variant = new SetActionBarVariant(this);
            _variant.text = text;
            return _variant;
        }

        public sealed class SetActionBarVariant : sul.Utils.Variant
        {

            private Title _parent;

            public string text;

            public SetActionBarVariant(Title parent) : base(parent)
            {
                this._parent = parent;
                this._parent.action = 2;
            }

            protected override void EncodeImpl(sul.Utils.Buffer _buffer)
            {
                _parent.EncodeImpl(_buffer);
                _buffer.WriteVaruint(Encoding.UTF8.GetByteCount(text)); _buffer.WriteString(text);
            }

            protected override void DecodeImpl(sul.Utils.Buffer _buffer)
            {
                //TODO
            }

        }

        public SetTimingsVariant SetTimings(uint fadeIn, uint stay, uint fadeOut)
        {
            var _variant = new SetTimingsVariant(this);
            _variant.fadeIn = fadeIn;
            _variant.stay = stay;
            _variant.fadeOut = fadeOut;
            return _variant;
        }

        public sealed class SetTimingsVariant : sul.Utils.Variant
        {

            private Title _parent;

            public uint fadeIn;
            public uint stay;
            public uint fadeOut;

            public SetTimingsVariant(Title parent) : base(parent)
            {
                this._parent = parent;
                this._parent.action = 3;
            }

            protected override void EncodeImpl(sul.Utils.Buffer _buffer)
            {
                _parent.EncodeImpl(_buffer);
                _buffer.WriteBigEndianUint(fadeIn);
                _buffer.WriteBigEndianUint(stay);
                _buffer.WriteBigEndianUint(fadeOut);
            }

            protected override void DecodeImpl(sul.Utils.Buffer _buffer)
            {
                //TODO
            }

        }

        public HideVariant Hide()
        {
            var _variant = new HideVariant(this);

            return _variant;
        }

        public sealed class HideVariant : sul.Utils.Variant
        {

            private Title _parent;



            public HideVariant(Title parent) : base(parent)
            {
                this._parent = parent;
                this._parent.action = 4;
            }

            protected override void EncodeImpl(sul.Utils.Buffer _buffer)
            {
                _parent.EncodeImpl(_buffer);

            }

            protected override void DecodeImpl(sul.Utils.Buffer _buffer)
            {
                //TODO
            }

        }

        public ResetVariant Reset()
        {
            var _variant = new ResetVariant(this);

            return _variant;
        }

        public sealed class ResetVariant : sul.Utils.Variant
        {

            private Title _parent;



            public ResetVariant(Title parent) : base(parent)
            {
                this._parent = parent;
                this._parent.action = 5;
            }

            protected override void EncodeImpl(sul.Utils.Buffer _buffer)
            {
                _parent.EncodeImpl(_buffer);

            }

            protected override void DecodeImpl(sul.Utils.Buffer _buffer)
            {
                //TODO
            }

        }



    }

    public class SoundEffect : sul.Utils.Packet
    {

        public const uint Id = 72;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        public uint soundId;
        public uint category;
        public System.Tuple<int, int, int> position;
        public float volume;
        public float pitch;

        public SoundEffect() : this(0, 0, null, 0, 0) {}

        public SoundEffect(uint soundId, uint category, System.Tuple<int, int, int> position, float volume, float pitch)
        {
            this.soundId = soundId;
            this.category = category;
            this.position = position;
            this.volume = volume;
            this.pitch = pitch;
        }

        public override int GetId()
        {
            return (int)Id;
        }

        public override void EncodeId(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteVaruint(Id);
        }

        public override void DecodeId(sul.Utils.Buffer _buffer)
        {
            //_buffer.ReadVaruint();
        }

        protected override void EncodeImpl(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteVaruint(soundId);
            _buffer.WriteVaruint(category);
            _buffer.WriteBigEndianInt(position.Item1); _buffer.WriteBigEndianInt(position.Item2); _buffer.WriteBigEndianInt(position.Item3);
            _buffer.WriteBigEndianFloat(volume);
            _buffer.WriteBigEndianFloat(pitch);
        }

        protected override void DecodeImpl(sul.Utils.Buffer _buffer)
        {
            //soundId = _buffer.ReadVaruint();
            //category = _buffer.ReadVaruint();
            //position.Item1 = _buffer.ReadBigEndianInt(); position.Item2 = _buffer.ReadBigEndianInt(); position.Item3 = _buffer.ReadBigEndianInt();
            //volume = _buffer.ReadBigEndianFloat();
            //pitch = _buffer.ReadBigEndianFloat();
        }

        public static SoundEffect FromBuffer(byte[] buffer)
        {
            var ret = new SoundEffect();
            ret.Decode(buffer);
            return ret;
        }

    }

    public class PlayerListHeaderAndFooter : sul.Utils.Packet
    {

        public const uint Id = 73;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        public string header;
        public string footer;

        public PlayerListHeaderAndFooter() : this("", "") {}

        public PlayerListHeaderAndFooter(string header, string footer)
        {
            this.header = header;
            this.footer = footer;
        }

        public override int GetId()
        {
            return (int)Id;
        }

        public override void EncodeId(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteVaruint(Id);
        }

        public override void DecodeId(sul.Utils.Buffer _buffer)
        {
            //_buffer.ReadVaruint();
        }

        protected override void EncodeImpl(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteVaruint(Encoding.UTF8.GetByteCount(header)); _buffer.WriteString(header);
            _buffer.WriteVaruint(Encoding.UTF8.GetByteCount(footer)); _buffer.WriteString(footer);
        }

        protected override void DecodeImpl(sul.Utils.Buffer _buffer)
        {
            //header = _buffer.ReadString();
            //footer = _buffer.ReadString();
        }

        public static PlayerListHeaderAndFooter FromBuffer(byte[] buffer)
        {
            var ret = new PlayerListHeaderAndFooter();
            ret.Decode(buffer);
            return ret;
        }

    }

    public class CollectItem : sul.Utils.Packet
    {

        public const uint Id = 74;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        public uint collected;
        public uint collector;
        public uint count;

        public CollectItem() : this(0, 0, 0) {}

        public CollectItem(uint collected, uint collector, uint count)
        {
            this.collected = collected;
            this.collector = collector;
            this.count = count;
        }

        public override int GetId()
        {
            return (int)Id;
        }

        public override void EncodeId(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteVaruint(Id);
        }

        public override void DecodeId(sul.Utils.Buffer _buffer)
        {
            //_buffer.ReadVaruint();
        }

        protected override void EncodeImpl(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteVaruint(collected);
            _buffer.WriteVaruint(collector);
            _buffer.WriteVaruint(count);
        }

        protected override void DecodeImpl(sul.Utils.Buffer _buffer)
        {
            //collected = _buffer.ReadVaruint();
            //collector = _buffer.ReadVaruint();
            //count = _buffer.ReadVaruint();
        }

        public static CollectItem FromBuffer(byte[] buffer)
        {
            var ret = new CollectItem();
            ret.Decode(buffer);
            return ret;
        }

    }

    public class EntityTeleport : sul.Utils.Packet
    {

        public const uint Id = 75;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        public uint entityId;
        public System.Tuple<double, double, double> position;
        public byte yaw;
        public byte pitch;
        public bool onGround;

        public EntityTeleport() : this(0, null, 0, 0, false) {}

        public EntityTeleport(uint entityId, System.Tuple<double, double, double> position, byte yaw, byte pitch, bool onGround)
        {
            this.entityId = entityId;
            this.position = position;
            this.yaw = yaw;
            this.pitch = pitch;
            this.onGround = onGround;
        }

        public override int GetId()
        {
            return (int)Id;
        }

        public override void EncodeId(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteVaruint(Id);
        }

        public override void DecodeId(sul.Utils.Buffer _buffer)
        {
            //_buffer.ReadVaruint();
        }

        protected override void EncodeImpl(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteVaruint(entityId);
            _buffer.WriteBigEndianDouble(position.Item1); _buffer.WriteBigEndianDouble(position.Item2); _buffer.WriteBigEndianDouble(position.Item3);
            _buffer.WriteUbyte(yaw);
            _buffer.WriteUbyte(pitch);
            _buffer.WriteBool(onGround);
        }

        protected override void DecodeImpl(sul.Utils.Buffer _buffer)
        {
            //entityId = _buffer.ReadVaruint();
            //position.Item1 = _buffer.ReadBigEndianDouble(); position.Item2 = _buffer.ReadBigEndianDouble(); position.Item3 = _buffer.ReadBigEndianDouble();
            //yaw = _buffer.ReadUbyte();
            //pitch = _buffer.ReadUbyte();
            //onGround = _buffer.ReadBool();
        }

        public static EntityTeleport FromBuffer(byte[] buffer)
        {
            var ret = new EntityTeleport();
            ret.Decode(buffer);
            return ret;
        }

    }

    public class Advencements : sul.Utils.Packet
    {

        public const uint Id = 76;

        public const bool Clientbound = true;
        public const bool Serverbound = false;



        public Advencements()
        {

        }

        public override int GetId()
        {
            return (int)Id;
        }

        public override void EncodeId(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteVaruint(Id);
        }

        public override void DecodeId(sul.Utils.Buffer _buffer)
        {
            //_buffer.ReadVaruint();
        }

        protected override void EncodeImpl(sul.Utils.Buffer _buffer)
        {

        }

        protected override void DecodeImpl(sul.Utils.Buffer _buffer)
        {

        }

        public static Advencements FromBuffer(byte[] buffer)
        {
            var ret = new Advencements();
            ret.Decode(buffer);
            return ret;
        }

    }

    public class EntityProperties : sul.Utils.Packet
    {

        public const uint Id = 77;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        public uint entityId;
        public Attribute[] attributes;

        public EntityProperties() : this(0, new Attribute[]{}) {}

        public EntityProperties(uint entityId, Attribute[] attributes)
        {
            this.entityId = entityId;
            this.attributes = attributes;
        }

        public override int GetId()
        {
            return (int)Id;
        }

        public override void EncodeId(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteVaruint(Id);
        }

        public override void DecodeId(sul.Utils.Buffer _buffer)
        {
            //_buffer.ReadVaruint();
        }

        protected override void EncodeImpl(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteVaruint(entityId);
            _buffer.WriteBigEndianUint(attributes.Length); foreach (Attribute attributesChild in attributes){ attributesChild.EncodeBody(_buffer); }
        }

        protected override void DecodeImpl(sul.Utils.Buffer _buffer)
        {
            //entityId = _buffer.ReadVaruint();
            //attributes.DecodeBody(_buffer);
        }

        public static EntityProperties FromBuffer(byte[] buffer)
        {
            var ret = new EntityProperties();
            ret.Decode(buffer);
            return ret;
        }

    }

    public class EntityEffect : sul.Utils.Packet
    {

        public const uint Id = 78;

        public const bool Clientbound = true;
        public const bool Serverbound = false;

        // flags
        public const byte AMBIENT = 1;
        public const byte SHOW_PARTICLES = 2;

        public uint entityId;
        public byte effectId;
        public byte amplifier;
        public uint duration;
        public byte flags;

        public EntityEffect() : this(0, 0, 0, 0, 0) {}

        public EntityEffect(uint entityId, byte effectId, byte amplifier, uint duration, byte flags)
        {
            this.entityId = entityId;
            this.effectId = effectId;
            this.amplifier = amplifier;
            this.duration = duration;
            this.flags = flags;
        }

        public override int GetId()
        {
            return (int)Id;
        }

        public override void EncodeId(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteVaruint(Id);
        }

        public override void DecodeId(sul.Utils.Buffer _buffer)
        {
            //_buffer.ReadVaruint();
        }

        protected override void EncodeImpl(sul.Utils.Buffer _buffer)
        {
            _buffer.WriteVaruint(entityId);
            _buffer.WriteUbyte(effectId);
            _buffer.WriteUbyte(amplifier);
            _buffer.WriteVaruint(duration);
            _buffer.WriteUbyte(flags);
        }

        protected override void DecodeImpl(sul.Utils.Buffer _buffer)
        {
            //entityId = _buffer.ReadVaruint();
            //effectId = _buffer.ReadUbyte();
            //amplifier = _buffer.ReadUbyte();
            //duration = _buffer.ReadVaruint();
            //flags = _buffer.ReadUbyte();
        }

        public static EntityEffect FromBuffer(byte[] buffer)
        {
            var ret = new EntityEffect();
            ret.Decode(buffer);
            return ret;
        }

    }

}
